import{_ as l,o as i,c as a,V as e}from"./chunks/framework.b450deef.js";const m=JSON.parse('{"title":"APP测试方向","description":"","frontmatter":{},"headers":[],"relativePath":"articles/04-面试/软件测试/APP测试.md","filePath":"articles/04-面试/软件测试/APP测试.md"}'),o={name:"articles/04-面试/软件测试/APP测试.md"},r=e('<h1 id="app测试方向" tabindex="-1">APP测试方向 <a class="header-anchor" href="#app测试方向" aria-label="Permalink to &quot;APP测试方向&quot;">​</a></h1><h2 id="功能测试" tabindex="-1">功能测试 <a class="header-anchor" href="#功能测试" aria-label="Permalink to &quot;功能测试&quot;">​</a></h2><p>功能性测试目的是帮助我们验证该功能是否被实现以及该功能是否符合产品需求文档，主要包括：</p><ol><li>业务逻辑测试：主要验证App业务是否符合预期，一般测试流程为：<code>阅读需求文档→了解开发实现→画出开发实现流程图→编写测试用例</code></li><li>UI测试：由于手机的某些局限性，如手机的显示区域小，不能有太丰富的展示效果；手机的操作主要依赖于拇指，交互过程不能设计得太复杂等，所以需要关注界面元素的布局和自适应性 （横屏和竖屏）、界面的美观和简洁度以及用户体验。</li></ol><p>注：功能测试方法可以有手动测试和自动化测试。</p><h2 id="性能测试" tabindex="-1">性能测试 <a class="header-anchor" href="#性能测试" aria-label="Permalink to &quot;性能测试&quot;">​</a></h2><p>衡量一个APP做的好不好标准，除了功能还有性能。由于手机内存限制，很容易出现内存泄漏、越界问题，需要保证一款合格的App在高、中、低端手机上都可以流畅运行。针对性能，我们关注的参数有</p><ul><li>内存</li><li>CPU测试</li><li>流量测试</li><li>耗电量测试</li><li>稳定性测试</li><li>APP安装和启动耗时</li></ul><p>通常的评判方法是与业内竞品做对比。</p><h2 id="兼容性测试" tabindex="-1">兼容性测试 <a class="header-anchor" href="#兼容性测试" aria-label="Permalink to &quot;兼容性测试&quot;">​</a></h2><p>不同型号的手机支持的图片格式、声音格式、动画格式不一样，需要选择尽可能通用的格式，或 者针对不同的型号进行配置选择，所以需要注意：</p><ol><li>手机分辨率，如主流分辨率<code>1080*1920</code>、<code>720*1080</code>、<code>480*720</code>及非主流分辨率，尤其注意pad</li><li>手机系统版本，如<code>Android10</code>、<code>Android12</code>、<code>Android N</code>等；</li><li>不同手机厂商，如MIUI、魅族等，注意Google的Android原生系统；</li><li>不同屏幕尺寸，小（2～3英寸），普通（4英寸左右），大（5～7英寸），超大（7英寸以上）</li></ol><h2 id="冲突测试" tabindex="-1">冲突测试 <a class="header-anchor" href="#冲突测试" aria-label="Permalink to &quot;冲突测试&quot;">​</a></h2><p>冲突测试，就是把软件在各种安全软件环境下进行使用，检查是否会有报病毒木马、威胁等任何对被测软件不利的情况，这里的冲突测试专指与安全软件的冲突</p><p>因为安全软件可能会让我们的软件出现很多问题，比如app运行出错、阻止App获取一些权限、阻止app读取已经从系统获取了的权限、弹出窗口认为程序有威胁并直接删除等。在以下情况下需要做冲突测试：</p><ol><li>有手机用户本地程序信息的操作</li><li>安装及使用时有通讯录、短信、通话记录、摄像头等权限的申请</li><li>频繁访问网络</li><li>新增插件</li><li>有更改开机启动项</li></ol><h2 id="异常情况测试" tabindex="-1">异常情况测试 <a class="header-anchor" href="#异常情况测试" aria-label="Permalink to &quot;异常情况测试&quot;">​</a></h2><ol><li>弱网环境：App在使用过程中会遇到弱网环境，如在地铁里，导致出现丢包。测试时需要注意</li></ol><ul><li>2G网络</li><li>3G网络</li><li>请求超时</li><li>响应超时</li><li>网络抖动场景模拟</li></ul><ol start="2"><li>手机应用在操作过程中断网、断电、重启</li><li>手机锁屏、解锁</li><li>手机其他应用对App的影响，如推送通知、来电、收发短信、文件下载、听音乐等</li></ol><h2 id="其他测试点" tabindex="-1">其他测试点 <a class="header-anchor" href="#其他测试点" aria-label="Permalink to &quot;其他测试点&quot;">​</a></h2><ol><li>App安装（从渠道商下载安装、通过apk安装）</li><li>App卸载</li><li>App升级（注意跨版本升级）</li><li>覆盖安装（同版本覆盖、高版本覆盖低版本）</li></ol><h2 id="抓包测试目的" tabindex="-1">抓包测试目的 <a class="header-anchor" href="#抓包测试目的" aria-label="Permalink to &quot;抓包测试目的&quot;">​</a></h2><ul><li>查看隐藏字段 - 如收集用户的数据，预防 CRSF 攻击，防网络爬虫</li><li>查看网络信息开展 接口 和 性能 测试</li><li>检查数据加密 - 检查敏感数据在传输过程中是否加密</li><li>确定是数据传递问题还是前端显示的问题</li><li>了解整个系统 - 各个子系统，数据流向</li></ul><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/202302201544916.png" alt=""></p><h2 id="弱网测试-进入地铁-公交-火车站-乘电梯" tabindex="-1">弱网测试(进入地铁，公交，火车站，乘电梯) <a class="header-anchor" href="#弱网测试-进入地铁-公交-火车站-乘电梯" aria-label="Permalink to &quot;弱网测试(进入地铁，公交，火车站，乘电梯)&quot;">​</a></h2><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/202302201555769.png" alt=""></p><p><a href="https://mp.weixin.qq.com/s/IA1Mpq0jNQkOpGd5kWbQJQ" target="_blank" rel="noreferrer">酷家乐专项测试之弱网实战</a></p><h2 id="弱网测试类型" tabindex="-1">弱网测试类型 <a class="header-anchor" href="#弱网测试类型" aria-label="Permalink to &quot;弱网测试类型&quot;">​</a></h2><ul><li>弱网络测试：就是在各种非WIFI的网络环境下进行功能测试，同时模拟高延时和高丢包的异常网络环境进行健壮性测试。 <ul><li>2G/3G/4G/5G网络可以使用电话卡模拟</li><li>其他网络情况(高延时、高丢包)需要借助工具进行模拟</li></ul></li><li>无网络测试：断网测试 - 有无本地存储</li><li>网络切换测试：这部分主要是进行几个不同网络场景的切换，包括 <ul><li>WIFI--&gt;2G/3G/4G/5G--&gt;无网络</li><li>2G/3G/4G/5G--&gt;WIFI</li><li>无网络--&gt;WIFI等</li></ul></li></ul><h2 id="charles-模拟弱网" tabindex="-1">charles 模拟弱网 <a class="header-anchor" href="#charles-模拟弱网" aria-label="Permalink to &quot;charles 模拟弱网&quot;">​</a></h2><p>通过抓包工具，设置延迟，来模拟不同的网络情况，比如使用Fidder,Charles,Facebook开源的atc工具等</p><p>以charles为例，使用步骤如下：</p><ul><li>打开charles</li><li>手机连接代理 <ul><li>通过charles顶部的<code>Help-&gt;Local ip Address</code>，可以快速查看本机ip</li><li>通过顶部栏<code>Proxy-&gt;Proxy Stting</code>，在port一栏中可以查看端口号</li><li>将手机连接的WIFI代理改为手动，然后填入电脑端链接的网络IP和电脑中的端口号</li><li>在Charles看到连接提示，点击allor（确定）即可连接上</li></ul></li><li>选择网络类型 <ul><li>打开顶部栏 <code>Proxy-&gt;Throttle settings</code> 页面</li><li>勾选 <code>Enable Throttling</code>，即可在 <code>Throttle preset</code> 复选框中，也可以手动配置上行，下行带宽。</li><li>还可以点击软件上放的🐢按钮。自动设置弱网环境</li></ul></li></ul>',34),t=[r];function c(d,h,n,p,s,u){return i(),a("div",null,t)}const _=l(o,[["render",c]]);export{m as __pageData,_ as default};
