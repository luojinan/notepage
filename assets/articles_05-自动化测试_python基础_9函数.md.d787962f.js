import{_ as s,o as a,c as n,V as l}from"./chunks/framework.b450deef.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"articles/05-自动化测试/python基础/9函数.md","filePath":"articles/05-自动化测试/python基础/9函数.md"}'),o={name:"articles/05-自动化测试/python基础/9函数.md"},p=l(`<h2 id="函数" tabindex="-1">函数 <a class="header-anchor" href="#函数" aria-label="Permalink to &quot;函数&quot;">​</a></h2><h4 id="递归函数" tabindex="-1">递归函数 <a class="header-anchor" href="#递归函数" aria-label="Permalink to &quot;递归函数&quot;">​</a></h4><ol><li><strong>递归函数概念</strong></li></ol><p>如果在一个函数的函数体内调用了该函数本身，这个函数就称为递归函数 2. <strong>递归函数的组成部分</strong></p><p>递归的调用与递归的终止条件</p><ol start="3"><li><strong>递归的调用过程</strong></li></ol><p>每递归调用一次函数，都会在栈内存分配一个栈帧，每执行完一次函数，都会释放响应的空间</p><ol start="4"><li><strong>递归的优缺点</strong></li></ol><ul><li>优点：占用内存多，效率低</li><li>缺点：思路和代码简单</li></ul><ol start="5"><li><strong>递归函数应用</strong></li></ol><p>使用递归函数计算阶乘</p><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/202305092226002.png" alt=""></p><div class="language-py"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 使用递归函数计算阶乘</span></span>
<span class="line"><span style="color:#C792EA;">def</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fac</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">n</span><span style="color:#89DDFF;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> n </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        res </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> n </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fac</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">n </span><span style="color:#89DDFF;">-</span><span style="color:#82AAFF;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> res</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">print</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">fac</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">6</span><span style="color:#89DDFF;">))</span></span></code></pre></div>`,13),t=[p];function e(r,c,i,y,F,D){return a(),n("div",null,t)}const _=s(o,[["render",e]]);export{C as __pageData,_ as default};
