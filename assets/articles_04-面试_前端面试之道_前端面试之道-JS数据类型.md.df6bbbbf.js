import{_ as s,o as a,c as n,V as l}from"./chunks/framework.b450deef.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"articles/04-面试/前端面试之道/前端面试之道-JS数据类型.md","filePath":"articles/04-面试/前端面试之道/前端面试之道-JS数据类型.md"}'),o={name:"articles/04-面试/前端面试之道/前端面试之道-JS数据类型.md"},e=l(`<h2 id="js数据类型" tabindex="-1">JS数据类型 <a class="header-anchor" href="#js数据类型" aria-label="Permalink to &quot;JS数据类型&quot;">​</a></h2><h3 id="基础-原始-类型" tabindex="-1">基础(原始)类型 <a class="header-anchor" href="#基础-原始-类型" aria-label="Permalink to &quot;基础(原始)类型&quot;">​</a></h3><blockquote><p>js基础(原始)类型有哪几种？</p></blockquote><ul><li>boolean</li><li>number</li><li>string</li><li>null</li><li>undefined</li><li>symbol</li></ul><p>基础类型存储的是值(而非指针内存空间),是没有函数可以调用的 如 <code>1.toString()</code> 报错</p><hr><p>🤔: 有意思的是 <code>&#39;1&#39;.toString()</code>字符串类型有函数调用,<code>(1).toString()</code>正常调用输出<code>&#39;1&#39;</code></p><p>这是因为调用的时候<code>&#39;1&#39;</code>已经不是基础类型，而是<code>String对象类型</code>，<code>(1)</code>同理，不是数字类型</p><hr><p>🤔: 有意思的是 <code>typeof null --&gt; object</code> , 但是<code>null</code>是<strong>基础类型而非对象类型</strong>，这是因为<code>typeof</code> 判断类型根据<code>000</code>开头代表对象, 而<code>null</code>被设置为<code>全0</code>, 这也是JS的悠久BUG</p><hr><h3 id="对象-引用-类型" tabindex="-1">对象(引用)类型 <a class="header-anchor" href="#对象-引用-类型" aria-label="Permalink to &quot;对象(引用)类型&quot;">​</a></h3><blockquote><p>对象类型和基础(原始)类型的不同之处</p></blockquote><p>基础类型存储的是值，对象类型存储的是指针(地址)内存空间</p><p>并且可以 <code>.xx</code> 的形式调用函数</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> []</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a</span></span>
<span class="line"><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>创建一个空数组内存空间，得到指针 <code>#001</code> 赋值给常量a，a赋值给常量b，即a和b都是 <code>#001</code>的指针</p><p>修改数组，也就是a和b指针的内容都发生变化 这也是深浅拷贝出现的原因</p><h3 id="js内存空间" tabindex="-1">JS内存空间 <a class="header-anchor" href="#js内存空间" aria-label="Permalink to &quot;JS内存空间&quot;">​</a></h3><p>这里从最简单的赋值开始理解</p><ul><li>首先浏览器执行JS代码，需要有JS执行的环境（空间）</li><li>其次是执行JS的人</li></ul><p>与👆对应的是 1. 环境：从电脑内存（运行内存,一般为8g）分配出一块内存，即，<code>栈内存Stack</code> 2. 人：<code>栈内存</code>里再分配出一个<code>主流程</code>用来自上而下执行JS</p><blockquote><p>ps: <code>栈内存</code>里有<code>变量存储空间</code>、<code>值存储空间</code>、<code>主线程</code></p></blockquote><p>例如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span></code></pre></div><p>在浏览器执行会发生 1. 创建变量a，放到<code>变量存储空间</code> 2. 创建一个值1，放到<code>值存储空间</code>，（引用类型值不是简单的放到<code>值存储空间</code>） 3. =赋值，使<code>变量存储空间</code>的变量指向相应的<code>值存储空间</code>的值 👆简单来说 1. 执行 <code>‘=‘</code> 左边 2. 执行 <code>‘=‘</code> 右边 3. 执行 <code>‘=‘</code> 赋值</p><p>引用类型值 对应 👆 第2步创建值的时候，需要3个步骤</p><ol><li>在内存中分配出一块新内存，即，<code>堆内存heap</code></li></ol><ul><li>且堆内存有个16进制的地址(指针)，用于给变量指向自己</li></ul><ol start="2"><li>把引用类型值（对象）依次存入堆内存中(键值对形式)</li><li>把<code>值存储空间</code>的值地址(16进制)指向相应的<code>堆内存</code></li></ol><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/20221201205655.png" alt=""></p><p>👆这就是深浅拷贝出现的原因，引用类型值修改了内容 另一个指向它的值也被改变了，从而导致bug</p><h3 id="类型判断" tabindex="-1">类型判断 <a class="header-anchor" href="#类型判断" aria-label="Permalink to &quot;类型判断&quot;">​</a></h3><blockquote><p><code>typeof</code>除了<code>null</code>判断不出真实类型外，还有什么其他问题？而<code>instanceof</code>判断类型的原理是什么？</p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &#39;number&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &#39;string&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">undefined</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &#39;undefined&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &#39;boolean&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// &#39;symbol&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> [] </span><span style="color:#676E95;font-style:italic;">// &#39;object&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &#39;object&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">log </span><span style="color:#676E95;font-style:italic;">// &#39;function&#39;</span></span></code></pre></div><p>基础类型中 <code>typeof</code>只是判断不出 <code>null</code> 引用类型中 只能判断出 <code>object</code> 和 <code>function</code></p><p>TODO: <code>instanceof</code> 原理是根据原型链判断类型的，因此可以知道引用类型的具体类型</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 构造函数</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> Person </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> p1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">p1 </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Person</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 字符串</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> str1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">String</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello world</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">str1 </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span></code></pre></div><p><code>&#39;hello world&#39; instanceof String --&gt; false</code></p><p>基础类型并不能判断出来！！！</p><hr><p>🤔: 原型链也是可以篡改的，当通过<code>[Symbol。hasInstance]</code>修改原型链， <code>instanceof</code> 也不是百分之百可信, 那现在常用的js判断类型工具方法是什么，又是否可信呢？</p><hr><h3 id="类型隐式转化" tabindex="-1">类型隐式转化 <a class="header-anchor" href="#类型隐式转化" aria-label="Permalink to &quot;类型隐式转化&quot;">​</a></h3><h4 id="todo-对象转基础类型" tabindex="-1">TODO: 对象转基础类型 <a class="header-anchor" href="#todo-对象转基础类型" aria-label="Permalink to &quot;TODO: 对象转基础类型&quot;">​</a></h4><p>对象在转换类型的时候，会调用内置的 [[ToPrimitive]] 函数，对于该函数来说，算法逻辑一般来说如下：</p><ul><li>如果已经是原始类型了，那就不需要转换了</li><li>调用 x.valueOf()，如果转换为基础类型，就返回转换的值</li><li>调用 x.toString()，如果转换为基础类型，就返回转换的值</li><li>如果都没有返回原始类型，就会报错</li></ul><p>当然你也可以重写 Symbol.toPrimitive ，该方法在转原始类型时调用优先级最高。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">valueOf</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">toString</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  [Symbol</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">toPrimitive]</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> a </span><span style="color:#676E95;font-style:italic;">// =&gt; 3</span></span></code></pre></div><h4 id="四则运算导致隐式转化" tabindex="-1">四则运算导致隐式转化 <a class="header-anchor" href="#四则运算导致隐式转化" aria-label="Permalink to &quot;四则运算导致隐式转化&quot;">​</a></h4><ul><li>加法：把非数字字符串类型，先转化为数字或字符串，如果其中一方是字符串就会把另一方也转换为字符串 <ul><li><code>true + true --&gt; 2</code> 先转化为数字，再相加，且没有字符串结果为数字2</li><li><code>4+[1,2,3] --&gt; &#39;41,2,3&#39;</code> 数组先<code>toString</code>转化为字符串<code>&#39;1,2,3&#39;</code>,其中一方是字符串，因此另一方数字4转化为字符串后相加</li><li><code>&#39;a&#39; + + &#39;b&#39; --&gt; &#39;aNaN&#39;</code> 先计算后面(TODO: why?)的<code> + &#39;b&#39; --&gt; NaN</code> 类似于 <code>+&#39;1&#39;</code>可以转化字符串，最终<code>&#39;a&#39; + NaN --&gt; &#39;aNaN&#39;</code></li></ul></li><li>减乘除，一方是数字，另一方就会被转为数字 <ul><li><code>4*[] --&gt; 0</code> <code>4*[1,2]--&gt;NaN</code></li></ul></li></ul><h4 id="比较运算导致隐式转化" tabindex="-1">比较运算导致隐式转化 <a class="header-anchor" href="#比较运算导致隐式转化" aria-label="Permalink to &quot;比较运算导致隐式转化&quot;">​</a></h4><ul><li>对象类型 通过 <code>toPrimitive</code> 转换对象(TODO: what?)，通过 <code>valueOf</code> 转换为原始类型再比较值 <ul><li><code>a &gt; -1 --&gt; true</code> 这里我们可以覆盖a对象的<code>valueOf</code>函数 <code>a = { valueOf(){return -2} }</code>，就可以影响到对象比较结果</li></ul></li><li>字符串类型 通过 <code>unicode</code> 字符索引比较</li></ul><h4 id="非全等判断语句导致隐式转化" tabindex="-1">非全等判断语句导致隐式转化 <a class="header-anchor" href="#非全等判断语句导致隐式转化" aria-label="Permalink to &quot;非全等判断语句导致隐式转化&quot;">​</a></h4><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/20221130150234.png" alt=""></p><hr><p>🤔: <code>[] == ![]</code> 的转化过程 TODO:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">[] == ![]</span></span>
<span class="line"><span style="color:#A6ACCD;">[] == false</span></span>
<span class="line"><span style="color:#A6ACCD;">[] == ToNumber(false)</span></span>
<span class="line"><span style="color:#A6ACCD;">[] == 0</span></span>
<span class="line"><span style="color:#A6ACCD;">ToPrimitive([]) == 0</span></span>
<span class="line"><span style="color:#A6ACCD;">&#39;&#39; == 0</span></span>
<span class="line"><span style="color:#A6ACCD;">0 == 0 // -&gt; true</span></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  [Symbol</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">toPrimitive]</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">hint</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">switch</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">hint</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">number</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">123</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">string</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">str</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">default</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">default</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">throw</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Error</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">     </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// [防爬虫标识-沙海听雨]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> obj </span><span style="color:#676E95;font-style:italic;">// 246</span></span>
<span class="line"><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> obj </span><span style="color:#676E95;font-style:italic;">// &#39;3default&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">obj </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">default</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#82AAFF;">String</span><span style="color:#A6ACCD;">(obj) </span><span style="color:#676E95;font-style:italic;">// &#39;str&#39;</span></span></code></pre></div><hr><h4 id="js-中类型转换只有三种情况" tabindex="-1">JS 中类型转换只有三种情况 <a class="header-anchor" href="#js-中类型转换只有三种情况" aria-label="Permalink to &quot;JS 中类型转换只有三种情况&quot;">​</a></h4><ul><li>各种类型转换为布尔值 <ul><li><code>undefined</code> <code>null</code> <code>false</code> <code>NaN</code> <code>&#39;&#39;</code> <code>0</code> <code>-0</code> 转为 <code>false</code></li><li>其他所有值都转为 <code>true</code> ，包括所有对象</li></ul></li><li>各种类型转换为数字</li><li>各种类型转换为字符串</li></ul><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/20221130095726.png" alt=""> 👆 对应各种类型转化为布尔、字符串、数字的结果</p><h3 id="todo-作为小册-并不详细-详细知识后续补充" tabindex="-1">TODO: 作为小册，并不详细，详细知识后续补充！ <a class="header-anchor" href="#todo-作为小册-并不详细-详细知识后续补充" aria-label="Permalink to &quot;TODO: 作为小册，并不详细，详细知识后续补充！&quot;">​</a></h3>`,64),p=[e];function c(t,r,i,y,D,d){return a(),n("div",null,p)}const A=s(o,[["render",c]]);export{C as __pageData,A as default};
