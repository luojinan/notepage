import{_ as s,o as a,c as n,V as l}from"./chunks/framework.b450deef.js";const A=JSON.parse('{"title":"create-vue脚手架","description":"","frontmatter":{},"headers":[],"relativePath":"articles/02-框架/vue/create-vue脚手架.md","filePath":"articles/02-框架/vue/create-vue脚手架.md"}'),p={name:"articles/02-框架/vue/create-vue脚手架.md"},o=l(`<h1 id="create-vue脚手架" tabindex="-1">create-vue脚手架 <a class="header-anchor" href="#create-vue脚手架" aria-label="Permalink to &quot;create-vue脚手架&quot;">​</a></h1><blockquote><p>参考文章<a href="https://juejin.cn/post/7018344866811740173" target="_blank" rel="noreferrer">Vue 团队公开快如闪电的全新脚手架工具 create-vue，未来将替代 Vue-CLI，才300余行代码</a></p></blockquote><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">init</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">vue@next</span></span></code></pre></div><p>在习惯里，npm的脚手架依赖库工具都是通过全局安装依赖后，使用该库的指令进行搭建</p><p>如👇 vue-cli脚手架</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">i</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-g</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">@vue/cli</span></span>
<span class="line"><span style="color:#FFCB6B;">vue</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">create</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">hello-world</span></span></code></pre></div><p>而<code>npm init</code>则是给项目路径初始化出<code>package.json</code>文件，初始化项目目录的指令</p><p>为什么<code>npm init vue@next</code> 就可以安装脚手架依赖并运行脚手架搭建指令呢？</p><p>注意这里的<code>npm init xx</code> 不是安装依赖的指令<code>npm i xx</code> = <code>npm install xx</code></p><p>npm init 用法：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">init</span><span style="color:#A6ACCD;"> [--force</span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">-f</span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">--yes</span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">-y</span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">--scope]</span></span>
<span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">init</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">@scop</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> (same </span><span style="color:#C3E88D;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#FFCB6B;">npx</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">@scope</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;">/create</span><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">init</span><span style="color:#A6ACCD;"> [&lt;@scope&gt;/]</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">same</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#FFCB6B;">npx</span><span style="color:#C3E88D;"> [&lt;@scope&gt;/]create-</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&gt;\`</span><span style="color:#89DDFF;">)</span></span></code></pre></div><ul><li>npm init xxx -&gt; npx create-xxx</li><li>npm init @xxx -&gt; npx @xxx/create</li><li>npm init @xxx/foo -&gt; npx @xxx/create-foo</li></ul><p>👆 @xx为命名空间，相当于一个依赖库的集合名称，而这些参数都会按照一定规则补充<code>create</code>名称</p><p>再来看这行指令<code>npm init vue@next</code>，需要注意到是依赖名后加<code>@xx</code>不是命名空间，而是指定版本 所以忽视安装依赖的版本则简化为 <code>npm init vue</code> 转化为<code>npx create-vue</code></p><p>而<a href="http://nodejs.cn/learn/the-npx-nodejs-package-runner" target="_blank" rel="noreferrer">npx指令</a>，不仅能直接运行<code>node_modules</code>中的库，还能不把依赖安装到本地来运行指令(估计是安装到了本地缓存，运行完自动清除那种) 如下官方示例</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cowsay</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">你好</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><p>运行结果为</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">_______</span></span>
<span class="line"><span style="color:#A6ACCD;">&lt; 你好 &gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"> -------</span></span>
<span class="line"><span style="color:#A6ACCD;">        \\   ^__^</span></span>
<span class="line"><span style="color:#A6ACCD;">         \\  (oo)\\_______</span></span>
<span class="line"><span style="color:#A6ACCD;">            (__)\\       )\\/\\</span></span>
<span class="line"><span style="color:#A6ACCD;">                ||----w |</span></span>
<span class="line"><span style="color:#A6ACCD;">                ||     ||</span></span></code></pre></div><p>这是<code>npx</code>安装<code>cowsay</code>的库并运行后的结果</p><p>到这里我们知道了<code>npm init vue@next</code> 就是本地执行<code>npx create-vue</code> 本地安装<code>create-vue</code>的脚手架库(不安装到本地而是安装到缓存并运行完清除),并运行的运行搭建指令</p><blockquote><p>另外，npx的这个不安装到本地的特性其实也可以用到vue-cli的脚手架框架</p><p>即 <code>npx @vue/cli create demoName</code></p><p>所以到这里并不能体现新的脚手架有多值得替换<code>npx create-vue</code></p></blockquote><h2 id="create-vue真正强大的地方在于他创建项目的速度" tabindex="-1">create-vue真正强大的地方在于他创建项目的速度 <a class="header-anchor" href="#create-vue真正强大的地方在于他创建项目的速度" aria-label="Permalink to &quot;create-vue真正强大的地方在于他创建项目的速度&quot;">​</a></h2><blockquote><p>快的原因，主要在于依赖少（能不依赖包就不依赖），源码行数少，目前index.js只有300余行。</p></blockquote><blockquote><p>帮助创建项目的工具，都是下载项目模版和安装项目所需的依赖而已，这能怎么提升速度呢？</p></blockquote><h2 id="实现步骤分析" tabindex="-1">实现步骤分析 <a class="header-anchor" href="#实现步骤分析" aria-label="Permalink to &quot;实现步骤分析&quot;">​</a></h2><p>以上只是简化了安装脚手架依赖的初始化步骤 开始询问式配置并创建项目文件夹和文件才是重点</p><ol><li>问答式输入配置</li><li>解析配置成数据结构</li><li>根据配置进行相应内置的插件初始化文件</li></ol><p>以上是主流程，同时提供</p><ol><li>解析指令式配置，跳过问答</li><li>检测同名项目文件夹，提示覆盖</li><li>ts需要修改所有js文件的后缀成ts</li><li>代码生成readme文件内容</li></ol><h3 id="一、初始化项目" tabindex="-1">一、初始化项目 <a class="header-anchor" href="#一、初始化项目" aria-label="Permalink to &quot;一、初始化项目&quot;">​</a></h3><p>新建文件夹，运行指令</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">init</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-y</span></span></code></pre></div><p>在<code>package.json</code>中添加配置</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>👆从nodejs13开始,配置后(默认type为<code>commonjs</code>)内置ES Module模块化规范(以前只支持Commonjs)</p><blockquote><p>ES Module和Commonjs的区别，请看这里</p></blockquote><p><code>package.json</code>配置运行脚本</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">script</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">dev</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">node index.js</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="二、实现问答式配置" tabindex="-1">二、实现问答式配置 <a class="header-anchor" href="#二、实现问答式配置" aria-label="Permalink to &quot;二、实现问答式配置&quot;">​</a></h3><p>问答配置主要依赖于<a href="https://github.com/terkelg/prompts#readme" target="_blank" rel="noreferrer">prompts库</a><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/prompts%E4%BB%8B%E7%BB%8D.jpg" alt=""></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> qaList </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">projectName</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 生成数据的keyName</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">message</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Project name:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 问答的问题</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">initial</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">defualtVal</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 初始值</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">onState</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">state</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> (targetDir </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">String</span><span style="color:#A6ACCD;">(state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">trim</span><span style="color:#A6ACCD;">())</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">init</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">prompts</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">qaList</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// { projectName: &#39;输入的值&#39; }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">init</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="三、兼容指令配置-跳过问答" tabindex="-1">三、兼容指令配置,跳过问答 <a class="header-anchor" href="#三、兼容指令配置-跳过问答" aria-label="Permalink to &quot;三、兼容指令配置,跳过问答&quot;">​</a></h3><h2 id="项目名重复-询问覆盖" tabindex="-1">项目名重复,询问覆盖 <a class="header-anchor" href="#项目名重复-询问覆盖" aria-label="Permalink to &quot;项目名重复,询问覆盖&quot;">​</a></h2><h2 id="根据问答数据生成模版文件" tabindex="-1">根据问答数据生成模版文件 <a class="header-anchor" href="#根据问答数据生成模版文件" aria-label="Permalink to &quot;根据问答数据生成模版文件&quot;">​</a></h2><h2 id="替换js模版成ts" tabindex="-1">替换js模版成ts <a class="header-anchor" href="#替换js模版成ts" aria-label="Permalink to &quot;替换js模版成ts&quot;">​</a></h2><blockquote><p>只用换文件后缀就可以了吗</p></blockquote><h2 id="从0编写生成readme文件" tabindex="-1">从0编写生成readme文件 <a class="header-anchor" href="#从0编写生成readme文件" aria-label="Permalink to &quot;从0编写生成readme文件&quot;">​</a></h2><hr><h2 id="git-clone项目把提交记录也保留下来" tabindex="-1">git clone项目把提交记录也保留下来 <a class="header-anchor" href="#git-clone项目把提交记录也保留下来" aria-label="Permalink to &quot;git clone项目把提交记录也保留下来&quot;">​</a></h2><p>在 github 上新建一个仓库 <code>create-vue-analysis</code> 克隆下来</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clone</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://github.com/lxchuan12/create-vue-analysis.git</span></span>
<span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">create-vue-analysis</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">subtree</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--prefix=create-vue</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://github.com/vuejs/create-vue.git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">main</span></span></code></pre></div><p>这样就把 create-vue 文件夹克隆到自己的 git 仓库了。且保留的 git 记录 复制代码 关于更多 git subtree，可以看<a href="https://segmentfault.com/a/1190000003969060" target="_blank" rel="noreferrer">Git Subtree</a> 简明使用手册</p><h2 id="减少了删除文件夹依赖rimraf" tabindex="-1">减少了删除文件夹依赖<code>rimraf</code> <a class="header-anchor" href="#减少了删除文件夹依赖rimraf" aria-label="Permalink to &quot;减少了删除文件夹依赖\`rimraf\`&quot;">​</a></h2><p>自己实现一个利用多叉树深搜中的后序遍历，先删除子文件和子文件夹，才能保证当前文件夹为空，才能直接用<code>fs.rmdirSync</code>来删除文件夹 <code>多叉树深搜中的后序遍历</code>，看下面的代码也就普通的递归而已...这么高级的算法名字</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">postOrderDirectoryTraverse</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">dir</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">dirCallback</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">fileCallback</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">filename</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">of</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readdirSync</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">dir</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fullpath</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">dir</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">filename</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 如果是文件夹，递归</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">lstatSync</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">fullpath</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isDirectory</span><span style="color:#F07178;">()) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">postOrderDirectoryTraverse</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">fullpath</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">dirCallback</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fileCallback</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 子文件和子文件夹都处理好了再来用 dirCallback 处理这个文件夹</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">dirCallback</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">fullpath</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">continue</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 如果是文件，直接用 fileCallback 处理</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">fileCallback</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">fullpath</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">emptyDir</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">dir</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 传入文件夹回调和文件回调</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">postOrderDirectoryTraverse</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">dir</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">dir</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">rmdirSync</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">dir</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">file</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">unlinkSync</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">file</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  )</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>这个提升的速度不大吧...除此之外好像没有别的提升速度的地方了吧</p>`,56),e=[o];function t(c,r,y,i,D,F){return a(),n("div",null,e)}const d=s(p,[["render",t]]);export{A as __pageData,d as default};
