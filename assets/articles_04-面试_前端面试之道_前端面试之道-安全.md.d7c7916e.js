import{_ as s,o as l,c as a,V as o}from"./chunks/framework.b450deef.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"articles/04-面试/前端面试之道/前端面试之道-安全.md","filePath":"articles/04-面试/前端面试之道/前端面试之道-安全.md"}'),n={name:"articles/04-面试/前端面试之道/前端面试之道-安全.md"},e=o(`<h3 id="cookie-和-token" tabindex="-1">cookie 和 token <a class="header-anchor" href="#cookie-和-token" aria-label="Permalink to &quot;cookie  和 token&quot;">​</a></h3><blockquote><p>cookie：登陆后后端生成一个sessionid放在cookie中返回给客户端，并且服务端一直记录着这个sessionid，客户端以后每次请求都会带上这个sessionid，服务端通过这个sessionid来验证身份之类的操作。所以别人拿到了cookie拿到了sessionid后，就可以完全替代你。</p></blockquote><blockquote><p>token：登陆后后端不返回一个token给客户端，客户端将这个token存储起来，然后每次客户端请求都需要开发者手动将token放在header中带过去，服务端每次只需要对这个token进行验证就能使用token中的信息来进行下一步操作了。</p></blockquote><blockquote><p>xss：用户通过各种方式将恶意代码注入到其他用户的页面中。就可以通过脚本获取信息，发起请求，之类的操作。</p></blockquote><blockquote><p>csrf：跨站请求攻击，简单地说，是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己曾经认证过的网站并运行一些操作（如发邮件，发消息，甚至财产操作如转账和购买商品）。由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去运行。这利用了web中用户身份验证的一个漏洞：简单的身份验证只能保证请求发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的。csrf并不能够拿到用户的任何信息，它只是欺骗用户浏览器，让其以用户的名义进行操作。</p></blockquote><p>csrf例子：假如一家银行用以运行转账操作的URL地址如下： <code>http://www.examplebank.com/withdraw?account=AccoutName&amp;amount=1000&amp;for=PayeeName</code> 那么，一个恶意攻击者可以在另一个网站上放置如下代码： <code>&lt;img src=&quot;&lt;http://www.examplebank.com/withdraw?account=Alice&amp;amount=1000&amp;for=Badman&gt;&quot;&gt;</code> 如果有账户名为Alice的用户访问了恶意站点，而她之前刚访问过银行不久，登录信息尚未过期，那么她就会损失1000资金。</p><p>上面的两种攻击方式，如果被xss攻击了，不管是token还是cookie，都能被拿到，所以对于xss攻击来说，cookie和token没有什么区别。但是对于csrf来说就有区别了。</p><p>以上面的csrf攻击为例：</p><ul><li>cookie：用户点击了链接，cookie未失效，导致发起请求后后端以为是用户正常操作，于是进行扣款操作。</li><li>token：用户点击链接，由于浏览器不会自动带上token，所以即使发了请求，后端的token验证不会通过，所以不会进行扣款操作。 这是个人理解的为什么只劫持cookie不劫持token的原因。</li></ul><h3 id="xss" tabindex="-1">XSS <a class="header-anchor" href="#xss" aria-label="Permalink to &quot;XSS&quot;">​</a></h3><blockquote><p>面试题：什么是 XSS 攻击？如何防范 XSS 攻击？什么是 CSP？</p></blockquote><p>XSS: 攻击者想尽一切办法将可以执行的代码注入到网页中</p><p>XSS 分为</p><ul><li>持久型: 攻击的代码被服务端写入进数据库中 <ul><li>危害性很大，因为如果网站访问量很大的话，就会导致大量正常访问页面的用户都受到攻击</li><li>如输入框存入数据库的内容</li></ul></li><li>非持久型 <ul><li>URL 参数中加入攻击代码</li><li>前端后端读取URL参数，进行执行 <code>http://www.domain.com?name=&lt;script&gt;alert(1)&lt;/script&gt;</code></li></ul></li></ul><p>解决办法</p><ul><li>转义输入的字符，对引号、尖括号、斜杠进行转义 <ul><li><code>&lt;script&gt;alert(1)&lt;/script&gt;</code> -&gt; <code>&amp;lt;script&amp;gt;alert(1)&amp;lt;&amp;#x2F;script&amp;gt;</code></li><li></li></ul></li></ul><h3 id="csp" tabindex="-1">CSP <a class="header-anchor" href="#csp" aria-label="Permalink to &quot;CSP&quot;">​</a></h3><p><a href="https://developer.mozilla.org/zh-CN/docs/web/http/csp" target="_blank" rel="noreferrer">内容安全策略 ( CSP ) -MDN</a></p><p>本质上就是建立白名单，开发者明确告诉浏览器哪些外部资源可以加载和执行。我们只需要配置规则，如何拦截是由浏览器自己实现的。我们可以通过这种方式来尽量减少 XSS 攻击</p><p>通过两种方式来开启 CSP：</p><ul><li>设置 <code>HTTP Header</code> 中的 <code>Content-Security-Policy</code><ul><li>只允许加载本站资源 <code>Content-Security-Policy: default-src ‘self’</code></li><li>只允许加载HTTPS 协议图片 <code>Content-Security-Policy: img-src https://*</code></li><li>只允许加载任何来源框架 <code>Content-Security-Policy: child-src &#39;none&#39;</code></li></ul></li><li>设置 <code>meta 标签</code>的方式 <code>&lt;meta http-equiv=&quot;Content-Security-Policy&quot;&gt;</code></li></ul><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/20221212121922.png" alt=""></p><h3 id="csrf" tabindex="-1">CSRF <a class="header-anchor" href="#csrf" aria-label="Permalink to &quot;CSRF&quot;">​</a></h3><blockquote><p>面试题：什么是 CSRF 攻击？如何防范 CSRF 攻击？</p></blockquote><p>CSRF: 跨站请求伪造，攻击者构造出一个后端请求地址，诱导用户点击或者通过某些途径自动发起请求。如果用户是在登录状态下的话，后端就以为是用户在操作，从而进行相应的逻辑。</p><p>防范 CSRF 攻击可以遵循以下几种规则：</p><ul><li>Get 请求不对数据进行修改</li><li>不让第三方网站访问到用户 Cookie <ul><li>Cookie 设置 SameSite 属性。该属性表示 Cookie 不随着跨域请求发送，可以很大程度减少 CSRF 的攻击，但是该属性目前并不是所有浏览器都兼容。</li></ul></li><li>阻止第三方网站请求接口 <ul><li>通过验证 Referer 来判断该请求是否为第三方网站发起的</li></ul></li><li>请求时附带验证信息，比如验证码或者 Token <ul><li>服务器下发一个随机 Token，每次发起请求时将 Token 携带上，服务器验证 Token 是否有效。</li></ul></li></ul><p><a href="https://tech.meituan.com/2018/10/11/fe-security-csrf.html" target="_blank" rel="noreferrer">如何防止CSRF攻击？</a></p><h3 id="点击劫持" tabindex="-1">点击劫持 <a class="header-anchor" href="#点击劫持" aria-label="Permalink to &quot;点击劫持&quot;">​</a></h3><blockquote><p>面试题：什么是点击劫持？如何防范点击劫持？</p></blockquote><p>点击劫持是一种视觉欺骗的攻击手段。 攻击者将需要攻击的网站通过 iframe 嵌套的方式嵌入自己的网页中，并将 iframe 设置为透明，在页面中透出一个按钮诱导用户点击。</p><p>解决办法</p><ul><li>HTTP 响应头 <code>X-FRAME-OPTIONS</code><ul><li>在现代浏览器有一个很好的支持。这个 HTTP 响应头 就是为了防御用 iframe 嵌套的点击劫持攻击</li><li>该响应头有三个值可选，分别是</li><li>DENY，表示页面不允许通过 iframe 的方式展示</li><li>SAMEORIGIN，表示页面可以在相同域名下通过 iframe 的方式展示</li><li>ALLOW-FROM，表示页面可以在指定来源的 iframe 中展示</li></ul></li><li>JS防御 禁止iframe访问网页 <ul><li>当通过 iframe 的方式加载我们的页面html，攻击者的网页直接不显示所有内容了</li></ul></li></ul><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">click-jack</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">html</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#B2CCD6;">display</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> none </span><span style="color:#F78C6C;">!important</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (self </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> top) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 是顶层时移除display none的设置</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">style</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click-jack</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeChild</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">style</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">top</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">location</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">location</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h3 id="中间人攻击" tabindex="-1">中间人攻击 <a class="header-anchor" href="#中间人攻击" aria-label="Permalink to &quot;中间人攻击&quot;">​</a></h3><blockquote><p>面试题：什么是中间人攻击？如何防范中间人攻击？</p></blockquote><p>中间人攻击: 攻击方同时与服务端和客户端建立起了连接，并让对方认为连接是安全的，但是实际上整个通信过程都被攻击者控制了。攻击者不仅能获得双方的通信信息，还能修改通信信息。</p><p>解决办法</p><ul><li>不建议使用公共的 Wi-Fi，因为很可能就会发生中间人攻击的情况。如果你在通信的过程中涉及到了某些敏感信息，就完全暴露给攻击方了</li><li>增加一个<a href="./../../01-深度学习/http/https.html">安全通道来传输信息https</a><ul><li>HTTPS 就可以用来防御中间人攻击，但是并不是说使用了 HTTPS 就可以高枕无忧了</li><li>如果你没有完全关闭 HTTP 访问的话，攻击方可以通过某些方式将 HTTPS 降级为 HTTP 从而实现中间人攻击。</li></ul></li></ul>`,39),t=[e];function p(c,i,r,F,y,D){return l(),a("div",null,t)}const C=s(n,[["render",p]]);export{d as __pageData,C as default};
