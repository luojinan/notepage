import{_ as s,o as a,c as l,V as n}from"./chunks/framework.b450deef.js";const A=JSON.parse('{"title":"TS 模块化","description":"","frontmatter":{},"headers":[],"relativePath":"articles/01-深度学习/typescript/TS模块化.md","filePath":"articles/01-深度学习/typescript/TS模块化.md"}'),o={name:"articles/01-深度学习/typescript/TS模块化.md"},p=n(`<h1 id="ts-模块化" tabindex="-1">TS 模块化 <a class="header-anchor" href="#ts-模块化" aria-label="Permalink to &quot;TS 模块化&quot;">​</a></h1><p>TS 也是有模块的概念的：👇</p><ul><li>处理 业务代码 的模块</li><li>处理 类型 的模块</li></ul><p>业务代码的模块 👇</p><blockquote><p>也就是我们常指的 <code>JS</code> 引用 <code>非JS文件</code> 如：<code>CSS</code>、<code>SVG</code></p><p><code>原生JS</code> 是不支持直接引用这些文件的，<code>CSS</code>、<code>SVG</code> 正确的使用方式是在 <code>HTML</code> 中通过特定的 <code>标签</code> 来引用</p><p>同理在 <code>TS</code> 中，也没有默认处理这些 <code>非JS/TS文件</code>，而是需要手动处理</p></blockquote><p>类型的模块化 👇</p><blockquote><p>模块化的好处，我们不赘述。至少可以很好的复用 <code>类型或配置</code>，减少重复代码</p><p><code>TS类型</code> 可以混在业务代码中，并被 <code>import type</code> ，但是有注意事项</p><p>TS 的 <code>JSON配置</code> 也支持模块化引用</p></blockquote><h2 id="非ts文件-模块-支持" tabindex="-1">非TS文件(模块)支持 <a class="header-anchor" href="#非ts文件-模块-支持" aria-label="Permalink to &quot;非TS文件(模块)支持&quot;">​</a></h2><blockquote><p>TS模块化 识别 <code>非TS/JS文件</code></p></blockquote><p>TS 文件引入其他文件模块 如👇 css</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> foo </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./some/file.css</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><p>使用 <code>.d.ts</code> 库声明文件</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">module</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">*.css</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p><code>declare module</code> 声明语法</p><p>一般是创建 <code>env.d.ts</code></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">module</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">*.css</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">module</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">*.less</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">module</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">*.scss</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">module</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">*.sass</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">module</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">*.svg</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">module</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">*.png</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">module</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">*.jpg</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">module</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">*.jpeg</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">module</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">*.gif</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">module</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">*.json</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><p>👆 当然每次创建项目都手动写这段配置也麻烦，一般会封装📦起来复用</p><p>下面的 TS类型模块化 中讲解</p><h2 id="忽略第三方依赖类型报错" tabindex="-1">忽略第三方依赖类型报错 <a class="header-anchor" href="#忽略第三方依赖类型报错" aria-label="Permalink to &quot;忽略第三方依赖类型报错&quot;">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">module</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@zz/fetch</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">module</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@zz-yy/utils</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><h2 id="重写第三方依赖的类型声明" tabindex="-1">重写第三方依赖的类型声明 <a class="header-anchor" href="#重写第三方依赖的类型声明" aria-label="Permalink to &quot;重写第三方依赖的类型声明&quot;">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">module</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// ✨ 声明的是 module 类型</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// some variable declarations</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">bar</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>👆 当然一般不需要重写，安装对应的 @type 包即可，甚至不用配置，ts 解析器会默认查找 <code>node_modules/@types</code> 目录 (可以自定义)</p><h2 id="纯类型内容时的ts模块化" tabindex="-1">纯类型内容时的TS模块化 <a class="header-anchor" href="#纯类型内容时的ts模块化" aria-label="Permalink to &quot;纯类型内容时的TS模块化&quot;">​</a></h2><p>在 ts 中默认不同文件也会共享 <code>类型空间</code> 和 <code>变量空间</code>, 不会因为不同文件而属于被模块化</p><p>如👇 跨文件共享了变量</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// a.ts</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// b.js</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a</span></span></code></pre></div><p>ts 模块化需要手动编写，只要有 <code>import/export</code> 语法就会自动模块化如👇</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// a.ts</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &lt;-- 加上 export 后不再共享 a.ts 文件的内容</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// b.ts</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./a.ts</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &lt;-- 因为 a.ts 模块化了，因此需要引入使用，同理加上 import 后 b.ts 文件内容也不再共享</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a</span></span></code></pre></div><p>因此当我们确实编写一个不需要导入导出的 ts 时，可以这么做👇</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ... write your ts code</span></span></code></pre></div><h2 id="tsconifg-配置引入-继承-方式" tabindex="-1">tsConifg 配置引入(继承)方式 <a class="header-anchor" href="#tsconifg-配置引入-继承-方式" aria-label="Permalink to &quot;tsConifg 配置引入(继承)方式&quot;">​</a></h2><p>在 <code>vite</code> 中是</p><ul><li><code>.d.ts</code> 的引用语句是 <code>/// &lt;reference types=&quot;vite/client&quot; /&gt;</code></li><li><code>tsconfig.json</code> 的引用语句是 <code>&quot;extends&quot;: &quot;@vue/tsconfig/tsconfig.web.json&quot;</code></li></ul><p>注意 <code>tsconfig.json</code> 的 <code>references</code>字段 并不是引用语句，而是区分环境的语句 单独再生效一份 <code>tsconfig</code> 的功能</p>`,35),e=[p];function t(c,r,y,i,D,C){return a(),l("div",null,e)}const F=s(o,[["render",t]]);export{A as __pageData,F as default};
