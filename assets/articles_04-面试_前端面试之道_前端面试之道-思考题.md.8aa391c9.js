import{_ as l,o as i,c as a,V as e}from"./chunks/framework.b450deef.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"articles/04-面试/前端面试之道/前端面试之道-思考题.md","filePath":"articles/04-面试/前端面试之道/前端面试之道-思考题.md"}'),t={name:"articles/04-面试/前端面试之道/前端面试之道-思考题.md"},o=e('<h3 id="js-分为哪两大类型-都有什么各自的特点-你该如何判断正确的类型" tabindex="-1">JS 分为哪两大类型？都有什么各自的特点？你该如何判断正确的类型？ <a class="header-anchor" href="#js-分为哪两大类型-都有什么各自的特点-你该如何判断正确的类型" aria-label="Permalink to &quot;JS 分为哪两大类型？都有什么各自的特点？你该如何判断正确的类型？&quot;">​</a></h3><ul><li>基础类型，null 和 number 存在的一些问题</li><li>对象类型，从垃圾回收的角度去切入，也可以说一下对象类型存在深浅拷贝的问题</li><li>判断类型，对比一下 typeof 和 instanceof 之间的区别 <ul><li>也可以指出 instanceof 判断类型也不是完全准确的</li></ul></li></ul><h3 id="你理解的原型是什么" tabindex="-1">你理解的原型是什么？ <a class="header-anchor" href="#你理解的原型是什么" aria-label="Permalink to &quot;你理解的原型是什么？&quot;">​</a></h3><ul><li>原型小节中的总结内容</li><li>不是所有函数都有 prototype 属性</li><li>引申出原型链的概念</li><li>提出如何使用原型实现继承</li><li>继而可以引申出 ES6 中的 class 实现继承</li></ul><h3 id="bind、call-和-apply-各自有什么区别" tabindex="-1">bind、call 和 apply 各自有什么区别？ <a class="header-anchor" href="#bind、call-和-apply-各自有什么区别" aria-label="Permalink to &quot;bind、call 和 apply 各自有什么区别？&quot;">​</a></h3><ul><li>三者的不同</li><li>说出手写的思路</li><li>几种规则判断 this 到底是什么</li><li>this 规则会涉及到 new</li><li>最后可以说下自己对于 new 的理解</li></ul><h3 id="es6-中有使用过什么" tabindex="-1">ES6 中有使用过什么？ <a class="header-anchor" href="#es6-中有使用过什么" aria-label="Permalink to &quot;ES6 中有使用过什么？&quot;">​</a></h3><ul><li>class，那么 class 又可以拉回到原型的问题</li><li>promise，那么线就被拉到了异步的内容</li><li>proxy，那么如果你使用过 Vue 这个框架，就可以谈谈响应式原理的内容</li><li>let 这些声明变量的语法，那么就可以谈及与 var 的不同，说到提升这块的内容</li></ul><h3 id="js-是如何运行的" tabindex="-1">JS 是如何运行的？ <a class="header-anchor" href="#js-是如何运行的" aria-label="Permalink to &quot;JS 是如何运行的？&quot;">​</a></h3><ul><li>可以先说 JS 是单线程运行的，这里就可以说说你理解的线程和进程的区别</li><li>然后讲到执行栈</li><li>接下来的内容就是涉及 Eventloop 了，微任务和宏任务的区别，哪些是微任务，哪些又是宏任务</li><li>还可以谈及浏览器和 Node 中的 Eventloop 的不同</li><li>最后还可以聊一聊 JS 中的垃圾回收</li></ul>',10),r=[o];function s(n,c,_,d,h,u){return i(),a("div",null,r)}const m=l(t,[["render",s]]);export{f as __pageData,m as default};
