import{_ as s,o as a,c as l,V as o}from"./chunks/framework.b450deef.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"articles/04-面试/前端面试之道/前端面试之道-数字精度.md","filePath":"articles/04-面试/前端面试之道/前端面试之道-数字精度.md"}'),n={name:"articles/04-面试/前端面试之道/前端面试之道-数字精度.md"},p=o(`<blockquote><p>为什么 0.1 + 0.2 != 0.3？如何解决这个问题？</p></blockquote><h3 id="js-数字精度" tabindex="-1">JS 数字精度 <a class="header-anchor" href="#js-数字精度" aria-label="Permalink to &quot;JS 数字精度&quot;">​</a></h3><p>JS 采用 <code>IEEE 754</code> 双精度版本（64位） 只要采用 <code>IEEE 754</code> 的语言都有该问题</p><p>我们都知道计算机是通过二进制来存储东西的，那么 0.1 在二进制中会表示为</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// (0011) 表示循环</span></span>
<span class="line"><span style="color:#F78C6C;">0.1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">^-</span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1.10011</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0011</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>0.1 在二进制中是无限循环的一些数字 很多十进制小数用二进制表示都是无限循环的</p><p><code>IEEE 754</code> 双精度版本（64位）将 64 位分为了三段</p><ul><li>第一位用来表示符号</li><li>接下去的 11 位用来表示指数</li><li>其他的位数用来表示有效位，也就是用二进制表示 0.1 中的 10011(0011)</li></ul><p>这些循环的数字被裁剪了，就会出现精度丢失的问题 也就造成了 0.1 不再是 0.1 了，而是变成了 0.100000000000000002</p><p>简单来说 JS把编写代码的<code>十进制数字</code>编译为<code>计算机语言二进制</code>时存不了无限的值(精确)，而裁剪成了64位的二进制值(不精确)，JS用这些裁剪后的二进制数字进行运算或直接输出都不是计算机语言二进制的真实数字</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">0.100000000000000002</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.1</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span></code></pre></div><p>同样的，0.2 在二进制也是无限循环的，被裁剪后也失去了精度变成了 0.200000000000000002</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">0.200000000000000002</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.2</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span></code></pre></div><p>这两者相加不等于 0.3 而是 0.300000000000000004</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">0.1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.3</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#F78C6C;">0.1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.30000000000000004</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span></code></pre></div><hr><p>🤔 既然 <code>0.1</code> 不是 <code>0.1</code>，那为什么 <code>console.log(0.1)</code> 输出的不是 <code>0.100000000000000002</code></p><p>二进制被转换为了十进制，十进制又被转换为了字符串，在这个转换的过程中发生了取近似值的过程，所以打印出来的其实是一个近似值</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0.1</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 0.1</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0.10000000000000002</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 0.10000000000000002</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0.100000000000000002</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 0.1</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0.1000000000000000091</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 0.1</span></span></code></pre></div><p>😖 取近似值的这个动作，有什么用，还不如输出真实值 因为JS存不起来吗? 而且不报错，所以存了个近似值处理，</p><hr><h3 id="解决js数字精度问题" tabindex="-1">解决JS数字精度问题 <a class="header-anchor" href="#解决js数字精度问题" aria-label="Permalink to &quot;解决JS数字精度问题&quot;">​</a></h3><p><strong>简单的保留一位小数</strong></p><p>解决办法</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">parseFloat</span><span style="color:#A6ACCD;">((</span><span style="color:#F78C6C;">0.1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.2</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toFixed</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">)) </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.3</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span></code></pre></div><p><strong>BigNumber</strong></p><p>TODO:</p>`,27),e=[p];function t(c,r,C,y,i,A){return a(),l("div",null,e)}const d=s(n,[["render",t]]);export{F as __pageData,d as default};
