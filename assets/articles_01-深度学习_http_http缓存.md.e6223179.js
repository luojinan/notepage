import{_ as s,o as a,c as n,V as l}from"./chunks/framework.b450deef.js";const h=JSON.parse('{"title":"http缓存","description":"","frontmatter":{},"headers":[],"relativePath":"articles/01-深度学习/http/http缓存.md","filePath":"articles/01-深度学习/http/http缓存.md"}'),o={name:"articles/01-深度学习/http/http缓存.md"},p=l(`<h1 id="http缓存" tabindex="-1">http缓存 <a class="header-anchor" href="#http缓存" aria-label="Permalink to &quot;http缓存&quot;">​</a></h1><p>关于http缓存的背景以及意义，这里跳过不讲(主要由于http的无状态导致的性能损耗)，直接从http缓存的流程和如何配置讲起 目前正在啃《图解http协议》之后会按照书本的每一章出文章，对于常见的http相关问题会单独讲(挖坑+1)</p><p>先记住几个概念</p><ul><li>强缓存: 浏览器不发起http请求，直接从浏览器缓存中读取资源</li><li>协商缓存：浏览器发起http请求，服务端只返回状态码让浏览器读取缓存</li><li>http1：最早期的http协议</li><li>http1.1：优化缓存策略升级后的http协议</li></ul><h2 id="浏览器http缓存流程" tabindex="-1">浏览器http缓存流程 <a class="header-anchor" href="#浏览器http缓存流程" aria-label="Permalink to &quot;浏览器http缓存流程&quot;">​</a></h2><blockquote><p>这里忽略浏览器一个请求发起的所有过程(DNS解析、TCP、HTTP)</p></blockquote><p>浏览器在客户端，会有一个内存空间用于存储有http缓存相关头的每次有响应的http请求</p><p>在下一次请求发出前，浏览器会到内存空间找到相同url的http请求 如果上一次http请求的响应头中有http缓存相关的字段 将判断是否命中强缓存，如果是则不发起请求，如果不是则把缓存相关的响应头字段处理成相应的请求头字段发出 即</p><ul><li>我们可以把http强缓存过程当成是浏览器发起请求前发生的</li><li>http协商缓存过程当成是服务端响应的时候发生的</li></ul><p>以上仅是浅显的猜测，具体的流程未知</p><h2 id="强缓存" tabindex="-1">强缓存 <a class="header-anchor" href="#强缓存" aria-label="Permalink to &quot;强缓存&quot;">​</a></h2><p>如上的浏览器http缓存流程，http强缓存发生在浏览器发起请求前</p><p>强缓存分为 <code>Disk Cache (存放在硬盘中)</code>和 <code>Memory Cache (存放在内存中)</code>，存放的位置是由浏览器控制的。</p><h3 id="expires" tabindex="-1">Expires <a class="header-anchor" href="#expires" aria-label="Permalink to &quot;Expires&quot;">​</a></h3><p>用于设置静态资源的<code>过期时间</code>。它的值一个<code>GMT格式</code>的时间字符串，比如<code>expires:Fri, 27 Jul 2029 13:38:54 GMT</code>。 这个时间代表着这个资源的失效时间，在此时间之前命中缓存。</p><p>缺点： 浏览器端时间和服务器时间不一致的时候，会有缓存有效期不准的问题(是双方各自的绝对时间)</p><h3 id="cache-control" tabindex="-1">Cache-Control <a class="header-anchor" href="#cache-control" aria-label="Permalink to &quot;Cache-Control&quot;">​</a></h3><blockquote><p>Cache-Control 是 HTTP/1.1 中新增的属性，在请求头和响应头中都可以使用 优先级在<code>Expires</code>之上,即如果有<code>Cache-Control</code>，将无视<code>Expires</code><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control" target="_blank" rel="noreferrer">Cache-Control MDN</a></p></blockquote><p>常用的属性值如有：</p><ul><li>no-store：禁止使用缓存（包括协商缓存），每次都向服务器请求最新的资源</li><li>no-cache：不使用强缓存，需要与服务器验证缓存是否新鲜</li><li>max-age：单位是秒，缓存时间计算的方式是距离发起的时间的秒数，超过间隔的秒数缓存失效。与Expires相反，时间是相对于请求的时间。</li><li>s-max-age：覆盖max-age或者Expires头，但是仅适用于共享缓存(比如各个代理)，私有缓存会忽略它。</li><li>private：专用于个人的缓存，中间代理、CDN 等不能缓存此响应（默认值）</li><li>public：响应可以被中间代理、CDN 等缓存</li><li>must-revalidate：在缓存过期前可以使用，过期后必须向服务器验证</li></ul><p>Cache-Control的<code>max-age</code>是一个相对时间，例如<code>3600</code>，代表着资源的有效期是3600秒一个小时。由于是相对时间，并且都是与客户端时间比较，所以服务器与客户端时间偏差也不会导致问题。</p><p>流程大概可以是： 浏览器发起请求前，到内存中找到了上一次相同url相应的请求，并且上一次响应头中有<code>max-age</code>是3600秒，即一个小时，并且内存中的请求都会有个每次发起http请求都会生成的date，浏览器用当前时间和内存中的请求时间，相减得到的秒数判断是否取内存中的相应结果。</p><p>👆 所以，第三第四次以及之后的请求都是与第一次请求(缓存下来的http)的时间做比较的，并不是与上一次请求做比较</p><blockquote><p>根据http标准，如果请求头不携带任何关于缓存的标记而响应头有缓存相关字段，则缓存时间等于当前时间和 Last-Modified时间的差值的10%，等同于cache-control=max-age=（date - Last-Modified）/ 10，通过fiddler抓包可看到英文原文：No explicit HTTP Cache Lifetime information was provided.Heuristic expiration policies suggest defaulting to: 10% of the delta between Last-Modified and Date.</p></blockquote><p>👆 一般请求都会设置上的，这种属于很极端的情况吧(面试造火箭？)</p><h2 id="协商缓存" tabindex="-1">协商缓存 <a class="header-anchor" href="#协商缓存" aria-label="Permalink to &quot;协商缓存&quot;">​</a></h2><blockquote><p>在浏览器决定不取强缓存时，发起了请求，服务端将根据请求头中http缓存相应字段，做出对应的响应</p></blockquote><h3 id="时间-last-modified-if-modified-since" tabindex="-1">时间 Last-Modified/If-Modified-Since <a class="header-anchor" href="#时间-last-modified-if-modified-since" aria-label="Permalink to &quot;时间 Last-Modified/If-Modified-Since&quot;">​</a></h3><blockquote><p>协商缓存需要服务端配合 浏览器第一次请求一个资源的时候，服务器返回的header中会加上<code>Last-Modify</code>，<code>Last-modify</code>是一个时间标识该资源的最后修改时间，例如<code>last-modified:Fri, 20 Dec 2019 03:34:57 GMT</code>。</p></blockquote><p>第一次响应时，服务端需要在响应头中返回协商缓存相关的字段，浏览器完成第一次请求响应，会缓存相关的协商缓存字段</p><p>流程大概可以是：</p><ul><li>浏览器发起请求前，到内存中找到了上一次相同url相应的请求，决定不走强缓存。将找到内存中的响应头中协商缓存相关的字段<code>Last-Modify</code>，拼接到这次发起的http请求头中<code>If-Modified-Since</code>，开始发起请求。</li><li>服务器接收到请求，检查请求头中的协商缓存相关字段，发现有<code>If-Modified-Since</code>，拿url相应的资源修改时间做比较，发现修改时间是相同的则直接返回304响应码，让浏览器取缓存。否则响应真实资源，并且响应头会带上新的<code>Last-Modify</code></li></ul><p>缺点：</p><ul><li>不同服务器资源的修改时间精度可能不同，存在相同时间资源内容变更的情况。导致服务器判断本次请求返回304（后果严重，用户访问的是错误内容）</li><li>资源内容没有实质变化，但是修改时间更新了，如加了回车或是空格，如服务器资源是全量删除全量更新的。导致服务器判断本次请求返回200真实请求 (实际让浏览器取缓存就可以,性能浪费)</li></ul><h3 id="etag-if-none-match" tabindex="-1">Etag/If-None-Match <a class="header-anchor" href="#etag-if-none-match" aria-label="Permalink to &quot;Etag/If-None-Match&quot;">​</a></h3><blockquote><p>Etag/If-None-Match返回的是一个校验码（ETag: entity tag）。 Etag：服务器响应请求时，告诉浏览器当前资源在服务器的唯一标识（生成规则由服务器定义）。nginx中，etag会默认增加，如果需要关闭，需要在配置文件中设置：etag off;</p></blockquote><p>与👆 <code>时间 Last-Modified/If-Modified-Since</code> 类似，这种协商缓存比对流程相同，并且是互斥的关系，etag的优先级更高(即有etag将无视<code>Last-Modified</code>)</p><p>流程大概可以是：</p><ul><li>浏览器发起请求前，到内存中找到了上一次相同url相应的请求，决定不走强缓存。将找到内存中的响应头中协商缓存相关的字段<code>Etag</code>，拼接到这次发起的http请求头中<code>If-None-Match</code>，开始发起请求。</li><li>服务器接收到请求，检查请求头中的协商缓存相关字段，发现有<code>If-None-Match</code>，拿url相应的资源的唯一标识做比较，发现资源唯一标识是相同的则直接返回304响应码，让浏览器取缓存。否则响应真实资源，并且响应头会带上新的<code>Etag</code></li></ul><p>ETag 有强弱校验之分，如果 hash 码是以 &quot;W/&quot; 开头的一串字符串，说明此时协商缓存的校验是弱校验的，只有服务器上的文件差异（根据 ETag 计算方式来决定）达到能够触发 hash 值后缀变化的时候，才会真正地请求资源</p><h2 id="强缓存和协商缓存的整体流程图" tabindex="-1">强缓存和协商缓存的整体流程图 <a class="header-anchor" href="#强缓存和协商缓存的整体流程图" aria-label="Permalink to &quot;强缓存和协商缓存的整体流程图&quot;">​</a></h2><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/20211226174336.png" alt="http缓存的流程"></p><p>不走强缓存的几种方式</p><h2 id="pragma" tabindex="-1">Pragma <a class="header-anchor" href="#pragma" aria-label="Permalink to &quot;Pragma&quot;">​</a></h2><blockquote><p>Pragma 只有一个属性值，就是 no-cache 注意不是属于Cache-Control下的某种场景，而是和Cache-Control、Expires 同级别的控制参数，</p></blockquote><p>效果和 Cache-Control 中的 no-cache 一致，不使用强缓存，但是会协商缓存，需要与服务器验证缓存是否新鲜，在 3 个头部属性中的优先级最高。</p><h2 id="使用nodejs实操http缓存策略" tabindex="-1">使用nodejs实操http缓存策略 <a class="header-anchor" href="#使用nodejs实操http缓存策略" aria-label="Permalink to &quot;使用nodejs实操http缓存策略&quot;">​</a></h2><h3 id="构建http服务" tabindex="-1">构建http服务 <a class="header-anchor" href="#构建http服务" aria-label="Permalink to &quot;构建http服务&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> http </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> fs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> server </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> http</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createServer</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">request</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">resp</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// resp.writeHead(200, {</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//   &quot;Content-type&quot;: &quot;text/html&quot; // 不返回 浏览器也可以猜测出类型，但是一般都返回</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// });</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">html</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readFileSync</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dist/index.html</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">utf8</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">resp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">end</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">html</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">server</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">listen</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">9080</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Server runing at part: 9080</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>👆 用nodejs起一个服务 <code>localhost:9080</code> 访问这个地址，会读取本地文件中的 <code>dist/index.html</code>，返回回去</p><ul><li><code>fs.readFileSync()</code> 是同步方法，并且不需要await，第二个参数文件类型必须写上<code>utf8</code> 不可省略</li><li><code>nodejs</code>的<code>http服务</code>默认返回<code>状态码200</code>，本次示例可以不设置响应状态</li><li><code>Content-type</code>浏览器也可以根据内容猜测，但是会有猜测性能损耗，实际场景必须带上相应类型，本次示例不设置</li><li>完整http服务还要做好各种常规异常处理,本次示例不设置 <ul><li>启服务器失败</li><li>逻辑异常500</li><li>资源不存在404</li><li>...</li></ul></li></ul><h3 id="设置强缓存expires" tabindex="-1">设置强缓存Expires <a class="header-anchor" href="#设置强缓存expires" aria-label="Permalink to &quot;设置强缓存Expires&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> http </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> fs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> server </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> http</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createServer</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">request</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">resp</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">time</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">time</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setTime</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">time</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getTime</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> (</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;">1000</span><span style="color:#F07178;">)) </span><span style="color:#676E95;font-style:italic;">// 时间戳计算单位是毫秒</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setHeader</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Expires</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">time</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toUTCString</span><span style="color:#F07178;">())</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">html</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readFileSync</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dist/index.html</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">utf8</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">resp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">end</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">html</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">server</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">listen</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">9080</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Server runing at part: 9080</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>👆 设置10秒后的到期时间</p><ul><li>设置到期时间是UTC日期格式，因此使用<code>toUTCString()</code>转化</li><li><code>toUTCString()</code>是日期对象的方法，因此计算时间要用<code>setTime()</code></li><li>日期对象转时间戳计算的单位是毫秒</li></ul><p>浏览器验证发现刷新虽然每次响应头都有<code>Expires</code>,但是每次请求头都会带上<code>Cache-Control: max-age=0</code> 我们上面讲到了<code>cache-control</code>优先级高于<code>expires</code>，所以每次请求都不会走强缓存</p><p>这个请求头的<code>Cache-Control</code>，是浏览器地址栏直接发起get请求默认带上的</p><p>解决办法</p><ul><li>改写成ajax请求访问我们的http服务，而不用浏览器地址栏直接get请求</li><li>浏览器开着一个get请求，再新开一个标签页，提前打开控制台，输入地址再次直接发起get请求。并且新开的标签页也不能刷新测试，只能重复开新的标签页测试，这样可以让浏览器不带上<code>max-age=0</code></li></ul><h3 id="设置强缓存cache-control-max-age" tabindex="-1">设置强缓存<code>Cache-Control: max-age</code> <a class="header-anchor" href="#设置强缓存cache-control-max-age" aria-label="Permalink to &quot;设置强缓存\`Cache-Control: max-age\`&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> http </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> fs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> server </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> http</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createServer</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">request</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">resp</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setHeader</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Cache-Control</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">max-age=10</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">html</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readFileSync</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dist/index.html</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">utf8</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">resp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">end</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">html</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">server</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">listen</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">9080</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Server runing at part: 9080</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>👆 设置10秒后的相对时间到期 同样用新开标签的形式进行验证</p><h3 id="设置协商缓存最后修改日期" tabindex="-1">设置协商缓存最后修改日期 <a class="header-anchor" href="#设置协商缓存最后修改日期" aria-label="Permalink to &quot;设置协商缓存最后修改日期&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> http </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> fs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> server </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> http</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createServer</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">request</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">resp</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">stats</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">statSync</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dist/index.html</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">lastModified</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">stats</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">mtime</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toUTCString</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// resp.setHeader(&#39;Cache-Control&#39;,&#39;max-age=5&#39;)</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 如果要找的资源修改时间等于请求头中的缓存修改时间，则返回304</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">requestModified</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">request</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">headers</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">if-modified-since</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">requestModified</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">requestModified</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">lastModified</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">resp</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">statusCode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">304</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">resp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">end</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">resp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setHeader</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Last-Modified</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">lastModified</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 浏览器请求头会自动带上 if-modified-since</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">html</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readFileSync</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dist/index.html</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">utf8</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">resp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">end</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">html</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">server</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">listen</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">9080</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Server runing at part: 9080</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>协商缓存会发现 状态码设置不生效，但是资源size可以看出来是走了304的</p><p>在html上加外链css尝试，可以看到有304状态生效，但是等一会再刷新，状态变成了200 资源size还是可以走了304 很奇怪，只有状态设置不生效 到safire浏览器尝试，发现可以正常304，这里的原因不明，以后知道了再回来补吧。。。</p><p>不影响我们http缓存测试</p><h3 id="设置协商缓存etag" tabindex="-1">设置协商缓存Etag <a class="header-anchor" href="#设置协商缓存etag" aria-label="Permalink to &quot;设置协商缓存Etag&quot;">​</a></h3><p>可以先用上面代码示例来验证modified的缺点，如上所述，文件内容没有修改，也会重新请求，删除然后新建也会重新请求，精度在1秒内会请求旧的资源</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> http </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> fs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> crypto </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">crypto</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> server </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> http</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createServer</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">request</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">resp</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">resp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setHeader</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Cache-Control</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">max-age=0</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">buffer</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readFileSync</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dist/index.html</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">hash</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">crypto</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createHash</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">md5</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">hash</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">update</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">buffer</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">utf8</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">md5</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">hash</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">digest</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hex</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">requestEtage</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">request</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">headers</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">if-none-match</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">requestEtage</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">requestEtage</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">md5</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">resp</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">statusCode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">304</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">resp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">end</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">resp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setHeader</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">etag</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">md5</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 浏览器请求头会自动带上 if-modified-since</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">html</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readFileSync</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dist/index.html</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">utf8</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">resp</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">end</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">html</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">server</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">listen</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">9080</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Server runing at part: 9080</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>为了保证 lastModified 不影响缓存，把通过 Last-Modified/If-Modified-Since 请求头删除 然后修改 html，增加一个空格后再删除一个空格，保持文件内容不变，但文件的修改时间改变，发起请求，由于生成 ETag 的方式是通过对文件内容进行 MD5 加密生成，所以虽然修改时间变化了，请求返回了 304 ，读取浏览器缓存。</p><p>采用的是对文件进行 MD5 加密来计算其 hash 值。</p><p>注：只是为了演示用，实际计算不是通过 MD5 加密的，Apache 默认通过 FileEtag 中 FileEtag INode Mtime Size 的配置自动生成 ETag，用户可以通过自定义的方式来修改文件生成 ETag 的方式。</p><h2 id="关于资源hash解决的问题" tabindex="-1">关于资源hash解决的问题 <a class="header-anchor" href="#关于资源hash解决的问题" aria-label="Permalink to &quot;关于资源hash解决的问题&quot;">​</a></h2><p>对于img，css，js，fonts等非html资源，我们可以直接考虑max-age配置的时间可以尽可能久，类似于缓存规则案例中，<code>cache-control: max-age=31535000</code>配置365天的缓存 需要注意的是，这样配置并不代表这些资源就一定一年不变，其根本原因在于目前前端构建工具在静态资源中都会加入戳的概念（例如，webpack中的[hash]，gulp中的gulp-rev） 每次修改均会改变文件名或增加query参数，本质上改变了请求的地址，也就不存在缓存更新的问题 每次都是一次新的强缓存</p><h2 id="dns缓存" tabindex="-1">DNS缓存 <a class="header-anchor" href="#dns缓存" aria-label="Permalink to &quot;DNS缓存&quot;">​</a></h2><p>浏览器请求域名</p><ol><li>浏览器从自身的DNS缓存中去查找</li><li>浏览器从本地host文件查找</li><li>浏览器从操作系统里的DNS缓存中查找</li><li>浏览器请求本地域名服务器（例如电信）</li><li>浏览器请求DNS服务器递归查找</li></ol><p>此时获得源服务器IP，以及源服务器根据域名配置的负载均衡服务器CDN策略服务器IP 本地域名服务器将不直接返回源服务器IP，而是去访问CDN服务器，负载均衡后返回的中间服务器(代理服务器IP/CDN服务器？)</p><p>因此浏览器拿到并访问的是中间服务器IP(在浏览器显示的是域名)</p><p>关于域名解析过程(由右往左) <img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/20211224112314.png" alt="关于域名解析过程"></p><h2 id="cdn缓存" tabindex="-1">CDN缓存 <a class="header-anchor" href="#cdn缓存" aria-label="Permalink to &quot;CDN缓存&quot;">​</a></h2><p>上述的http缓存都是客户端自己的缓存，即只有当我访问过一次并缓存才能走缓存</p><p>而CDN则可以做到多个客户端，只要有一个人访问，CDN服务器就可以缓存下来，下次其他人再访问到CDN就直接给你CDN中的缓存</p><p>当然客户端访问CDN，还是一个http请求，只不过比直接访问源服务器要更快</p><p>缓存CDN缓存的建议观看 <a href="https://www.bilibili.com/video/BV1jS4y197zi" target="_blank" rel="noreferrer">什么是CDN？CDN能为我们做什么？我们为什么要了解他？-bilibili</a></p><p>当浏览器向CDN节点请求数据时，CDN节点会判断缓存数据是否过期，若缓存数据并没有过期，则直接将缓存数据返回给客户端；否则，CDN节点就会向服务器发出回源请求，从服务器拉取最新数据，更新本地缓存，并将最新数据返回给客户端。</p><blockquote><p>CDN服务商一般会提供基于文件后缀、目录多个维度来指定CDN缓存时间，为用户提供更精细化的缓存管理</p></blockquote><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/20211229194429.png" alt="腾讯云CDN设置"> 👆腾讯云CDN设置，不仅可以沿用源服务端设置的缓存策略，还可以自定义缓存策略</p><p><strong>当CDN有自定义强缓存时间，并且源服务器更新了资源怎么办?</strong></p><p>如果我们http缓存设置<code>cache-control: max-age=600</code>，即缓存10分钟，但cdn缓存配置中设置文件缓存时间为1小时，那么就会出现如下情况，文件被访问后第12分钟修改并上传到服务器，用户重新访问资源，响应码会是304，对比缓存未修改，资源依然是旧的，一个小时后再次访问才能更新为最新资源</p><p>当我们必须要在缓存期内修改文件，并且不想影响用户体验，那么我们可以使用cdn服务商提供的强制更新缓存功能，主要注意的是，这里的强制更新是更新服务端缓存，http缓存依然按照http头部规则进行自己的缓存处理，并不会受到影响。</p><p><strong>CDN其他应用举例</strong></p><p>除了静态内容，CDN服务器还可以获取动态内容，如服务器时间</p><p>因为客户端访问源服务器(中间链路长可能断连)时间可能不准或是获取不到，就可以让客户端获取CDN的服务器时间，源服务器也以CDN服务器时间为准</p><h2 id="hash" tabindex="-1">hash <a class="header-anchor" href="#hash" aria-label="Permalink to &quot;hash&quot;">​</a></h2><blockquote><p>在讨论理想缓存模型前，我们先看看资源hash的采用形式</p></blockquote><p>在webpack等打包工具中，hash的生成规则分为: <code>hash</code>、<code>contenhash</code>... 我们只考虑最理想的<code>contentHash</code></p><p>浏览器识别资源可以考虑缓存的标识是url，包括url参数</p><h3 id="query-hash" tabindex="-1">query-hash <a class="header-anchor" href="#query-hash" aria-label="Permalink to &quot;query-hash&quot;">​</a></h3><p>那么我们可以利用参数做hash <code>myapp/homePage.js?hash=1234</code> 这样就能通过更新hash来使浏览器从重新发起全新请求(不走协商缓存,会是完全首次请求)</p><p>缺点</p><ul><li>hash的值需要我们自己拼上资源请求,如:html中的srcipt是带参数的、异步js的require带参数</li><li>hash的值简单做法每次打包都是新的hash，会导致没更新的资源也重新请求。或者靠我们自己实现好的hash对应关系，只更新需要更新的hash</li><li>覆盖式部署,因为hash为参数，部署相同资源将是同名资源，上服务器会覆盖旧资源。如果资源要分类上传CDN服务器，会出现上传不同类资源更新先后顺序问题</li></ul><p>优点</p><ul><li>覆盖式部署，不会产生无用的旧资源</li></ul><h3 id="name-hash" tabindex="-1">name-hash <a class="header-anchor" href="#name-hash" aria-label="Permalink to &quot;name-hash&quot;">​</a></h3><p>把hash直接作为文件名 <code>myapp/homePage.1234.js</code> 减少我们自己实现hash和文件对应关系的工作量，我们只需要把contenthash输出到文件名，就可以做到精确的文件是否更新标识</p><p>优点</p><ul><li>可以精确每个文件内容是否修改过的标识</li><li>如果资源分类上传CDN服务器，因为旧资源新资源会并存，所以先把被依赖被请求的资源上传，再上传入口资源就可以避免出现问题</li></ul><p>缺点</p><ul><li>随着时间推移，相同资源文件会留存很多份旧的，并且不好随便删除，需要制订好清除规则</li></ul><h3 id="解决问题" tabindex="-1">解决问题 <a class="header-anchor" href="#解决问题" aria-label="Permalink to &quot;解决问题&quot;">​</a></h3><blockquote><p>我们尝试不考虑复杂度，对上述两种方案做出合适的解决方案</p></blockquote><ol><li><p>query-hash hash和文件的对应关系</p></li><li><p>CDN+覆盖式部署</p></li><li><p>name-hash，清除旧资源机制</p></li></ol><h2 id="理想缓存策略" tabindex="-1">理想缓存策略 <a class="header-anchor" href="#理想缓存策略" aria-label="Permalink to &quot;理想缓存策略&quot;">​</a></h2><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/20211229174408.png" alt="理想缓存策略"></p><p>理想缓存策略，将资源简单的分为两种</p><ul><li>带hash/版本号的资源(html、css、js、图片、字体等)</li><li>不带hash/版本号的资源(html、css、js、图片、字体等)</li></ul><p>带hash的资源，相当于我们把浏览器是否要取缓存的判断交给了打包工具，更新了资源，浏览器就重新获取。 这里用service Worker，替代强缓存365天，只是为了资源可以离线获取，实际上用永久http强缓存相同效果</p><p>不带hash的资源，设置强缓存10分钟，协商缓存依靠etag。并且靠CDN缓存，CDN缓存在上面讲过，缓存机制和浏览器是类似</p><p>还有不缓存的如html资源，这里忽略</p><p>当然，这只是理想模型，实际场景要考虑很多因素</p><h2 id="其他拓展" tabindex="-1">其他拓展 <a class="header-anchor" href="#其他拓展" aria-label="Permalink to &quot;其他拓展&quot;">​</a></h2><h3 id="浏览器的gzip" tabindex="-1">浏览器的gzip <a class="header-anchor" href="#浏览器的gzip" aria-label="Permalink to &quot;浏览器的gzip&quot;">​</a></h3><ul><li>给静态资源服务器http开启gzip,(nodejs来压缩？) 和缓存一样，只要有标识，浏览器就会自己去做解压</li></ul><p>需要注意的是压缩的步骤由谁去做</p><h3 id="webpack的hash、chunkhash和contenthash区别" tabindex="-1">webpack的hash、chunkhash和contenthash区别 <a class="header-anchor" href="#webpack的hash、chunkhash和contenthash区别" aria-label="Permalink to &quot;webpack的hash、chunkhash和contenthash区别&quot;">​</a></h3><ul><li><code>hash</code>：根据打包中所有的文件计算出的hash值。所有产物文件的filename获得的 <code>[hash]</code> 都是一样的。当修改任一文件，都会生成新的 <code>hash</code></li><li><code>chunkhash</code>：根据打包过程中当前chunk的文件计算出的hash值。如果 <code>Webpack</code> 配置是多入口配置，那么通常会生成多个chunk，每个chunk对应的出口filename获得的 [chunkhash] 是不一样的，1个 <code>chunk</code> 对应多个产物 <code>file</code>，因此打包过程判断到其中一个file改变，将会生成新的 <code>chunkHash</code> 其他几个产物file 即使没有修改，也会使用新的hash 来不取缓存中资源</li><li><code>contenthash</code> 根据产物文件内容计算出的hash值</li></ul><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://juejin.cn/post/6844903709982490638" target="_blank" rel="noreferrer">http缓存与cdn缓存配置指南</a></li><li><a href="https://zhuanlan.zhihu.com/p/24467558" target="_blank" rel="noreferrer">【腾讯Bugly干货分享】彻底弄懂 Http 缓存机制 - 基于缓存策略三要素分解法</a></li><li><a href="https://zhuanlan.zhihu.com/p/65722520" target="_blank" rel="noreferrer">聊聊 CDN 缓存与浏览器缓存</a></li><li><a href="https://naluduo.vip/Web-Performance-Optimization/cache" target="_blank" rel="noreferrer">微谈 Web 前端性能优化-缓存篇</a></li><li><a href="https://zhuanlan.zhihu.com/p/28113197" target="_blank" rel="noreferrer">设计一个无懈可击的浏览器缓存方案：关于思路，细节，ServiceWorker，以及HTTP/2</a></li></ul>`,130),e=[p];function t(c,r,y,F,D,i){return a(),n("div",null,e)}const A=s(o,[["render",t]]);export{h as __pageData,A as default};
