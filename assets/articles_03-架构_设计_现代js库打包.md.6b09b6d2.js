import{_ as s,o as e,c as a,V as o}from"./chunks/framework.b450deef.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"articles/03-架构/设计/现代js库打包.md","filePath":"articles/03-架构/设计/现代js库打包.md"}'),n={name:"articles/03-架构/设计/现代js库打包.md"},p=o(`<p>package.json 中的配置</p><h2 id="exports" tabindex="-1">exports <a class="header-anchor" href="#exports" aria-label="Permalink to &quot;exports&quot;">​</a></h2><p><a href="https://nodejs.org/api/packages.html#package-entry-points" target="_blank" rel="noreferrer">Nodejs官方文档</a></p><blockquote><p>The <code>&quot;exports&quot;</code> provides a modern alternative to <code>&quot;main&quot;</code> allowing multiple entry points to be defined, conditional entry resolution support between environments, and preventing any other entry points besides those defined in <code>&quot;exports&quot;</code>.</p><p>exports 配置是替换 main 的现代输出配置 🤔 以往的 js库 一般都是定义 main 为 UMD 吗</p></blockquote><blockquote><p>the &quot;exports&quot; field is recommended. For packages supporting Node.js 10 and below, the &quot;main&quot; field is required. If both &quot;exports&quot; and &quot;main&quot; are defined, the &quot;exports&quot; field takes precedence over &quot;main&quot; in supported versions of Node.js.</p><p>👆 低于nodejs10 不支持exports 只能用 main</p><p>对于支持的nodejs export 优先级高于 main</p></blockquote><blockquote><p>To make the introduction of &quot;exports&quot; non-breaking, ensure that every previously supported entry point is exported. It is best to explicitly specify entry points so that the package&#39;s public API is well-defined.</p><p>👆 显式定义可被引入的 entry points 是更好的</p></blockquote><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">exports</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./index.js</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>等同于</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">exports</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./index.js</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>👆 <code>&quot;.&quot;</code> 是默认输出值 也等同于 <code>&quot;main&quot;</code> 配置</p><h3 id="exports省略后缀写法" tabindex="-1">exports省略后缀写法 <a class="header-anchor" href="#exports省略后缀写法" aria-label="Permalink to &quot;exports省略后缀写法&quot;">​</a></h3><p><a href="https://github.com/WICG/import-maps#packages-via-trailing-slashes" target="_blank" rel="noreferrer">import map package - github</a></p><h3 id="exports常见exports配置" tabindex="-1">exports常见exports配置 <a class="header-anchor" href="#exports常见exports配置" aria-label="Permalink to &quot;exports常见exports配置&quot;">​</a></h3><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">exports</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">types</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">index.d.ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">index.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">import</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">index.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">require</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">index.cjs</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">default</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">index.js</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">./package.json</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./package.json</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>👆 type module 是什么？</p><p>nodejs 文档只有 <code>node-addons node import require default</code></p><ul><li>export <ul><li>动词: 输出</li><li>名词: 出口/出口货物 exports</li></ul></li><li>output <ul><li>动词: 输出</li><li>名词: 产量/出口量</li></ul></li></ul><p>根据不同的条件输出对应的文件</p><ul><li>文件是被 import 还是被 require</li><li>开发人员需要的是 development 版本的库还是 production 版本</li></ul><h2 id="main" tabindex="-1">main <a class="header-anchor" href="#main" aria-label="Permalink to &quot;main&quot;">​</a></h2><p><code>main</code> 是当打包工具或运行时不支持 package exports 时的兜底方案</p><p>如果打包工具或运行时支持 package exports，则不会使用 <code>main</code></p><p>❕ 是不会使用, 而不仅仅是优先级</p><p><code>main</code> 应该指向一个兼容 CommonJS 格式的产出；它应该与 package exports 中的 <code>require</code> 保持一致。</p><h2 id="module" tabindex="-1">module <a class="header-anchor" href="#module" aria-label="Permalink to &quot;module&quot;">​</a></h2><p><code>module</code> 是当 <code>打包工具</code> 或运行时不支持 package exports 时的兜底方案</p><p>如果打包工具或运行时支持 package exports，则不会使用 <code>module</code>。</p><p><code>module</code> 应该指向一个兼容 ESM 格式的产出；它应该与 package exports 中的 <code>module</code> 或 <code>import</code> 保持一致。</p><h2 id="files" tabindex="-1">files <a class="header-anchor" href="#files" aria-label="Permalink to &quot;files&quot;">​</a></h2><p>用于 npm 发包</p><p><a href="https://docs.npmjs.com/cli/v8/configuring-npm/package-json#files" target="_blank" rel="noreferrer">files - npm官方文档</a> 决定 <code>npm</code> CLI 在打包库时哪些文件和目录包含到最终的 NPM 包中。</p><p>例如，如果你将代码从 TypeScript 编译为 JavaScript，你可能就不想在 NPM 包中包含 TypeScript 的源代码。（相反，你应该包含 sourcemap）。</p><p><code>files</code> 可以接受一个字符串数组（如果需要，这些字符串可以包含类似 glob 的语法），例如：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">files</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dist</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>注意，文件数组不接受相对路径表示；<code>&quot;files&quot;: [&quot;./dist&quot;]</code> 将无法正常工作。</p><p>验证你已正确设置 <code>files</code> 的一种好方法是运行 <a href="https://docs.npmjs.com/cli/v8/commands/npm-publish#dry-run" target="_blank" rel="noreferrer"><code>npm publish --dry-run</code></a>，它将根据此设置列出将会包含的文件。</p><h2 id="types" tabindex="-1">types <a class="header-anchor" href="#types" aria-label="Permalink to &quot;types&quot;">​</a></h2><p>package exports 可以配置 types</p><p>如果打包工具或运行时支持 package exports，则不会使用 types。</p><p>types 应该指向你的 TypeScript 入口文件，例如 index.d.ts；它应该与 package exports 中的 types 字段指向同一个文件。</p><h2 id="peerdependencies" tabindex="-1">peerDependencies <a class="header-anchor" href="#peerdependencies" aria-label="Permalink to &quot;peerDependencies&quot;">​</a></h2><p>外置框架。只有在开发人员自行安装你需要的框架后才能工作</p><p>设置 peerDependencies 让他们知道他们需要安装的框架。- 例如，如果你在创建一个 React 库：</p><p>npm v3-v6 不安装 peer dependencies，而 npm v7+ 将自动安装 peer dependencies。</p><h2 id="双包注意事项" tabindex="-1">双包注意事项 <a class="header-anchor" href="#双包注意事项" aria-label="Permalink to &quot;双包注意事项&quot;">​</a></h2><p><a href="https://juejin.cn/post/6972006652631318564" target="_blank" rel="noreferrer">Node最新Module导入导出规范-翻译Nodejs官方文档(Nodejs.cn太机翻了)</a></p><h2 id="简易打包方法" tabindex="-1">简易打包方法 <a class="header-anchor" href="#简易打包方法" aria-label="Permalink to &quot;简易打包方法&quot;">​</a></h2><h2 id="发包" tabindex="-1">发包 <a class="header-anchor" href="#发包" aria-label="Permalink to &quot;发包&quot;">​</a></h2><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://github.com/frehner/modern-guide-to-packaging-js-library/blob/main/README-zh_CN.md" target="_blank" rel="noreferrer">打包 JavaScript 库的现代化指南</a></li></ul>`,50),l=[p];function t(r,c,i,d,D,u){return e(),a("div",null,l)}const h=s(n,[["render",t]]);export{y as __pageData,h as default};
