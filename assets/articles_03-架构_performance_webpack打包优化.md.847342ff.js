import{_ as s,o as a,c as n,V as p}from"./chunks/framework.b450deef.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"articles/03-架构/performance/webpack打包优化.md","filePath":"articles/03-架构/performance/webpack打包优化.md"}'),l={name:"articles/03-架构/performance/webpack打包优化.md"},o=p(`<h2 id="webpack打包优化" tabindex="-1">webpack打包优化 <a class="header-anchor" href="#webpack打包优化" aria-label="Permalink to &quot;webpack打包优化&quot;">​</a></h2><h3 id="分包" tabindex="-1">分包 <a class="header-anchor" href="#分包" aria-label="Permalink to &quot;分包&quot;">​</a></h3><p>第三方资源都各自一个js，如vue.js、swiper.js、组件库.js等 优点是利用浏览器缓存可以增量部署和加载，缺点是并发限制</p><blockquote><p>得益于http2，缺点可以忽略不计，因此第三方资源最好都单独一个js</p></blockquote><ol><li>手动在工程内粘贴 <code>xx.min.js</code>(通过自动部署到cdn目录)</li><li>webpack分包配置写函数，所有依赖都拆成对应依赖名的js资源</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> config </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">splitChunks</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">minSize</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">300</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1024</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 300k才分包</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">chunks</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">all</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 同步+异步文件</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">cacheGroups</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">autoVendor</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">test</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/[</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">]</span><span style="color:#C3E88D;">node_modules</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">]/</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">name</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">module</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">          </span><span style="color:#676E95;font-style:italic;">// 也可以获取第三方资源的版本号</span></span>
<span class="line"><span style="color:#A6ACCD;">          const getNameReg </span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/[</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">]</span><span style="color:#C3E88D;">node_modules</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">](</span><span style="color:#C3E88D;">.</span><span style="color:#89DDFF;">*?)([</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">]|</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">)/</span></span>
<span class="line"><span style="color:#A6ACCD;">          const </span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">packageName</span><span style="color:#F07178;">] = module.context.match(getNameReg)</span></span>
<span class="line"><span style="color:#F07178;">          return \`npm/ \${packageName.replace(&#39;@&#39;,&#39;&#39;)}\`</span></span>
<span class="line"><span style="color:#F07178;">        }</span></span>
<span class="line"><span style="color:#F07178;">      }</span></span>
<span class="line"><span style="color:#F07178;">    }</span></span>
<span class="line"><span style="color:#F07178;">  }</span></span>
<span class="line"><span style="color:#F07178;">}</span></span></code></pre></div><h3 id="前端资源压缩gzip" tabindex="-1">前端资源压缩gzip <a class="header-anchor" href="#前端资源压缩gzip" aria-label="Permalink to &quot;前端资源压缩gzip&quot;">​</a></h3><p>可以让nginx压缩资源成gzip，交给浏览器解压 服务器压缩需要耗时，更彻底的是前端打包后直接压缩</p><p>其他压缩算法 Brotli,服务器安装ngx模块后，可以支持服务器压缩成Brotli，交给浏览器解压</p><p>如果没有http的keepalive，每次请求的时间分析中都会有<code>DNS Lookup</code>和<code>Initial connecttion(TCP/SSL)</code></p><h3 id="静态服务器http缓存配置" tabindex="-1">静态服务器http缓存配置 <a class="header-anchor" href="#静态服务器http缓存配置" aria-label="Permalink to &quot;静态服务器http缓存配置&quot;">​</a></h3><p>参考<a href="./../http/http缓存.html">http缓存</a></p><p>nginx配置</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">http</span></span>
<span class="line"><span style="color:#A6ACCD;">  etag off;</span></span>
<span class="line"><span style="color:#A6ACCD;">  add_header Last-Modified &quot;&quot;;</span></span></code></pre></div><p>👆 关闭静态资源请求响应头的<code>etag</code>和<code>Last-Modified</code>(默认是开启)</p><p>强缓存配置 <code>expires 5s</code></p><p>谷歌浏览器会给html默认添加<code>Cache-Control = 0</code></p><p>因此关于http缓存其实不需要手动配置</p><h3 id="静态服务器http2配置" tabindex="-1">静态服务器http2配置 <a class="header-anchor" href="#静态服务器http2配置" aria-label="Permalink to &quot;静态服务器http2配置&quot;">​</a></h3><p>参考<a href="./../http/http2.html">http2</a></p><blockquote><p>tips: 可以直上 <a href="./../http/http3.html">http3</a></p></blockquote><p>nginx 支持http2，服务器需要安装 <strong>http2的模块</strong> 在listen端口处配置ssl和http2</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">server</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">listen</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">443</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ssl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">http2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">listen</span><span style="color:#A6ACCD;"> [::]:443 ssl http2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">server_name</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">域名</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">root</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/var/www/包名</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 前端静态资源目录</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">index</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">index.html</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">ssl_certificate</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/etc/letsencrypt/live/域名/fullchain.pem</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 证书</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">ssl_certificate_key</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/etc/letsencrypt/live/域名/privkey.pem</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;"># 证书</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">location</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">try_files</span><span style="color:#A6ACCD;"> $uri $uri</span><span style="color:#C3E88D;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">=</span><span style="color:#F78C6C;">404</span></span>
<span class="line"><span style="color:#A6ACCD;">  }</span></span>
<span class="line"><span style="color:#A6ACCD;">}</span></span></code></pre></div><p>TODO: 各处补充细节</p>`,24),e=[o];function t(c,r,y,C,D,i){return a(),n("div",null,e)}const h=s(l,[["render",t]]);export{F as __pageData,h as default};
