import{_ as s,o as a,c as n,V as l}from"./chunks/framework.b450deef.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"articles/01-深度学习/js/浏览器垃圾回收.md","filePath":"articles/01-深度学习/js/浏览器垃圾回收.md"}'),p={name:"articles/01-深度学习/js/浏览器垃圾回收.md"},o=l(`<p>导致内存溢出的常见场景</p><ul><li>全局变量</li><li>闭包</li><li>定时器等不会自动销毁的API</li></ul><p>闭包为什么能解决变量污染的问题 FIXME: 因为js运行是有作用域的，块级作用域、行内作用域(是不是有点像css的会分行的块状元素和不会分行的行内元素) 闭包里利用的是外部无法访问函数内部的机制，也就是手动限制了作用域</p><p>准确式 GC GC 算法采用了分代式垃圾回收机制 V8 将内存（堆）分为新生代和老生代两部分</p><h3 id="新生代算法" tabindex="-1">新生代算法 <a class="header-anchor" href="#新生代算法" aria-label="Permalink to &quot;新生代算法&quot;">​</a></h3><p>新生代中的对象一般存活时间较短，使用 Scavenge GC 算法。</p><p>在新生代空间中，内存空间分为两部分，分别为 From 空间和 To 空间。在这两个空间中，必定有一个空间是使用的，另一个空间是空闲的。新分配的对象会被放入 From 空间中，当 From 空间被占满时，新生代 GC 就会启动了。算法会检查 From 空间中存活的对象并复制到 To 空间中，如果有失活的对象就会销毁。当复制完成后将 From 空间和 To 空间互换，这样 GC 就结束了。</p><h3 id="老生代算法" tabindex="-1">老生代算法 <a class="header-anchor" href="#老生代算法" aria-label="Permalink to &quot;老生代算法&quot;">​</a></h3><p>老生代中的对象一般存活时间较长且数量也多，使用了两个算法，分别是标记清除算法和标记压缩算法。</p><p>在讲算法前，先来说下什么情况下对象会出现在老生代空间中：</p><p>新生代中的对象是否已经经历过一次 Scavenge 算法，如果经历过的话，会将对象从新生代空间移到老生代空间中。 To 空间的对象占比大小超过 25 %。在这种情况下，为了不影响到内存分配，会将对象从新生代空间移到老生代空间中。 老生代中的空间很复杂，有如下几个空间</p><div class="language-c"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">enum</span><span style="color:#A6ACCD;"> AllocationSpace </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// TODO(v8:7464): Actually map this space&#39;s memory as read-only.</span></span>
<span class="line"><span style="color:#F07178;">  RO_SPACE</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;">    // 不变的对象空间</span></span>
<span class="line"><span style="color:#F07178;">  NEW_SPACE</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;">   // 新生代用于 GC 复制算法的空间</span></span>
<span class="line"><span style="color:#F07178;">  OLD_SPACE</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;">   // 老生代常驻对象空间</span></span>
<span class="line"><span style="color:#F07178;">  CODE_SPACE</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;">  // 老生代代码对象空间</span></span>
<span class="line"><span style="color:#F07178;">  MAP_SPACE</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;">   // 老生代 map 对象</span></span>
<span class="line"><span style="color:#F07178;">  LO_SPACE</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;">    // 老生代大空间对象</span></span>
<span class="line"><span style="color:#F07178;">  NEW_LO_SPACE</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;">  // 新生代大空间对象</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  FIRST_SPACE </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> RO_SPACE</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  LAST_SPACE </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> NEW_LO_SPACE</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  FIRST_GROWABLE_PAGED_SPACE </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> OLD_SPACE</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  LAST_GROWABLE_PAGED_SPACE </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> MAP_SPACE</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><p>在老生代中，以下情况会先启动标记清除算法：</p><ul><li>某一个空间没有分块的时候</li><li>空间中被对象超过一定限制</li><li>空间不能保证新生代中的对象移动到老生代中</li></ul><p>在这个阶段中，会遍历堆中所有的对象，然后标记活的对象，在标记完成后，销毁所有没有被标记的对象。在标记大型对内存时，可能需要几百毫秒才能完成一次标记。这就会导致一些性能上的问题。为了解决这个问题，2011 年，V8 从 stop-the-world 标记切换到增量标志。在增量标记期间，GC 将标记工作分解为更小的模块，可以让 JS 应用逻辑在模块间隙执行一会，从而不至于让应用出现停顿情况。但在 2018 年，GC 技术又有了一个重大突破，这项技术名为并发标记。 该技术可以让 GC 扫描和标记对象时，同时允许 JS 运行</p><p>清除对象后会造成堆内存出现碎片的情况，当碎片超过一定限制后会启动压缩算法。在压缩过程中，将活的对象像一端移动，直到所有对象都移动完成然后清理掉不需要的内存。</p>`,16),e=[o];function t(c,r,i,F,y,_){return a(),n("div",null,e)}const A=s(p,[["render",t]]);export{E as __pageData,A as default};
