import{_ as s,o as l,c as a,V as e}from"./chunks/framework.b450deef.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"articles/03-架构/设计/Whistle代理.md","filePath":"articles/03-架构/设计/Whistle代理.md"}'),p={name:"articles/03-架构/设计/Whistle代理.md"},t=e(`<p>网络上较好的一篇<a href="http://wproxy.org/whistle/" target="_blank" rel="noreferrer">whistle</a>教程，适合非前端人员快速了解与上手</p><p>集Nginx + Fiddler + Charles + Host配置 + winner等工具于一身的调试工具</p><p>是一个 Nodejs 实现的本地服务!</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-g</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">whistle</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 启动</span></span>
<span class="line"><span style="color:#FFCB6B;">w2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">start</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 重启</span></span>
<span class="line"><span style="color:#FFCB6B;">w2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">restart</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 停止</span></span>
<span class="line"><span style="color:#FFCB6B;">w2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stop</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 调试运行，插件开发调试时使用</span></span>
<span class="line"><span style="color:#FFCB6B;">w2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span></span></code></pre></div><ul><li><p>设置请求host代理(本地访问域名转ip,等同于自己修改电脑host)</p></li><li><p>设置http转https(自签名证书)</p></li><li><p>抓取HTTP、HTTPS请求响应内容(提供代理网络服务ip,需要自己配置代理功能如手机的wifi自定义、pc浏览器插件<code>ProxySwitchyOmega</code>)</p></li><li><p>过滤不需要的url(?)</p></li><li><p>支持替换本地文件(?)</p></li><li><p>支持修改接口返回数据(?)</p></li><li><p>内置调试移动端页面的weinre和log及扩展eruda和vConsole(?)</p></li><li><p>修改请求url、方法、头部、内容及响应状态码、头部、内容等(?)</p></li><li><p><a href="https://juejin.cn/post/6844904167404732430" target="_blank" rel="noreferrer">第一章：我为什么推荐大家使用Whistle</a></p></li><li><p><a href="https://juejin.cn/post/6844904167396343815" target="_blank" rel="noreferrer">第二章：Whistle是什么及本地安装</a></p></li><li><p><a href="https://juejin.cn/post/6844904167408943111" target="_blank" rel="noreferrer">第三章：Whistle之简单使用</a></p></li><li><p><a href="https://juejin.cn/post/6844904167400554510" target="_blank" rel="noreferrer">第四章：Whistle项目配置文件</a></p></li><li><p><a href="https://juejin.cn/post/6844904167857717262" target="_blank" rel="noreferrer">第五章：Whistle移动端调试</a></p></li></ul><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><ol><li>本地开发启动 Node devServer 静态服务器运行内存中 webpack 编译后的代码，通过 ip 或 localhost 访问</li><li>通过 webpack 给 devServer 静态服务器安装 Node 中间件 <code>http-proxy-middleware</code> 实现代理访问后端服务器，绕过浏览器直接访问后端服务器跨域的限制</li></ol><p>👆 是我们前端工程化的基建，理论上是足够使用的</p><p>但是我们也会遇到一些问题，比如：</p><ul><li>用户的登陆功能，后端接口会校验客户端域名的合法性，只处理特定的域名的请求</li><li>特定域名下 cookie 的读取等等。这些功能在 localhost 的 host 下可能会受到限制</li></ul><p>此时为了调试，我们可能在业务代码里判断 localhost 走内网登录逻辑，或是通过修改本地 host 文件来用域名打开本地项目</p><p>而 webpack 的代理后端服务器功能每次修改都需要重启 webpack 服务，如访问不同的测试环境或是访问不同的后端开发本地服务</p><p>导致这些不足的背后实质上是两个原因：👇</p><ul><li>本地开发和线上环境的域名不一致，这就导致了业务代码参杂了环境相关的不纯洁的代码。</li><li>转发配置与webpack过于耦合，这就致使一旦环境需要变动就不得不进行项目重启。</li></ul><p>因此解决的方案也是基于这两点:👇</p><ul><li>本地开发时，浏览器中访问的是线上域名，即用线上的域名来开发和调试本地代码，做到本地代码和线上代码完全一致而不需要在代码层面做环境区分。</li><li>将接口代理功能从webpack中抽离，使用其他工具接管这部分功能，webpack不再需要因修改转发配置而重启。</li></ul><h2 id="本地-host" tabindex="-1">本地 host <a class="header-anchor" href="#本地-host" aria-label="Permalink to &quot;本地 host&quot;">​</a></h2><p>👆 提到通过修改 host 使用域名打开前端本地静态服务解决一些 localhost 浏览器问题</p><p>还可以通过修改 host 使前端项目直接访问生产环境接口，而实际访问的是 host 中配置的环境，此时切换后端服务环境不需要重启 webpack</p><p>其他 CDN 等资源服务器同理，开发测试阶段都是直接访问生产域名不区分环境，由每个人的本地 host 管理自己希望访问的地方</p>`,20),n=[t];function o(i,r,c,h,d,_){return l(),a("div",null,n)}const u=s(p,[["render",o]]);export{C as __pageData,u as default};
