import{_ as o,o as e,c as l,V as i}from"./chunks/framework.b450deef.js";const S=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"articles/04-面试/前端面试之道/前端面试之道-缓存.md","filePath":"articles/04-面试/前端面试之道/前端面试之道-缓存.md"}'),s={name:"articles/04-面试/前端面试之道/前端面试之道-缓存.md"},a=i('<blockquote><p>有几种方式可以实现存储功能，分别有什么优缺点？什么是 Service Worker？</p></blockquote><h3 id="cookie-localstorage-sessionstorage-indexdb" tabindex="-1">cookie，localStorage，sessionStorage，indexDB <a class="header-anchor" href="#cookie-localstorage-sessionstorage-indexdb" aria-label="Permalink to &quot;cookie，localStorage，sessionStorage，indexDB&quot;">​</a></h3><ol><li>效果不同</li></ol><ul><li>cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递。</li><li>cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下</li><li>sessionStorage和localStorage不会自动把数据发送给服务器，仅在本地保存。</li></ul><ol start="2"><li>存储大小限制不同</li></ol><ul><li>cookie数据不能超过4K，sessionStorage和localStorage可以达到5M</li></ul><ol start="3"><li>有效期不同</li></ol><ul><li>sessionStorage：仅在当前浏览器窗口关闭之前有效；</li><li>localStorage：始终有效，窗口或浏览器关闭也一直保存，本地存储，因此用作持久数据；</li><li>cookie：只在设置的cookie过期时间之前有效，即使窗口关闭或浏览器关闭</li></ul><ol start="3"><li>作用域不同</li></ol><ul><li>sessionStorage：不在不同的浏览器窗口中共享，即使是同一个页面；</li><li>localstorage：在所有同源窗口中都是共享的；也就是说只要浏览器不关闭，数据仍然存在</li><li>cookie: 也是在所有同源窗口中都是共享的.也就是说只要浏览器不关闭，数据仍然存在</li></ul><p>浏览器可以通过cookie、ssessionStorage、localStorage进行对数据进行存储，同源策略下均可以访问，但具有一下不同点：</p><p>性质不同，cookies是为了标识用户身份而存储用户本地终端上的数据，自动在同源http请求头中携带，cookies在浏览器和服务器间来回传递信息，而sessionstorage和localstorage不会自动把数据发给服务器，仅在本地保存；</p><p>存储大小的限制不同，cookie仅可以保存4Kb且数量不超过20条，sessionstorage和localstorage保存的数据可达到5M；</p><p>生命周期不同，cookie可以设置生命周期且在过期之前均有效，sessionstorage仅在浏览器窗口关闭之前有效，若不手动删除localstorage则永久有效；</p><p>作用域不同，cookie和localStorage在所有的同源标签页（不同页面但域名端口相同）都是共享，而不同标签页面的sessionStorage不共享</p><p>缓存能不能跨域获取？</p>',16),t=[a];function r(c,n,_,p,g,k){return e(),l("div",null,t)}const u=o(s,[["render",r]]);export{S as __pageData,u as default};
