import{_ as i,o as l,c as a,V as e}from"./chunks/framework.b450deef.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"articles/04-面试/前端面试之道/前端面试之道-前端监控.md","filePath":"articles/04-面试/前端面试之道/前端面试之道-前端监控.md"}'),t={name:"articles/04-面试/前端面试之道/前端面试之道-前端监控.md"},r=e('<p>前端监控指</p><ul><li>页面埋点</li><li>性能监控</li><li>异常监控</li></ul><p>TODO: 怎么设计一个监控体系</p><h2 id="页面埋点" tabindex="-1">页面埋点 <a class="header-anchor" href="#页面埋点" aria-label="Permalink to &quot;页面埋点&quot;">​</a></h2><ul><li>PV / UV</li><li>停留时长</li><li>流量来源</li><li>用户交互</li></ul><p>手动埋点：自主选择需要监控的数据然后在相应的地方写入代码。灵活性很大，缺点是工作量较大，每个需要监控的地方都得插入代码。</p><p>无埋点：统计所有的事件并且定时上报。因为统计的是所有事件，所以还需要后期过滤出需要的数据。</p><h2 id="性能监控" tabindex="-1">性能监控 <a class="header-anchor" href="#性能监控" aria-label="Permalink to &quot;性能监控&quot;">​</a></h2><p>直接使用浏览器自带的 Performance API 来实现这个功能。</p><p>👇 <code>performance.getEntriesByType(&#39;navigation&#39;)</code><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/20221212171043.png" alt=""></p><p>包含了 网络传输 到 页面加载完成 相应的数据</p><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/20221212171056.png" alt=""></p><h2 id="异常监控" tabindex="-1">异常监控 <a class="header-anchor" href="#异常监控" aria-label="Permalink to &quot;异常监控&quot;">​</a></h2><ul><li>代码报错 <ul><li><code>window.onerror</code> 拦截报错</li><li>该方法能拦截到大部分的详细报错信息，但是也有例外</li><li>跨域的代码运行错误会显示 Script error. 对于这种情况我们需要给 script 标签添加 crossorigin 属性</li><li>某些浏览器可能不会显示调用栈信息，这种情况可以通过 arguments.callee.caller 来做栈递归</li></ul></li><li>接口异常 <ul><li>列举出出错的状态码。一旦出现此类的状态码就可以立即上报出错</li></ul></li></ul><p>👆 捕获的错误需要上传给服务器，通常可以通过 img 标签的 src 发起一个请求。</p>',15),o=[r];function c(n,s,_,p,d,u){return l(),a("div",null,o)}const g=i(t,[["render",c]]);export{m as __pageData,g as default};
