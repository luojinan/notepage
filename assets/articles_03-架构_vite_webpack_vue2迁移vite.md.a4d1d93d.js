import{_ as s,o as a,c as n,V as l}from"./chunks/framework.b450deef.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"articles/03-架构/vite/webpack+vue2迁移vite.md","filePath":"articles/03-架构/vite/webpack+vue2迁移vite.md"}'),p={name:"articles/03-架构/vite/webpack+vue2迁移vite.md"},o=l(`<p><a href="https://juejin.cn/post/7047479540850884645" target="_blank" rel="noreferrer">vite 源码解析</a><a href="https://www.jianshu.com/p/c71ad2e1df06" target="_blank" rel="noreferrer">基于esbuild的universal bundler设计</a></p><p><a href="https://www.jianshu.com/p/7738e058ac4a" target="_blank" rel="noreferrer">将vue-cli的webpack配置输出到独立文件</a></p><p><a href="https://www.wujieli.top/2022/08/21/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%8D%87%E7%BA%A7%20Vite%20%E8%B8%A9%E5%9D%91%E6%80%BB%E7%BB%93/" target="_blank" rel="noreferrer">迁移vite笔记</a></p><h2 id="输出旧项目vuecli的webpack配置" tabindex="-1">输出旧项目vuecli的webpack配置 <a class="header-anchor" href="#输出旧项目vuecli的webpack配置" aria-label="Permalink to &quot;输出旧项目vuecli的webpack配置&quot;">​</a></h2><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># --mode 指定环境模式 (默认值：development)</span></span>
<span class="line"><span style="color:#FFCB6B;">npx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">vue-cli-service</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">inspect</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--mode</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">development</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">webpack.config.development.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">npx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">vue-cli-service</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">inspect</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--mode</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">production</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">webpack.config.production.js</span></span></code></pre></div><p>在产生的 js 文件开头，添加：<code>module.exports =</code>，然后格式化即可查看。</p><h2 id="vite-指令创建基础模版" tabindex="-1">vite 指令创建基础模版 <a class="header-anchor" href="#vite-指令创建基础模版" aria-label="Permalink to &quot;vite 指令创建基础模版&quot;">​</a></h2><p>配置 vite for vue2 的 plugin</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fileURLToPath</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">URL</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">node:url</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">defineConfig</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vite</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> vue </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@vitejs/plugin-vue2</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineConfig</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">plugins</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#82AAFF;">vue</span><span style="color:#A6ACCD;">()]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">resolve</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">extensions</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.jsx</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.tsx</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.json</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">alias</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">@</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fileURLToPath</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">URL</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./src</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">meta</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">url))</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><h2 id="把旧项目整个拉进来运行" tabindex="-1">把旧项目整个拉进来运行 <a class="header-anchor" href="#把旧项目整个拉进来运行" aria-label="Permalink to &quot;把旧项目整个拉进来运行&quot;">​</a></h2><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/20230316172158.png" alt=""></p><p>vite 启动会扫描出缺少哪些依赖，按提示安装依赖</p><h2 id="postcss-config-需要-cjs" tabindex="-1">postcss.config 需要 cjs <a class="header-anchor" href="#postcss-config-需要-cjs" aria-label="Permalink to &quot;postcss.config 需要 cjs&quot;">​</a></h2><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/20230316172357.png" alt=""></p><p>vite 自动扫描到项目中存在 postcss 时执行相关插件功能</p><h2 id="process-env-js异常阻断" tabindex="-1">p<wbr>rocess.env js异常阻断 <a class="header-anchor" href="#process-env-js异常阻断" aria-label="Permalink to &quot;p&lt;wbr&gt;rocess.env js异常阻断&quot;">​</a></h2><p>理论上 第三方库不应该用这种变量，而使用方传递进来</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineConfig</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">define</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 同 webpack.DefinePlugin，手动兼容 dev 环境 p<wbr>rocess.env</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">p<wbr>rocess.env</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><h2 id="旧项目中的-require-及-require-context-语法" tabindex="-1">旧项目中的 require 及 require.context 语法 <a class="header-anchor" href="#旧项目中的-require-及-require-context-语法" aria-label="Permalink to &quot;旧项目中的 require 及 require.context 语法&quot;">​</a></h2><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/20230403112610.png" alt=""></p><p>因为不多所以可以考虑 改写为 import</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// vite</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> routeFiles </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">meta</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">glob</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@/router/*.ts</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 未执行的 import 函数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> routesPromise </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">values</span><span style="color:#A6ACCD;">(routeFiles)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">item</span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">item</span><span style="color:#A6ACCD;">()) </span><span style="color:#676E95;font-style:italic;">// 执行得到 promise</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> routes</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> []</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">all</span><span style="color:#A6ACCD;">(routesPromise)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">list</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// promise 后模块内容在 default 中</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">routes</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">list</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;font-style:italic;">item</span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">item</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">default</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">flat</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>但是一定要兼容的话，可以尝试自己封装 vite plugin 转译代码成 import</p><h2 id="添加域名子路径-使用域名而不是本地开启-http2" tabindex="-1">添加域名子路径 使用域名而不是本地开启 http2 <a class="header-anchor" href="#添加域名子路径-使用域名而不是本地开启-http2" aria-label="Permalink to &quot;添加域名子路径 使用域名而不是本地开启 http2&quot;">​</a></h2><h2 id="依赖中的依赖是-commonjs-没有预构建成功" tabindex="-1">依赖中的依赖是 commonjs 没有预构建成功? <a class="header-anchor" href="#依赖中的依赖是-commonjs-没有预构建成功" aria-label="Permalink to &quot;依赖中的依赖是 commonjs 没有预构建成功?&quot;">​</a></h2><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/20230403112729.png" alt=""></p><p><code>import { } from &#39;commonjs&#39;</code> 语句 vite 报错 找不到模块中的方法</p><p>理论上 vite 的预构建会处理 node_modules 中所有的依赖</p><h2 id="vue-class-语法-装饰器" tabindex="-1">vue class 语法 装饰器 <a class="header-anchor" href="#vue-class-语法-装饰器" aria-label="Permalink to &quot;vue class 语法 装饰器&quot;">​</a></h2><p>webpack 构建工具需要 babel 插件</p><p>但是 vite 是废弃 babel 使用 swc</p><p><a href="https://blog.csdn.net/qq_41800366/article/details/115030758" target="_blank" rel="noreferrer"></a></p><p><a href="https://github.com/owlsdepartment/vite-plugin-babel" target="_blank" rel="noreferrer">vite支持babel 在遇到 js/ts 时先经过babel再经过其他插件</a></p><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/20230317185634.png" alt=""></p><p>esbuild 的 transform 方法报错</p><p>应该可以单独给 esbuild 加插件</p><p>esbuild 不支持转译 js 中的装饰器 而 ts 在 esbuild 中会先经过 ts -&gt; js -&gt; esbuild</p><p>因此只要 ts 把正确的转译装饰器，理论上 esbuild 是不会报错的</p><p>还要继续断点到 vite 处理 ts 的地方</p><p>当改写为👇 后装饰器生效</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Vue</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue-property-decorator</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">forceLogin</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@/libs/decorator/forceLogin</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Demo</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Vue</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">forceLogin</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">test</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">111</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>因此不是 esbuild 也不是 tsc 处理不了装饰器</p><p>而是 装饰器语法 的需要在 class 内部，而 vue 的 SFC 文件可能没有被编译成合法的使用装饰器的 class</p><p>而理论上现在的报错才是正确的，旧代码里的非 classComponent 理论上是用不了装饰器，什么地方做了额外的处理吗</p><p>尝试降级 vue2.6 无效</p><p>尝试降级 vite-plugin-vue2 无效</p><p>不熟悉 装饰器语法 以及 原理，更不熟悉在 vue2 使用装饰器 和 在 ts 使用装饰器的不同 以及vue2 是如何支持装饰器的</p><p>&#39;vue-property-decorator&#39; 与 ts 的关系</p><p>为什么vue 不指定 lang=ts 也能用装饰器</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// vite.config.js</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> legacy </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@vitejs/plugin-legacy</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">plugins</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">legacy</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">targets</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">defaults</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">not IE 11</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  ]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p><a href="https://github.com/swc-project/swc/discussions/3032" target="_blank" rel="noreferrer">swc decorators</a></p><h2 id="公共库问题" tabindex="-1">公共库问题 <a class="header-anchor" href="#公共库问题" aria-label="Permalink to &quot;公共库问题&quot;">​</a></h2><ol><li>sass 废弃直接运算符 因此升级 sasscore 后就没有直接运算符了，但是升级后的 hairline 行为不一致</li></ol><p>找到 sass 对应 node-sass 的版本</p><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/20230403145203.png" alt=""></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">xx</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@zz-eg/common-lib/dist/url</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><p>@zz-eg/common-lib/dist/url.js 是构建后的 commonjs 资源</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * Server-only plugin that lexes, resolves, rewrites and analyzes url imports.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * - Imports are resolved to ensure they exist on disk</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * - Lexes HMR accept calls and updates import relationships in the module graph</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * - Bare module imports are resolved (by @rollup-plugin/node-resolve) to</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * absolute file paths, e.g.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *     \`\`\`js</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *     import &#39;foo&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *     \`\`\`</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *     is rewritten to</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *     \`\`\`js</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *     import &#39;/@fs//project/node_modules/foo/dist/foo.js&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *     \`\`\`</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * - CSS imports are appended with \`.js\` since both the js module and the actual</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> * css (referenced via \`&lt;link&gt;\`) may go through the transform pipeline:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *     \`\`\`js</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *     import &#39;./style.css&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *     \`\`\`</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *     is rewritten to</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *     \`\`\`js</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *     import &#39;./style.css.js&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> *     \`\`\`</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> */</span></span></code></pre></div><p>预构建时处理 bare module 还是 👆的 rewrites 处理 bare module</p><p>还是都处理 😵</p><p>什么时候 rewrite 成 prebudle 的 node_modules/.vite/xx ，什么时候 rewrite 成 node_modules/xx</p><p>先 prebudle， rewrite 发生在运行时，会检查 bare module 是否有预编译产物，有则rewrite 成 node_modules/.vite/xx</p><p>所以缺了预构建产物 不是 rewrite 的问题</p><h2 id="vite-源码-debug" tabindex="-1">vite 源码 debug <a class="header-anchor" href="#vite-源码-debug" aria-label="Permalink to &quot;vite 源码 debug&quot;">​</a></h2><p>建一个纯的 vite vue2 zz基建的项目，复现问题来调试！！</p><p>code/test/vite-vue2-zz</p><p>尝试 纯 vite js-cookie</p><ol><li>直接引入 js-cookie 可以转译 commonjs</li><li>先预构建，由预构建产物引入 js-cookie, 也可以转译 commonjs</li></ol><p>zz-ui 是被预构建了的，内部引入 js-cookie 没有被转译，因为把 js-cookie 识别成了 esm ?</p><p>而纯的项目成功把 js-cookie 识别成了 umd？</p><ol><li>debugger 纯项目把 js-cookie 识别为 umd 的逻辑</li><li>找出源码 识别第三方依赖是 esm 的代码逻辑</li></ol><p>可能成功预构建了，但是引入的时候还是引入的 node_modules</p><p>zz-ui 内部有3个esm模块， 这3个模块内部依赖也完全不走预构建？</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// node_modules/.pnpm/rcnpm.zhuanspirit.com+@zz-common+zz-ui@5.0.5_qokby4kue5woh4zds3ira4utjm/node_modules/@zz-common/zz-ui/es/recycle-date/index.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// node_modules/.pnpm/rcnpm.zhuanspirit.com+@zz-common+zz-ui@5.0.5_qokby4kue5woh4zds3ira4utjm/node_modules/@zz-common/zz-ui/es/model-list/scrollor.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// node_modules/.pnpm/rcnpm.zhuanspirit.com+@zz-common+zz-ui@5.0.5_qokby4kue5woh4zds3ira4utjm/node_modules/@zz-common/zz-ui/es/recycle-address/index.js</span></span></code></pre></div><p>确实是这3个模块 走了 esm 的原因</p><p>少了 __toESM 包裹</p><p>因为这3个模块指定了 后缀 .vue 让 esbuild plugin 走了未知资源 不预构建，由运行时转译</p><p>只有这3个模块是vue 其他组件模块都是js(function component render h)</p><p>这些文件不会在esbuild阶段进行处理，所以要提前把它们找出并解析。</p><p>忘记走 打包流程了吗？</p><p>组件库对外的是vue</p><ol><li>让组件库打包成js</li><li>想办法让 esbuild 转译 vue vueplugin</li></ol><p>vite pre-bundle 只处理js的理由，以及边界情况</p><p>node_modules 第三方库就是引入了 其他类型资源，交由运行时 viteServer 转译资源</p><p>但是运行时识别不了 commonjs ？ 而这个资源的内部又有 commonjs呢</p><ol><li>为什么预构建 pre-bundle 不处理非js资源</li><li>为什么运行时 viteServer 不处理commonjs</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">optimizeDeps</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">esbuildOptions</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">   </span><span style="color:#FFCB6B;">plugins</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span></span>
<span class="line"><span style="color:#F07178;">     </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">       name</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">rewriteZZuiPath</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">       setup</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">build</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">         </span><span style="color:#A6ACCD;">build</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onResolve</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> filter</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/(</span><span style="color:#C3E88D;">index</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">scrollor</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">.vue</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">           </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">importer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">includes</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">node_modules</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">             </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> path</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">resolveDir</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`\${</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">.js</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">           </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">         </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">       </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">     </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">   ]</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>zzui 的打包方式，.vue后缀是不能存在的？</p><p>不再报错 依赖问题</p><ol><li>zzui style</li><li>js 装饰器 esbuild</li></ol><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/20230406142217.png" alt=""></p><p>vite prebundle 怎么处理第三方依赖的 peerDeps ？</p><p>prebundle node_modles/a 时遇到 peerDeps</p><h2 id="运行时装饰器语法解析" tabindex="-1">运行时装饰器语法解析 <a class="header-anchor" href="#运行时装饰器语法解析" aria-label="Permalink to &quot;运行时装饰器语法解析&quot;">​</a></h2><p>预构建就报错了...</p><p>运行时vite 解析js用的是 esbuild(不是只用预构建使用)</p><ol><li>尝试配置 vite/plugin-vue2 无效，学习解析babel参数源码</li><li>可以尝试配置自定义运行时 rollup-plugin 解决(rollup靠的还是babel,会让本来不需要babel的运行时变重)</li></ol>`,97),e=[o];function t(c,r,i,y,D,F){return a(),n("div",null,e)}const u=s(p,[["render",t]]);export{A as __pageData,u as default};
