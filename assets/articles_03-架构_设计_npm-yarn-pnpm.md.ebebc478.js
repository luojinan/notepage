import{_ as e,o,c as n,V as c}from"./chunks/framework.b450deef.js";const k=JSON.parse('{"title":"npm yarn pnpm","description":"","frontmatter":{},"headers":[],"relativePath":"articles/03-架构/设计/npm-yarn-pnpm.md","filePath":"articles/03-架构/设计/npm-yarn-pnpm.md"}'),a={name:"articles/03-架构/设计/npm-yarn-pnpm.md"},s=c(`<h1 id="npm-yarn-pnpm" tabindex="-1">npm yarn pnpm <a class="header-anchor" href="#npm-yarn-pnpm" aria-label="Permalink to &quot;npm yarn pnpm&quot;">​</a></h1><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/20230309224003.png" alt=""></p><blockquote><p>keys: <code>幽灵依赖</code>、<code>分身依赖</code>、<code>npm ci</code>、<code>lockfiles</code>、<code>hardlink</code>、<code>softlink</code></p></blockquote><h2 id="npm-install-执行流程" tabindex="-1">npm install 执行流程 <a class="header-anchor" href="#npm-install-执行流程" aria-label="Permalink to &quot;npm install 执行流程&quot;">​</a></h2><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/20230112160326.png" alt=""></p><ol><li>检查 npm 的环境配置(<code>.npmrc</code>) <ul><li>一般都是默认的安装npm时的电脑配置</li><li>手动设置一般只会设置 <code>npm</code> 源，如设置成淘宝镜像</li><li>配置优先级: <code>项目级的.npmrc文件 &gt; 用户级的 .npmrc文件 &gt; 全局级的 .npmrc &gt; npm内置的 .npmrc 文件</code></li></ul></li><li>检查 <code>lockfiles</code><ul><li>并不是检查 <code>lockfiles</code> 是否存在, ❌ 有 <code>lockfiles</code> 就按照该文件安装依赖</li><li>而是检查 <code>lockfiles</code> 中的依赖清单, 是否和 <code>package.json</code> 中的依赖清单一致</li><li>一致, 则按照 <code>lockfiles</code> 的依赖清单安装依赖</li><li>不一致, 不同版本的 npm 做的事情不一样 <ul><li>npm v5.0x 不一致就直接以 <code>package.json</code> 依赖清单为准</li><li>npm v5.1.0 - v5.4.2 不一致 TODO: 看不懂</li><li>npm v5.4.2 以上 判断 <code>package.json</code> 依赖清单定义的版本允许 <code>lockfiles</code> 中的依赖版本, 则按 <code>lockfiles</code> 安装, 如果不允许则按 <code>package.json</code> 安装</li></ul></li></ul></li><li>遍历获取远程依赖包信息, 构建该依赖包的依赖树信息(TODO: 下载前还有一个仅获取依赖信息的网络请求?)，把依赖分析后的依赖树扁平化有利于去重(依赖名和版本都要相同)</li><li>检查相应缓存, 有则取缓存, 无则远程下载(不是判断项目内node_modules缓存, 而是电脑全局的 <code>store</code> 通过 <code>npm config get cache</code>查看) 下载以及取缓存的都是压缩包,还有一个解压步骤</li><li>生成 <code>lockfiles</code></li></ol><p>🤔 有些依赖按 lock 安装 有些依赖按 <code>package.json</code> 安装吗？ 还是要么按 <code>package.json</code> 要么按 <code>lockfiles</code></p><h2 id="npm-yarn-扁平化方案" tabindex="-1">npm/yarn 扁平化方案 <a class="header-anchor" href="#npm-yarn-扁平化方案" aria-label="Permalink to &quot;npm/yarn 扁平化方案&quot;">​</a></h2><blockquote><p>👆 的流程图里，我们看到 <code>构建依赖树</code> 有<code>扁平化</code>的操作</p></blockquote><p>其实早期的 <code>npm</code> 并不是扁平化依赖, 而是保留依赖关系的树状嵌套结构</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">node_modules</span></span>
<span class="line"><span style="color:#A6ACCD;">├── A@1.0.0</span></span>
<span class="line"><span style="color:#A6ACCD;">│   └── node_modules</span></span>
<span class="line"><span style="color:#A6ACCD;">│       └── B@1.0.0</span></span>
<span class="line"><span style="color:#A6ACCD;">└── C@1.0.0</span></span>
<span class="line"><span style="color:#A6ACCD;">    └── node_modules</span></span>
<span class="line"><span style="color:#A6ACCD;">        └── B@1.0.0</span></span>
<span class="line"><span style="color:#A6ACCD;">        └── D@1.0.0</span></span></code></pre></div><p>👇 这种树状结构的明显问题是: 不同父级节点的相同子依赖重复安装了(而前端库的依赖结构嵌套是非常夸张的！🔥) <img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/20230309225108.png" alt=""></p><p>后来 <code>yarn</code> 采用扁平 <code>node_modules</code> 结构解决重复安装的问题, 而 <code>npm</code> 也跟进成了扁平结构</p><p><strong>扁平结构依赖解决了一些问题也带来了一些问题</strong> 🤔️</p><h3 id="扁平化解决了树状结构问题" tabindex="-1">扁平化解决了树状结构问题 <a class="header-anchor" href="#扁平化解决了树状结构问题" aria-label="Permalink to &quot;扁平化解决了树状结构问题&quot;">​</a></h3><ul><li>重复安装</li><li>依赖层级太深, 路径过长, windows系统会出现一些问题</li></ul><h3 id="扁平化依赖带来了新问题" tabindex="-1">扁平化依赖带来了新问题 <a class="header-anchor" href="#扁平化依赖带来了新问题" aria-label="Permalink to &quot;扁平化依赖带来了新问题&quot;">​</a></h3><ul><li><code>幽灵依赖</code>问题: 项目的 <code>package.json</code> 中没有引用的依赖，出现在 <code>node_modules</code> 目录下, 此时项目可以直接使用该依赖(也就是 <code>package.json</code> 不能描述准确依赖清单了, 这直接违反了 <code>package.json</code> 包管理的设计初衷) <ul><li>当某个依赖升级后不再依赖那个幽灵依赖时, 项目内如果使用了, 将报错</li><li>不了解幽灵依赖的具体版本, 如幽灵依赖版本较低, 项目内按照最新版本文档使用, 可能无法使用</li></ul></li><li><code>分身依赖</code>问题: 扁平依赖的去重仅判断包名不判断版本, 也就是同名不同版本的依赖不会扁平到 <code>node_modules</code> , 而是仍然嵌套到具体的依赖包目录里(扁平依赖的判断是出现同名不同版本时嵌套) <ul><li>重复安装-嵌套的包没有提升并且有多个时</li><li>重复的 <code>Typescript</code> 类型可能不同会互相冲突</li></ul></li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">node_modules</span></span>
<span class="line"><span style="color:#A6ACCD;">├── A@1.0.0</span></span>
<span class="line"><span style="color:#A6ACCD;">│   └── node_modules</span></span>
<span class="line"><span style="color:#A6ACCD;">│       └── B@1.0.0</span></span>
<span class="line"><span style="color:#A6ACCD;">├── B@2.0.0</span></span>
<span class="line"><span style="color:#A6ACCD;">└── C@1.0.0</span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">node_modules</span></span>
<span class="line"><span style="color:#A6ACCD;">├── A@1.0.0</span></span>
<span class="line"><span style="color:#A6ACCD;">├── B@1.0.0</span></span>
<span class="line"><span style="color:#A6ACCD;">└── C@1.0.0</span></span>
<span class="line"><span style="color:#A6ACCD;">     └── node_modules</span></span>
<span class="line"><span style="color:#A6ACCD;">         └── B@2.0.0</span></span></code></pre></div><blockquote><p>网上大部分说法是会根据 <code>package.json</code> 里面的顺序决定谁会被提出来，放在前面的包依赖的内容会被先提出来</p></blockquote><blockquote><p>看源码后，<code>npm</code> 其实会调用一个叫做 <code>localeCompare</code> 的方法对依赖进行一次排序，实际上就是字典序在前面的 <code>npm</code> 包的底层依赖会被优先提出来。</p></blockquote><p>👆 可以看出并 <strong>不是彻底的扁平化</strong></p><blockquote><p>🤔 应用依赖A、B，A也依赖B，会不会重复打包B？</p><p>取决于 <code>分身依赖</code> 的同名是否同版本的判断, 若同版本不会重复安装, 不同版本就会</p></blockquote><h2 id="pnpm" tabindex="-1">pnpm <a class="header-anchor" href="#pnpm" aria-label="Permalink to &quot;pnpm&quot;">​</a></h2><p><code>npm/yarn</code> 虽然都能创建 <code>软/硬链接</code>, 但是这个功能是用于用户自己设置要软链接的依赖</p><p>👆 指 <a href="./npm-link的使用.html">TODO: npm link</a></p><p>而 <code>pnpm</code> 则内部利用 <code>软/硬链接</code> 设置了完善的依赖存储方案</p><h3 id="概念-inode" tabindex="-1">概念 inode <a class="header-anchor" href="#概念-inode" aria-label="Permalink to &quot;概念 inode&quot;">​</a></h3><p><code>inode</code> 每个文件都有一个唯一的 <code>inode</code>, 包含文件元信息, 当访问文件时, 对应的元信息会被 copy 到内存去实现访问</p><p><code>stat xxx.md</code> 可以查看具体文件的元信息</p><p>✨ <strong>可以用来指向, 也可以把别的文件也定义成相同的</strong> <code>inode</code></p><h3 id="概念-hard-link-link" tabindex="-1">概念 hard/link link <a class="header-anchor" href="#概念-hard-link-link" aria-label="Permalink to &quot;概念 hard/link link&quot;">​</a></h3><p><code>Linux</code> 中包括两种链接：</p><ol><li>硬链接(<code>hard link</code>) <ul><li>创建多个空文件, 这些文件的 <code>inode</code> 等同于源文件 <code>inode</code>, 意味着只要源文件修改这些空文件也会同步修改，同理修改链接内容也会影响源文件以及其他所有链接</li><li>并且这个指向是双向的, 只要链接数非 0, 文件就一直存在</li><li>当源文件被删除，这个链接仍有内容不会为空</li></ul></li><li>软链接(<code>soft link</code>)，软链接又称为符号链接（symbolic link） <ul><li>创建多个空文件, 这些文件的 <code>inode</code> 是新的唯一的 <code>inode</code>, 永远指向源文件</li><li>当源文件被删除，这个指向会保留但是为空，恢复源文件即可恢复内容</li><li>这个指向是单向的, 删除 <code>soft link</code> 不影响源文件</li></ul></li></ol><h3 id="pnpm-依赖结构" tabindex="-1">pnpm 依赖结构 <a class="header-anchor" href="#pnpm-依赖结构" aria-label="Permalink to &quot;pnpm 依赖结构&quot;">​</a></h3><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/20230310134808.png" alt=""></p><p><code>package.json</code>中的依赖清单显示在 <code>node_modules</code> 下, 还有1个 <code>node_modules/.npm/</code>目录树状存放所有依赖(包括嵌套的依赖)</p><p>所有的依赖都是从全局 <code>store</code> 硬连接到了 <code>node_modules/.pnpm</code> 下，然后之间通过软链接来相互依赖。</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">node_modules</span></span>
<span class="line"><span style="color:#A6ACCD;">├─ .pnpm</span></span>
<span class="line"><span style="color:#A6ACCD;">│   └─ dayjs@1.10.7</span></span>
<span class="line"><span style="color:#A6ACCD;">└─ dayjs</span></span></code></pre></div><p>外层的没有版本号</p><p><a href="https://pnpm.io/symlinked-node-modules-structure" target="_blank" rel="noreferrer">node_modules结构 - pnpm官方文档</a></p><p>扁平化所有嵌套依赖，同时保留2级树状结构👇</p><p>Every file of every package inside <code>node_modules</code> is a hard link to the content-addressable store. Let&#39;s say you install <code>foo@1.0.0</code> that depends on <code>bar@1.0.0</code>. pnpm will hard link both packages to <code>node_modules</code> like this:</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">node_modules</span></span>
<span class="line"><span style="color:#A6ACCD;">└── .pnpm</span></span>
<span class="line"><span style="color:#A6ACCD;">    ├── bar@1.0.0</span></span>
<span class="line"><span style="color:#A6ACCD;">    │   └── node_modules</span></span>
<span class="line"><span style="color:#A6ACCD;">    │       └── bar -&gt; &lt;store&gt;/bar</span></span>
<span class="line"><span style="color:#A6ACCD;">    │           ├── index.js</span></span>
<span class="line"><span style="color:#A6ACCD;">    │           └── package.json</span></span>
<span class="line"><span style="color:#A6ACCD;">    └── foo@1.0.0</span></span>
<span class="line"><span style="color:#A6ACCD;">        └── node_modules</span></span>
<span class="line"><span style="color:#A6ACCD;">            └── foo -&gt; &lt;store&gt;/foo</span></span>
<span class="line"><span style="color:#A6ACCD;">                ├── index.js</span></span>
<span class="line"><span style="color:#A6ACCD;">                └── package.json</span></span></code></pre></div><p>👆 <code>package.json</code> 中依赖了 foo，在 <code>node_modules/.npm/</code> 会把嵌套依赖也扁平化</p><p>These are the only &quot;real&quot; files in <code>node_modules</code>. Once all the packages are hard linked to <code>node_modules</code>, symbolic links are created to build the nested dependency graph structure.</p><p>As you might have noticed, both packages are hard linked into a subfolder inside a <code>node_modules</code> folder (<code>foo@1.0.0/node_modules/foo</code>). This is needed to:</p><ol><li><strong>allow packages to import themselves.</strong> <code>foo</code> should be able to <code>require(&#39;foo/package.json&#39;)</code> or <code>import * as package from &quot;foo/package.json&quot;</code>.</li><li><strong>avoid circular symlinks.</strong> Dependencies of packages are placed in the same folder in which the dependent packages are. For Node.js it doesn&#39;t make a difference whether dependencies are inside the package&#39;s <code>node_modules</code> or in any other <code>node_modules</code> in the parent directories.</li></ol><p>👆 扁平化出来的依赖，内部多一层 <code>node_modules/.npm/foo/node_modules</code> 这里存放依赖包, 为了实现 引用自身 和 构建树状依赖关系</p><p>The next stage of installation is symlinking dependencies. <code>bar</code> is going to be symlinked to the <code>foo@1.0.0/node_modules</code> folder: 👇</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">node_modules</span></span>
<span class="line"><span style="color:#A6ACCD;">└── .pnpm</span></span>
<span class="line"><span style="color:#A6ACCD;">    ├── bar@1.0.0</span></span>
<span class="line"><span style="color:#A6ACCD;">    │   └── node_modules</span></span>
<span class="line"><span style="color:#A6ACCD;">    │       └── bar -&gt; &lt;store&gt;/bar</span></span>
<span class="line"><span style="color:#A6ACCD;">    └── foo@1.0.0</span></span>
<span class="line"><span style="color:#A6ACCD;">        └── node_modules</span></span>
<span class="line"><span style="color:#A6ACCD;">            ├── foo -&gt; &lt;store&gt;/foo</span></span>
<span class="line"><span style="color:#A6ACCD;">            └── bar -&gt; ../../bar@1.0.0/node_modules/bar</span></span></code></pre></div><p>👆 <code>foo</code> 依赖 <code>bar</code>, 在 <code>foo</code> 子级中生成软连接到 扁平化的 <code>bar</code></p><p>Next, direct dependencies are handled. <code>foo</code> is going to be symlinked into the root <code>node_modules</code> folder because <code>foo</code> is a dependency of the project: 👇</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">node_modules</span></span>
<span class="line"><span style="color:#A6ACCD;">├── foo -&gt; ./.pnpm/foo@1.0.0/node_modules/foo</span></span>
<span class="line"><span style="color:#A6ACCD;">└── .pnpm</span></span>
<span class="line"><span style="color:#A6ACCD;">    ├── bar@1.0.0</span></span>
<span class="line"><span style="color:#A6ACCD;">    │   └── node_modules</span></span>
<span class="line"><span style="color:#A6ACCD;">    │       └── bar -&gt; &lt;store&gt;/bar</span></span>
<span class="line"><span style="color:#A6ACCD;">    └── foo@1.0.0</span></span>
<span class="line"><span style="color:#A6ACCD;">        └── node_modules</span></span>
<span class="line"><span style="color:#A6ACCD;">            ├── foo -&gt; &lt;store&gt;/foo</span></span>
<span class="line"><span style="color:#A6ACCD;">            └── bar -&gt; ../../bar@1.0.0/node_modules/bar</span></span></code></pre></div><p>👆 最终再把 <code>package.json</code> 直接依赖的包在外层 <code>node_modules</code> 创建软连接到 <code>/.pnpm</code></p><p>This is a very simple example. However, the layout will maintain this structure regardless of the number of dependencies and the depth of the dependency graph.</p><p>Let&#39;s add <code>qar@2.0.0</code> as a dependency of <code>bar</code> and <code>foo</code>. This is how the new structure will look: 👇</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">node_modules</span></span>
<span class="line"><span style="color:#A6ACCD;">├── foo -&gt; ./.pnpm/foo@1.0.0/node_modules/foo</span></span>
<span class="line"><span style="color:#A6ACCD;">└── .pnpm</span></span>
<span class="line"><span style="color:#A6ACCD;">    ├── bar@1.0.0</span></span>
<span class="line"><span style="color:#A6ACCD;">    │   └── node_modules</span></span>
<span class="line"><span style="color:#A6ACCD;">    │       ├── bar -&gt; &lt;store&gt;/bar</span></span>
<span class="line"><span style="color:#A6ACCD;">    │       └── qar -&gt; ../../qar@2.0.0/node_modules/qar</span></span>
<span class="line"><span style="color:#A6ACCD;">    ├── foo@1.0.0</span></span>
<span class="line"><span style="color:#A6ACCD;">    │   └── node_modules</span></span>
<span class="line"><span style="color:#A6ACCD;">    │       ├── foo -&gt; &lt;store&gt;/foo</span></span>
<span class="line"><span style="color:#A6ACCD;">    │       ├── bar -&gt; ../../bar@1.0.0/node_modules/bar</span></span>
<span class="line"><span style="color:#A6ACCD;">    │       └── qar -&gt; ../../qar@2.0.0/node_modules/qar</span></span>
<span class="line"><span style="color:#A6ACCD;">    └── qar@2.0.0</span></span>
<span class="line"><span style="color:#A6ACCD;">        └── node_modules</span></span>
<span class="line"><span style="color:#A6ACCD;">            └── qar -&gt; &lt;store&gt;/qar</span></span></code></pre></div><p>👆 而假设是 3级嵌套的依赖，会由<code>.npm/</code> 层的依赖构建关系，最终也只会由2级，而不会无限嵌套 ✨</p><p>As you may see, even though the graph is deeper now (<code>foo &gt; bar &gt; qar</code>), the directory depth in the file system is still the same.</p><p>This layout might look weird at first glance, but it is completely compatible with Node&#39;s module resolution algorithm! When resolving modules, Node ignores symlinks, so when <code>bar</code> is required from <code>foo@1.0.0/node_modules/foo/index.js</code>, Node does not use <code>bar</code> at <code>foo@1.0.0/node_modules/bar</code>, but instead, <code>bar</code> is resolved to its real location (<code>bar@1.0.0/node_modules/bar</code>). As a consequence, <code>bar</code> can also resolve its dependencies which are in <code>bar@1.0.0/node_modules</code>.</p><p>👆 看起会有点混乱，但其实完全符合 <code>nodejs</code> , 且能很好的就解决 <code>幽灵依赖</code> 和 <code>利用全局缓存</code> 等问题</p><p>A great bonus of this layout is that only packages that are really in the dependencies are accessible. With a flattened <code>node_modules</code> structure, all hoisted packages are accessible.</p><h3 id="pnpm-install-安装过程" tabindex="-1">pnpm install 安装过程 <a class="header-anchor" href="#pnpm-install-安装过程" aria-label="Permalink to &quot;pnpm install 安装过程&quot;">​</a></h3><p><code>pnpm install</code> 安装时会判断全局的 <code>store</code> 中是否已存在对应的依赖</p><ul><li>存在则在 <code>node_modules/.pnpm</code> 创建一个 <code>hard link</code></li><li>不存在则下载 并安装到 <code>store</code> 中, 项目中的 <code>node_modules/.pnpm</code> 依然创建的是一个 <code>hard link</code></li></ul><p>按照👆的说法, <code>node_modules/.pnpm</code> 内部应该全都是 <code>hard link</code></p><h3 id="pnpm-目录解决-幽灵依赖-问题" tabindex="-1"><code>/.pnpm/</code>目录解决 幽灵依赖 问题 <a class="header-anchor" href="#pnpm-目录解决-幽灵依赖-问题" aria-label="Permalink to &quot;\`/.pnpm/\`目录解决 幽灵依赖 问题&quot;">​</a></h3><p><code>node_modules</code> 外层(非 <code>.pnpm/</code> 目录下的依赖包), 只有 <code>package.json</code> 中依赖清单中对应的包</p><p>而 上面提到扁平化结构导致的 <code>幽灵依赖</code> 问题, 非 <code>package.json</code> 中的依赖在 <code>node_modules/.pnpm</code> 中才有, 在 <code>node_modules</code> 下没有</p><p>因此按照 <code>nodejs</code> 对 <code>bare module</code> 向上寻址是找不到依赖的, 项目内使用就会报错, 也就解决了 <code>幽灵依赖</code> 的问题</p><p>并且外层的 <code>package.json</code> 依赖包, 是 <code>soft link</code> 到 <code>node_modules/.pnpm</code>的对应依赖, 也就是外层和内层都有, 但是都是 <code>link</code></p><p>🤔 为什么不是 <code>hard link</code></p><h3 id="解决分身依赖问题" tabindex="-1">解决分身依赖问题 <a class="header-anchor" href="#解决分身依赖问题" aria-label="Permalink to &quot;解决分身依赖问题&quot;">​</a></h3><p>上面提到 <code>npm/yarn</code> 的依赖是不彻底的扁平化, 当依赖同名不同版本时, 会安装到各自依赖内部</p><p><code>pnpm</code> 安装的 <code>node_modules/.pnpm</code> 是嵌套结构, 连不彻底的扁平都不考虑</p><p><code>pnpm</code> 在外层 名称 不带版本</p><p>但是 <code>store</code> 以及 <code>node_modules/.pnpm</code> 中的依赖包名是带版本的</p><p>依赖同名(包括版本), 会安装到各自依赖内部, 这会是一个 <code>soft link</code> 直接取 <code>node_modules/.pnpm</code> 中的依赖( <code>hard link</code> 到 <code>store</code> )</p><p>✨ <strong>真实依赖文件全局只保存1份，项目依赖结构里的都是软硬连接</strong></p><p>这就解决了重复安装的问题</p><h3 id="更快的原因" tabindex="-1">更快的原因 <a class="header-anchor" href="#更快的原因" aria-label="Permalink to &quot;更快的原因&quot;">​</a></h3><ul><li><code>npm/yarn</code> 也在本地有缓存, 但是 <code>pnpm</code> 依然比他们快。是因为 <code>npm/yarn</code> 取到缓存,还需要解压并复制文件到项目内，而 <code>pnpm</code> 只用创建 <code>hard link</code></li><li>首次安装依赖 <code>pnpm</code> 也比 <code>npm/yarn</code> 快 则是因为 <code>pnpm</code> 可能有缓存嵌套依赖, 而 <code>npm/yarn</code> 缓存嵌套依赖的机制没有这么全面</li></ul><h3 id="包存储在了-store-中-为什么我的-node-modules-还是占用了磁盘空间" tabindex="-1">包存储在了 <code>store</code> 中，为什么我的 <code>node_modules</code> 还是占用了磁盘空间？ <a class="header-anchor" href="#包存储在了-store-中-为什么我的-node-modules-还是占用了磁盘空间" aria-label="Permalink to &quot;包存储在了 \`store\` 中，为什么我的  \`node_modules\`  还是占用了磁盘空间？&quot;">​</a></h3><p><code>pnpm</code> 创建从 <code>store</code> 到项目下 <code>node_modules</code> 文件夹的硬链接，但是硬链接本质还是和原始文件共享的是相同的 <code>inode</code></p><p>因此，它们二者其实是共享同一个空间的，看起来占用了 <code>node_modules</code> 的空间</p><p>所有始终只会占用一份空间，而不是两份</p><h3 id="pnpm不足之处" tabindex="-1">pnpm不足之处 <a class="header-anchor" href="#pnpm不足之处" aria-label="Permalink to &quot;pnpm不足之处&quot;">​</a></h3><ol><li>全局 <code>hardlink</code> 也会导致一些问题，比如改了 <code>link</code> 的代码，所有项目都受影响；对 <code>postinstall</code> 不友好；在 <code>postinstall</code> 里修改了代码，可能导致其他项目出问题</li></ol><blockquote><p>👆 pnpm 有考虑这种问题, 默认其实是 <a href="https://pnpm.io/npmrc#package-import-method" target="_blank" rel="noreferrer">clone(copy on write)</a> 而不是 <code>hard link</code>，但是 <code>clone</code> 的方式对 <code>mac</code> 没生效，因此 <code>fall back</code> 了 <code>hard link</code>, 文档中列出了这个属于 <code>Nodejs</code> 的 <code>bug</code>, 当这个问题被修复，以后都会是 <code>clone</code> 而不是 <code>hard-link</code></p></blockquote><ol start="2"><li>由于 <code>pnpm</code> 创建的 <code>node_modules</code> 依赖软链接，因此在不支持软链接的环境中，无法使用 <code>pnpm</code>，比如 <code>Electron</code> 应用</li></ol><h2 id="所有依赖安装到-dependencies-不区分dev会有什么问题" tabindex="-1">所有依赖安装到 dependencies 不区分dev会有什么问题？ <a class="header-anchor" href="#所有依赖安装到-dependencies-不区分dev会有什么问题" aria-label="Permalink to &quot;所有依赖安装到 dependencies 不区分dev会有什么问题？&quot;">​</a></h2><ul><li><code>dependencies</code> 项目依赖</li><li><code>devDependencies</code> 开发依赖</li><li><code>peerDependencies</code> 同版本的建议依赖</li><li><code>bundledDependencies</code> 捆绑依赖</li><li><code>optionalDependencies</code> 可选依赖</li></ul><p><code>dependencies</code> 表示项目依赖，这些依赖都会成为你的线上生产环境中的代码组成的部分。当 它关联到 <code>npm</code> 包被下载的时候, <code>dependencies</code> 下的模块也会作为依赖, 一起被下载。</p><p>实际上, 依赖是否是被打包,完全是取决你的项目里的是否是被引入了该模块</p><p>而 <code>devDependencies</code> 中的依赖一定不会被打包的</p><p>👇 得看项目</p><ul><li>如果是前端 <code>spa</code> 应用 或者一次性的 <code>ssg</code> 项目可以这样做</li><li>但是如果是发布为依赖库就需要特别注意到底依赖是 <code>devDependencies</code> 还是仅生产环境下的依赖 <code>dependencies</code></li></ul><h2 id="同时用npm和yarn会有什么问题" tabindex="-1">同时用npm和yarn会有什么问题？ <a class="header-anchor" href="#同时用npm和yarn会有什么问题" aria-label="Permalink to &quot;同时用npm和yarn会有什么问题？&quot;">​</a></h2><p>antfu 的 vitesse 需要通过包的锁文件去判断具体用到那个包管理器然后用这个包管理器去自动安装具体的图标集依赖</p><p>不同的包管理器的 网络机制 缓存机制 下载后的依赖分布 不同，如果特别依赖这些的项目也需要注意一下</p><p>主要是造成不同机器上同一项目的依赖版本不一致, 严重的是构建部署机安装的依赖和开发本地依赖不一致造成不可知的线上问题</p><h2 id="是否应该提交lockfiles到仓库-删除node-modules和lockfiles-重新install-是否有风险" tabindex="-1">是否应该提交lockfiles到仓库？ 删除node_modules和lockfiles，重新install，是否有风险？ <a class="header-anchor" href="#是否应该提交lockfiles到仓库-删除node-modules和lockfiles-重新install-是否有风险" aria-label="Permalink to &quot;是否应该提交lockfiles到仓库？ 删除node_modules和lockfiles，重新install，是否有风险？&quot;">​</a></h2><p>首先确定 <code>lockfiles</code> 的作用</p><ul><li><code>lockfiles</code> 用于保持依赖版本</li><li><code>lockfiles</code> 是依赖分析后的文件，有 <code>lockfiles</code> 就不用再做一次依赖分析，构建依赖树清单(扁平化), 提升一点速度</li></ul><p><code>package.json</code> 中的依赖清单即使限制具体版本，嵌套依赖依然没办法限制, 还是会出现过一段时间后, 重新安装的依赖跟以前不同(嵌套依赖升级了)</p><p>比对 <code>lockfiles</code> 和 <code>package.json</code> 的版本，一般都是落后于 <code>package.json</code> 才不一致(手动升级了某个依赖)</p><p>此时会判断 <code>lockfiles</code> 落后的版本在 <code>package.json</code> 那里是否兼容，兼容的话不按package.json的新版本依赖来安装, 依然取 <code>lockfiles</code> (比对之后会相应的更新lock中的版本)</p><p>👆 注意流程图中不同 npm 版本处理 lock 比对版本的处理不相同，因此不同电脑的 npm 应该尽量相同，避免 lock 比对过程，每个人安装的依赖版本不同(有些按照 lock 有些按照 package)</p><p>因此为了保证项目的长久稳定, 应该提交 lock 到仓库, 当需要升级某个依赖时, 更新 lock 及 <code>package.json</code> 提交</p><p>如果他人因为 npm 版本不同, 按照 lock 安装不了依赖</p><p>或按照 lock 成功安装了依赖, 但是运行项目时依赖报错, 此时可能是该依赖版本不兼容这个 nodejs 环境, 此时可以整个项目考虑兼容这个 nodejs 环境去对这个依赖升级或是降级,并提交调整后的 <code>package.json</code> 和 lock, 考虑不兼容这个 nodejs 环境的话, 就让对方换成可以运行的 <code>nodejs</code> 版本</p><h2 id="为什么-npm-i-后lockfiles变了" tabindex="-1">为什么 npm i 后lockfiles变了 <a class="header-anchor" href="#为什么-npm-i-后lockfiles变了" aria-label="Permalink to &quot;为什么 npm i 后lockfiles变了&quot;">​</a></h2><p>首先需要明确的是，<code>npm i</code> 会先比对 <code>lockfiles</code> 内的版本是否符合 <code>package.json</code> 如果符合的话是不会按照 <code>package.json</code> 自动更新依赖的</p><p>而 <code>lockfiles</code> 不符合 <code>package.json</code> 版本的情况一般是 <code>package.json</code> 版本定义更高了</p><blockquote><p>因为 <code>package.json</code> 版本定义的是最低版本，一般情况下自动生成的 <code>lockfiles</code> 都不会低于 <code>package.json</code></p></blockquote><p>手动改 <code>lockfiles</code> 的情况不多，手动改 <code>package.json</code> 反而会多点</p><ul><li>改低 <code>package.json</code> 的话， <code>lockfiles</code> 的依赖版本是符合的，此时安装会走 <code>lockfiles</code> 而不是 <code>package.json</code> 也就是想在已有 <code>lockfiles</code> 的情况下安装低版本依赖，需要删除 <code>lockfiles</code> 在安装</li><li>改高 <code>package.json</code> 的话， <code>lockfiles</code> 的依赖版本不符合，此时会按照 <code>package.json</code> 的版本查找远程库的最高版本进行安装</li></ul><p>也许你会说手动改 <code>package.json</code> 的情况也不多呀，都是 <code>npm i xx</code> 升级版本的，会自动更新 <code>package.json</code> 和 <code>lockfiles</code></p><p>但是假如此时提交代码，只提交 <code>package.json</code>，丢弃 <code>lockfiles</code>，出现的结果就和手动改高 <code>package.json</code> 的情况一致了</p><p>回到问题：为什么 <code>npm i</code> 后<code>lockfiles</code>变了</p><p>因为 <code>lockfiles</code> 和 <code>package.json</code> 不符合，<code>npm</code> 自动查找不符合的依赖在 <code>package.json</code> 版本定义的远程库的最新版本</p><p>为什么 <code>lockfiles</code> 和 <code>package.json</code> 不符合，就是有人 手动改了 <code>package.json</code> 或是 升级了依赖没有提交新的 <code>lockfiles</code></p><p>如何避免：👇</p><ul><li>只要升级依赖就同时提交 <code>package.json</code> 、 <code>lockfiles</code></li><li>理论上只要符合版本，都会走 <code>lockfiles</code> 不会出现不同的人本地依赖不一致问题，此时使用 <code>npm ci</code> 可以提升速度(只建议用于提升速度，而不是用于避免依赖走<code>package.json</code>)</li><li>如果使用 <code>npm i</code> 安装出现 <code>lockfiles</code> 变化，应检查变化项，并提交此 <code>lockfile</code> 上锁，让正确的 <code>lockfile</code> 控制版本，而不是按照落后的 <code>lockfile</code> 来 <code>npm ci</code></li></ul><h2 id="npm-ci" tabindex="-1">npm ci <a class="header-anchor" href="#npm-ci" aria-label="Permalink to &quot;npm ci&quot;">​</a></h2><p><a href="https://docs.npmjs.com/cli/v8/commands/npm-ci" target="_blank" rel="noreferrer">npm文档</a></p><p>官方称这种安装是 <code>clean install</code></p><blockquote><p>used in automated environments such as test platforms, continuous integration, and deployment</p><p>常用于自动化环境：测试平台、持续集成、部署环境</p></blockquote><blockquote><p>In short, the main differences between using npm install and npm ci are:</p><ul><li>The project must have an existing <code>package-lock.json</code> or <code>npm-shrinkwrap. json</code>.</li><li>If dependencies in the package lock do not match those in <code>package.json</code>, <code>npm ci</code> will exit with an error, instead of updating the package lock.</li><li><code>npm ci</code> can only install entire projects at a time: individual dependencies cannot be added with this command.</li><li>If a node_modules is already present, it will be automatically removed before <code>npm ci</code> begins its install.</li><li>It will never write to <code>package.json</code> or any of the package-locks: installs are essentially frozen.</li></ul></blockquote><p>如果仅仅从官方提供的区别来看：</p><p><code>npm ci</code> 也会先比对 <code>lockfiles</code> 内的版本是否符合 <code>package.json</code></p><ul><li>不符合就中断安装</li><li>符合就直接按照 <code>lockfiles</code> 安装依赖，不查询依赖远程库的版本是否更新</li></ul><p><code>npm ci</code> 在安装前会自动清除现存的 <code>node_modules</code>，所以 <code>npm ci</code> 天然规避了增量安装可能带来的不一致性等问题。（这也意味着，你又可以少记一条命令 npm prune。）</p><p>当想在已有 <code>node_modules</code> 情况下按照 <code>lockfiles</code> 安装依赖</p><p><code>npm ci</code> 意味着会重新安装所有依赖，速度可能会比 <code>npm i</code> 慢(从头从全局缓存解压或是网络下载) 但是为了不出问题，大家按照 <code>lockfiles</code> 安装依赖都是手动删除 <code>node_modules</code> 的... 不敢直接安装，所以 <code>npm ci</code> 反而是符合习惯的...</p><p>可以用 <code>--prefer-offline</code>，最大限度地利用 npm 的全局缓存加速安装过程</p><blockquote><p>注意：就像上面说的， <code>npm ci</code> 只建议用于提升速度，而不是用于避免依赖走<code>package.json</code></p><p>当出现 <code>npm ci</code> 不符合而中断安装时，应检查修复 <code>lockfiles</code> 版本问题, 并使用 <code>npm i</code> 自动生成正确的 <code>lockfiles</code> (不要手动改)</p></blockquote><h2 id="迁移-npm-to-pnpm" tabindex="-1">迁移 npm to pnpm <a class="header-anchor" href="#迁移-npm-to-pnpm" aria-label="Permalink to &quot;迁移 npm to pnpm&quot;">​</a></h2><p><a href="https://dev.to/andreychernykh/yarn-npm-to-pnpm-migration-guide-2n04" target="_blank" rel="noreferrer">How to migrate from yarn / npm to pnpm</a></p><ol><li>删除 <code>node_modules</code></li><li>直接执行 <code>pnpm i</code></li><li>执行 <code>pnpm dev</code>，看控制台报错，看哪个包缺失，再给补上到 <code>package.json</code></li></ol><p>👆 理论上换个 pnpm 重新安装依赖, 就可以启动项目了, 跟 npm 依赖完全无关了</p><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/20230310150818.png" alt=""></p><p>🤔 一些ts问题，为什么在pnpm环境下报错(npm环境不会)</p><p>还是幽灵依赖的问题，<code>@types/node</code> 在npm 环境会被其他依赖安装到 <code>node_modules/@types</code> 下 pnpm 则不会，因此需要手动提升到外部，这里虽然缺失的是 @types/node ，但是查看 tsconfig.ts 配置的 types 是 webpack-env</p><p>而 webpack-env 是基于 @types/node 的，因为按照真实ts配置安装 webpack-env</p><p><code>tslib</code> 同理</p><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/20230314102459.png" alt=""> vue2.7 ts报错 升级 typescript <code>pnpm up typescript --lastest</code></p><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/20230314114711.png" alt=""> 升级 husky <code>pnpm up husky --lastest</code></p><p>配置 preinstall 效果如下</p><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/20230318104521.png" alt=""></p><p>npm6 有效 npm 7+ 的 pre hook 在 install 后，一直未修复 issue</p><p>但是启动项目报错 包缺失, 并不是因为 pnpm 安装不到包, 而是因为 npm 允许直接使用 package.json 中没有的依赖(幽灵依赖), 在 pnpm 的依赖目录结构中是不允许的, 因此即使pnpm安装全了依赖, 也会报错 包缺失</p><p>此时，手动安装缺失的包, 自动补充到 package.json 中</p><p>问题：安装一个运行一次启动, 靠报错提示一个一个安装....</p><p>自动化工具思路：扫描项目代码中的引入语句, 找出 package.json 中没有的幽灵依赖, 一次性安装(工具难点在扫描效率)</p><p>参考 <a href="https://www.npmjs.com/package/@sugarat/ghost" target="_blank" rel="noreferrer">@sugarat/ghost</a></p><p>扫描使用 babel/swc ?</p><ol><li>扫文件；</li><li>提取导入资源路径；</li><li>提取包名；</li><li>剔除 package.json 中存在的</li><li>剩下的包名就是幽灵依赖</li></ol><p>使用 only-allow 限制包管理器</p><p>TODO: 迁移笔记 + 过一遍 pnpm 英文文档</p><h2 id="pnpm-使用-ci" tabindex="-1">pnpm 使用 ci <a class="header-anchor" href="#pnpm-使用-ci" aria-label="Permalink to &quot;pnpm 使用 ci&quot;">​</a></h2><p><code>pnpm</code> 没有 <code>ci</code> 指令</p><p>我们上面了解了 <code>ci</code> 的作用：在持续集成等环境按照 <code>lockfiles</code> 安装依赖，并且不符合时中断安装</p><p><a href="https://pnpm.io/cli/install#--frozen-lockfile" target="_blank" rel="noreferrer">pnpm i 官网文档</a> 提到 <code>pnpm</code> 内置 <a href="https://www.npmjs.com/package/is-ci" target="_blank" rel="noreferrer">is-ci</a> 判断当前环境是 <code>ci</code> 环境会设置 <code>--frozen-lockfile</code> 为 <code>true</code>，该选项就是 ci 的效果</p><blockquote><p>就像上面反复强调的， <code>npm ci</code> 不是用于避免依赖走 <code>package.json</code></p><p>使用 <code>pnpm</code> 也不应该存在 <code>lockfiles</code> 内依赖不符合 <code>package.json</code> 的情况，不应该想着我要按照 <code>lockfiles</code> 安装依赖，要知道只要 <code>lockfiles</code> 符合 <code>package.json</code> 就不会自动更新依赖！</p></blockquote><p>而提升速度的作用，在 <code>pnpm</code> 下并不会太明显</p><p>因此 <code>pnpm i</code> 足够了，不需要额外考虑</p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://juejin.cn/post/7060844948316225572" target="_blank" rel="noreferrer">字节的一个小问题 npm 和 yarn不一样吗？</a></li><li><a href="https://juejin.cn/post/7036319707590295565" target="_blank" rel="noreferrer">pnpm 解决我哪些痛点？</a></li><li><a href="https://mp.weixin.qq.com/s/9JCs3rCmVuGT3FvKxXMJwg" target="_blank" rel="noreferrer">聊聊依赖管理 - 字节前端 ByteFE</a></li><li><a href="https://pnpm.io/symlinked-node-modules-structure" target="_blank" rel="noreferrer">node_modules结构 - pnpm官方文档</a></li><li><a href="https://github.com/lvqq/blog/issues/60" target="_blank" rel="noreferrer">pnpm 原理解析</a></li></ul>`,171),l=[s];function d(p,i,t,r,m,u){return o(),n("div",null,l)}const g=e(a,[["render",d]]);export{k as __pageData,g as default};
