import{_ as a,o as l,c as t,V as o,k as e,a as s}from"./chunks/framework.b450deef.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"articles/03-架构/vite/imooc1vite使用.md","filePath":"articles/03-架构/vite/imooc1vite使用.md"}'),n={name:"articles/03-架构/vite/imooc1vite使用.md"},p=o(`<p><a href="https://vitejs.dev/" target="_blank" rel="noreferrer">vite官方文档</a> 移动的网络居然打不开，电信正常。。。 （据说已经从国外服务器部署到了gitee，感觉像是访问地址时没有重定向到国内服务器，多刷新几次就好了，为什么不把国内的域名地址公布出来，允许自己直接访问而不是靠重定向呢。。。）</p><p>概念：</p><ul><li><code>bundler-based build setup</code> - 基于打包器的构建方式</li><li><code>native ESM base build setup</code> - 基于原生ESM的构建方式: <code>rollup</code>、<code>parcel</code></li><li><code>improves DX</code> - <code>Developer Experience</code> 提高开发体验</li><li><code>bare module</code> - 裸模块 非路径式的 <code>import</code> 如 <code>node_modules</code></li><li><code>Rebasing</code> - 变基 猜测是指自动拼接相对路径的 <code>baseUrl</code></li></ul><h2 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h2><p><a href="https://vitejs.dev/guide/why.html" target="_blank" rel="noreferrer">vite官方文档-why vite</a></p><blockquote><p>Vite aims to address these issues by leveraging new advancements in the ecosystem: the availability of native ES modules in the browser, and the rise of JavaScript tools written in compile-to-native languages.</p><p>Vite 旨在解决上述问题通过利用生态系统中的新进展：原生ES模块在浏览器上可用的，和越来越多 JavaScript 工具使用编译型语言编写</p><p>👆 重点在于使用 <strong>原生ESM模块化</strong>、<strong>编译型语言工具Rust</strong></p></blockquote><p><a href="./../设计/打包工具的思考.html">打包工具的思考</a></p><h3 id="解决-slow-server-start" tabindex="-1">解决 Slow Server Start <a class="header-anchor" href="#解决-slow-server-start" aria-label="Permalink to &quot;解决 Slow Server Start&quot;">​</a></h3><blockquote><p>Vite improves the dev server start time by first dividing the modules in an application into two categories: dependencies and source code.</p><p>Vite 改进了开发服务器启动时间，通过在一开始将应用中的模块区分为两类: 依赖 和 源码</p></blockquote><ul><li><p><code>Dependencies</code>: plain JavaScript that do not change often during development.</p><ul><li>large dependencies (e.g. component libraries with <code>hundreds of modules</code> or like lodash-es)</li><li>various module <code>formats</code> (e.g. ESM or CommonJS).</li><li>Vite <code>pre-bundles</code> dependencies using <code>esbuild</code>. esbuild is written in Go and pre-bundles dependencies 10-100x faster than JavaScript-based bundlers.</li></ul></li><li><p><code>Source code</code>: <code>non-plain</code> JavaScript</p><ul><li>needs <code>transforming</code> (e.g. JSX, CSS or Vue/Svelte components)</li><li>will be <code>edited very often</code></li><li>not all source code needs to be <code>loaded at the same time</code> (e.g. with route-based code-splitting).</li><li>Vite serves source code over <code>native ESM</code>. This is essentially letting the <code>browser take over part of the job of a bundler</code>: Vite only needs to transform and serve source code on demand, as the browser requests it. Code behind conditional dynamic imports is only processed if actually used on the current screen.</li></ul></li><li><p>依赖: 纯js，不经常改动</p><ul><li>可能内部依赖大量模块(lodash-es、components libraries)</li><li>可能是多种格式 CJS、ESM、UMD</li><li>解决启动慢：vite 预编译这些依赖通过esbuild</li></ul></li><li><p>源码: 非纯js，经常改动</p><ul><li>需要转译 JSX、CSS、VUE/Svelte、TS</li><li>不需要全部加载</li><li>解决启动慢：vite 基于原生ESM，相当于让浏览器接管打包程序的部分工作(模块化),vite只转译和按需提供源码</li></ul></li></ul><h3 id="解决-slow-updates" tabindex="-1">解决 Slow Updates <a class="header-anchor" href="#解决-slow-updates" aria-label="Permalink to &quot;解决 Slow Updates&quot;">​</a></h3><blockquote><p>runs the bundling in memory so that it only needs to invalidate part of its module graph when a file changes,</p><p>👆 有缓存功能的打包器构建方式，通过缓存打包结果来提升速度，只在文件更改时使模块图的一部分失活</p></blockquote><p>没HMR时：</p><ul><li>re-construct the entire bundle and reload the web page 仍然需要从头运行运行构建流程(有缓存时会跳过)</li><li>reloading the page blows away the current state of the application 重载模块图相关部分，会丢失js状态</li></ul><p>有HMR后：</p><blockquote><p>in practice we&#39;ve found that even HMR update speed deteriorates significantly as the size of the application grows.</p><p>👆 没有具体说明，大型应用 <code>bundle-base build setup</code> 有HMR后依然慢的原因TODO:</p></blockquote><p>Vite，HMR 是在原生 ESM 上执行的 当编辑一个文件时，Vite 只需要精确地使已编辑的模块与其最近的 HMR 边界之间的链失活（大多数时候只是模块本身） 使得无论应用大小如何，HMR 始终能保持快速更新</p><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/20230102131910.png" alt=""></p><h3 id="生产环境仍然用-bundel-base-build" tabindex="-1">生产环境仍然用 bundel-base build <a class="header-anchor" href="#生产环境仍然用-bundel-base-build" aria-label="Permalink to &quot;生产环境仍然用 bundel-base build&quot;">​</a></h3><blockquote><p>the additional network round trips caused by nested imports</p><p>👆 生产环境如果是用ESM build，嵌套导入会导致额外的网络往返</p></blockquote><blockquote><p>esbuild important features needed for bundling applications are still work in progress - like code-splitting and CSS handling.</p><p>👆 不使用 esbuild 进行 bundle-base build的原因: esbuild 针对构建应用的重要功能仍然还在持续开发中 - 代码分割和 CSS 处理</p></blockquote><h3 id="思考" tabindex="-1">思考 <a class="header-anchor" href="#思考" aria-label="Permalink to &quot;思考&quot;">​</a></h3><ul><li>不需要像 <code>webpack</code> 那么多配置项 <ul><li>🤔只是因为都内置成默认配置而已吧</li><li>和 <code>webpack</code> 比较不是合理的，因为vite打包是基于rollup的，并不是提供一套新的打包工具</li><li>更合理的是和脚手架工具比较如: <code>vue-cli</code>、<code>create-react-app</code></li><li>这些工具同样不需要很多配置项而是内置成默认配置</li><li><code>vue-cli</code> 通过 <code>configureWebpack</code> 和 <code>chainWebpack</code> 修改默认配置</li><li><code>create-react-app</code> 通过 <code>eject</code> 修改默认配置</li></ul></li></ul><h2 id="功能" tabindex="-1">功能 <a class="header-anchor" href="#功能" aria-label="Permalink to &quot;功能&quot;">​</a></h2><p><a href="https://vitejs.dev/guide/features.html" target="_blank" rel="noreferrer">vite官方文档-features</a></p><h3 id="支持-bare-module-import" tabindex="-1">支持 bare module import <a class="header-anchor" href="#支持-bare-module-import" aria-label="Permalink to &quot;支持 bare module import&quot;">​</a></h3><p>浏览器原生ESM不支持 <code>bare module</code> 引入(原生ESM其实可以靠 <code>importMap</code> 支持)</p><p>因此需要 <code>ViteDevServer</code>，拦截到相关的路径引入，转化为绝对路径</p><blockquote><p>Rewrite the imports to valid URLs like <code>/node_modules/.vite/deps/my-dep.js?v=f3sf2ebd</code></p></blockquote><p>👆 可以看到转化的路径带了<code>hash</code>，配合 <code>http强缓存</code>，可以缓存到浏览器而不经过 <code>ViteDevServer</code></p><p>另外这个步骤同时会有预构建的处理(<code>esbuild</code>转化<code>CJS</code>等)，后补完整处理逻辑 TODO:</p><h3 id="hmr" tabindex="-1">HMR <a class="header-anchor" href="#hmr" aria-label="Permalink to &quot;HMR&quot;">​</a></h3><blockquote><p>Frameworks with HMR capabilities can leverage the API to provide instant, precise updates without reloading the page or blowing away application state</p><p>👆 具有HMR能力的框架，可以利用Vite的API来提供实时的，精确的更新，而无需重载页面后者清除应用状态</p></blockquote><p>源码分析部分讲解 Vite并不提供HMR功能，而是提供一套通用的HMR API，由插件根据不同框架以及框架自身来实现相应的HMR</p><h3 id="ts" tabindex="-1">TS <a class="header-anchor" href="#ts" aria-label="Permalink to &quot;TS&quot;">​</a></h3><h4 id="默认不做类型校验-可以另外配置开启" tabindex="-1">默认不做类型校验，可以另外配置开启 <a class="header-anchor" href="#默认不做类型校验-可以另外配置开启" aria-label="Permalink to &quot;默认不做类型校验，可以另外配置开启&quot;">​</a></h4><blockquote><p>Vite only performs transpilation on .ts files and does NOT perform type checking.</p><p>👆 vite默认支持ts转译，但是不会执行类型检查</p></blockquote><blockquote><p>It assumes type checking is taken care of by your IDE and build process (you can run <code>tsc --noEmit</code> in the build script or <code>install vue-tsc</code> and run<code> vue-tsc --noEmit</code> to also type check your *.vue files).</p><p>👆 vite假定类型检查已经通过编辑器和打包过程处理好了，打包过程处理的话，需要手动配置执行 <code>tsc --noEmit</code> 另外.vue文件需要安装vue-tsc并执行<code>vue-tsc --noEmit</code></p></blockquote><p>ts转译使用了<code>esbuild</code>，除了<code>first init项目</code>速度快，在<code>HMR</code>时也快</p><h4 id="仅含类型的import被不正确的打包-问题-todo-p2-6" tabindex="-1">[仅含类型的import被不正确的打包]问题 TODO: p2-6 <a class="header-anchor" href="#仅含类型的import被不正确的打包-问题-todo-p2-6" aria-label="Permalink to &quot;[仅含类型的import被不正确的打包]问题 TODO: p2-6&quot;">​</a></h4><blockquote><p>avoid potential problems: <code>type-only imports being incorrectly bundled</code> 避免潜在的问题：<code>仅含类型的import被不正确的打包</code></p></blockquote><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">T</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">only/types</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">T</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span></code></pre></div><p>Use the Type-Only Imports and Export syntax</p><p>🤔 TODO: why type-only imports will error in being incorrectly bundled</p><h4 id="ts配置要求-create-vite-问答选中ts时会自动生成-todo-p2-6" tabindex="-1">TS配置要求(create-vite 问答选中ts时会自动生成) TODO: p2-6 <a class="header-anchor" href="#ts配置要求-create-vite-问答选中ts时会自动生成-todo-p2-6" aria-label="Permalink to &quot;TS配置要求(create-vite 问答选中ts时会自动生成) TODO: p2-6&quot;">​</a></h4><p>这里并不是讲解生成的<code>tsconfig</code>的每一项的含义(会在create-vite原理中讲解TODO:)</p><p>而是讲解一个vite项目支持ts的强制要求的配置项</p><ul><li><code>isolatedModules</code>: true <ul><li>because <code>esbuild</code> only performs transpilation without <code>type information</code> 🤔 什么是type information？？？</li><li>it doesn&#39;t support certain features like <code>const enum</code> and <code>implicit type-only imports</code> 🤔 什么是隐式纯类型引入</li><li>set true for TS warn you do not work with isolated transpilation. 设置来让TS警告不要使用isolated隔离转译功能 🤔 什么是isolated transpilation</li><li>然而，一些库（如：vue）不能很好地与 &quot;isolatedModules&quot;: true 共同工作。你可以在上游仓库修复好之前暂时使用 &quot;skipLibCheck&quot;: true 来缓解这个错误。🤔 什么是上游仓库 修好什么</li></ul></li><li><code>useDefineForClassFields</code>: true <ul><li>It is consistent with the behavior of tsc 4.3.2 and later. It is also the standard ECMAScript runtime behavior.</li><li>🤔 约定俗成？具体是什么</li></ul></li></ul><h4 id="vite-client-提供业务代码api的types" tabindex="-1">vite/client 提供业务代码API的types <a class="header-anchor" href="#vite-client-提供业务代码api的types" aria-label="Permalink to &quot;vite/client 提供业务代码API的types&quot;">​</a></h4><blockquote><p>Vite&#39;s default types are for its <code>Node.js API</code> 👆 Vite是nodejs环境的构建工具，因此vite默认提供的types都是给构建脚本使用的</p><p>To shim the environment of <code>client side code</code> in a Vite application 👆 但是Vite同时也提供了一些业务代码的API(<code>i<wbr>mport.meta.env</code>、<code>i<wbr>mport.meta.hot</code>、<code>.svg</code>)，这些API的types需要手动导入</p></blockquote><p>导入这些API的types方式有2种</p><ul><li>新建<code>env.d.ts</code>文件 <ul><li><code>/// &lt;reference types=&quot;vite/client&quot; /&gt;</code></li><li>在这一行前写类型声明可以覆盖 <code>declare module &#39;*.svg&#39; {}</code></li><li>在这一行后写类型声明可以扩展</li></ul></li><li><code>tsconfig.json</code>配置项 <ul><li><code>&quot;compilerOptions&quot;: { &quot;types&quot;: [&quot;vite/client&quot;] }</code></li></ul></li></ul><p>🤔 TODO: <code>vite/client</code> 内部怎么定义类型,给外部使用的</p><h3 id="jsx-tsx" tabindex="-1">JSX/TSX <a class="header-anchor" href="#jsx-tsx" aria-label="Permalink to &quot;JSX/TSX&quot;">​</a></h3><p>首先 <code>JSX/TSX</code> 语法是 <code>React</code> 创建的，所以纯的JSX语法是按照React的需要而定义的 也就不会有vue的模版语法功能(指令、指令、全局组件等) 所以vue需要额外的扩展 <code>vue-jsx</code></p><p>vite内置提供 <code>JSX/TSX</code> 编译通过 <code>esbuild</code>，因此react不需要额外安装jsx相关插件，而vue则需要安装<code>@vitejs/plugin-jsx</code></p><blockquote><p>If not using JSX with React or Vue, custom jsxFactory and jsxFragment can be configured using the esbuild option. For example for Preact:</p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// vite.config.js</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">defineConfig</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vite</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineConfig</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">esbuild</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">jsxFactory</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">h</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">jsxFragment</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Fragment</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><p>👆 vite基于 <code>esbuild</code> 来编译 <code>jsx</code>，因此如果需要<code>非react和非vue</code>，其他jsx语法，则可以配置<a href="https://esbuild.github.io/content-types/#jsx" target="_blank" rel="noreferrer">esbuild相关配置</a>来支持，包括一些额外的jsx编译功能</p><h3 id="css" tabindex="-1">CSS <a class="header-anchor" href="#css" aria-label="Permalink to &quot;CSS&quot;">​</a></h3><p>在 <code>webpack</code> 中需要</p><ul><li><code>style-loader</code>: 把处理后的css文件内容插入到<code>html</code>的<code>head</code>中</li><li><code>css-loader</code>: 处理css中的模块化,如<code>背景图</code>和<code>@import css</code>的操作</li><li><code>postcss-loader</code>: 类似 <code>babel</code> 对 <code>js</code> 的作用,通过给样式属性添加前缀来<strong>兼容</strong>各种高低版本的浏览器</li></ul><h4 id="style-loader" tabindex="-1">style-loader <a class="header-anchor" href="#style-loader" aria-label="Permalink to &quot;style-loader&quot;">​</a></h4><p><code>viteDevServer</code> 内置处理 inject css content to the html via a <code>&lt;style&gt;</code> tag with HMR support</p><p>👆 也就是 <code>vite</code> 遇到css请求，回转化为js，其中的逻辑是插入css到html中</p><p>相当于内置了 webpack 的 <code>style-loader</code></p><h4 id="css-loader" tabindex="-1">css-loader <a class="header-anchor" href="#css-loader" aria-label="Permalink to &quot;css-loader&quot;">​</a></h4><p>而 处理css中url的 <code>css-loader</code>，则内置为默认配置</p><blockquote><p>pre-configured to support CSS <code>@import</code> inlining via <code>postcss-import</code>. Vite aliases are also respected for CSS <code>@import</code></p><p>👆 以前仅用于兼容浏览器添加css前缀的 postcss，现在还提供很多其他转译功能如 <code>postcss-import</code> 就提供了 <code>css-loader</code> 的功能</p><p>关于<code>postcss-import</code> 配置则由vite设置成了默认配置，并且支持vite配置中的路径别名如 <code>@</code></p></blockquote><blockquote><p>all CSS url() references, even if the imported files are in different directories, are always automatically rebased to ensure correctness.</p><p>css 中的 <code>url()</code> 语法同样的处理，并且额外提供自动变基功能，即使不在根目录的路径也能被处理成功</p><p>🤔 不自动变基的话，不在根路径下的目录就引入不到了吗？需要额外做什么？</p></blockquote><h4 id="postcss-loader" tabindex="-1">postcss-loader <a class="header-anchor" href="#postcss-loader" aria-label="Permalink to &quot;postcss-loader&quot;">​</a></h4><p>Vite内置了读取<a href="https://github.com/postcss/postcss-load-config" target="_blank" rel="noreferrer">postcss配置文件</a>的逻辑，无需手动配置开启postcss，只需要在项目根路径创建相关配置文件即可 如 <code>postcss.config.js</code> <code>.postcssrc</code></p><p>🤔 css压缩会发生在dev阶段吗？会的话这个内置逻辑是通过什么实现的？</p><h4 id="css-modules" tabindex="-1">CSS Modules <a class="header-anchor" href="#css-modules" aria-label="Permalink to &quot;CSS Modules&quot;">​</a></h4><p>内置支持 <code>xx.module.css</code> 引入，通过 <a href="https://github.com/css-modules/css-modules" target="_blank" rel="noreferrer">css-modules github</a>这个库实现</p><p>把css文件内容转化成类似json的对象数据 🤔 TODO: 不太了解这种写法的作用</p><p>看起来是为了提供复用样式，webpack的 <code>postcss</code> 使用过给所有的css全局注入公共样式，当时是建议只注入变量而不使用className的</p><p>但是使用起来是，要js引入再作用于html，并不方便吧</p><p>为了复用样式，写成全局样式其实也不会造成很多浪费吧</p><p>同样可以通过配置<code>vite.config.js</code>对相关功能进行配置如</p><p><code>css.modules.localsConvention: &#39;camelCaseOnly&#39;</code> 可以实现驼峰命名方式获取css中的<code>xx-xx</code>形式的样式</p><h4 id="css-预处理器" tabindex="-1">CSS 预处理器 <a class="header-anchor" href="#css-预处理器" aria-label="Permalink to &quot;CSS 预处理器&quot;">​</a></h4><blockquote><p>Because Vite targets modern browsers only, it is recommended to use native CSS variables with PostCSS plugins that implement CSSWG drafts (e.g. <a href="https://github.com/csstools/postcss-plugins/tree/main/plugins/postcss-nesting" target="_blank" rel="noreferrer">postcss-nesting</a>) and author plain, future-standards-compliant CSS.</p></blockquote><p>目前有草案css支持嵌套写法，而postcss其实类似于css中的babel，提前支持草案语法因此可以引入并配置支持</p><p>但是草案还是有大改的可能</p><h3 id="static-assets" tabindex="-1">Static Assets <a class="header-anchor" href="#static-assets" aria-label="Permalink to &quot;Static Assets&quot;">​</a></h3><p>相当于 <code>webpack</code> 的 <code>file-loader</code>，处理如图片、字体、svg等资源引入在js的使用</p><p>图片、字体、svg等资源路径，按照标准仅支持写在特定的地方，如 <code>img标签中的src</code>，而不支持用import引入作为js逻辑使用</p><p>因此在构建工具中就要对这些内容做支持</p><p>🤔 TODO: Vite文档没有解释用什么实现的,找到内置逻辑在源码分析中讲解</p><p>原理：是 <code>viteDevServer</code> 拦截请求，转为正确的本地服务静态资源路径，在业务代码中需要正确的使用 <code>import</code> 返回的路径</p><ul><li>假设 <code>import</code> 一个图片，则要把返回的变量放到 <code>img</code> 标签中</li><li>假设 <code>import</code> 一个svg，则要把 <code>svg:raw</code> 的 <code>html</code> 内容渲染, 不能单单用路径</li></ul><p>另外Vite提供了url query params的方式修改js import 的资源内容</p><ul><li>url</li><li>raw</li><li>worker - worker是js，但是每次引入都需要写很多重复的初始化worker的内容，Vite做的是自动初始化好Worker实例</li><li>...</li></ul><h3 id="json" tabindex="-1">JSON <a class="header-anchor" href="#json" aria-label="Permalink to &quot;JSON&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// import the entire object</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> json </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./example.json</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// import a root field as named exports - helps with tree-shaking!</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">field</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./example.json</span><span style="color:#89DDFF;">&#39;</span></span></code></pre></div><p>👆 TODO: 同样没有讲解怎么把json转译成js对象，并支持 tree-shaking</p><h3 id="glob-import" tabindex="-1">Glob Import <a class="header-anchor" href="#glob-import" aria-label="Permalink to &quot;Glob Import&quot;">​</a></h3><p><a href="https://vitejs.dev/guide/features.html#glob-import" target="_blank" rel="noreferrer">vite官方文档-Glob</a></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> modules </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">meta</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">glob</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/*.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 👇 编译后  code produced by vite</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> modules </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">./dir/foo.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/foo.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">./dir/bar.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/bar.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>因此使用该API返回到的 <code>modules</code> 是一个对象, 需要遍历对象或通过 <code>路径key</code> 取出</p><p>取出的 <code>value</code> 是一个函数执行 <code>import()</code> ，因此取到value需要执行一下 <code>value()</code></p><p>关于这个工具方法的其他参数不一一讲解,需要时查看文档</p><blockquote><ul><li>This is a Vite-only feature and is not a web or ES standard.</li><li>The glob patterns are treated like import specifiers: they must be either relative (start with ./) or absolute (start with /, resolved relative to project root) or an alias path (see resolve.alias option).</li><li>The glob matching is done via fast-glob - check out its documentation for supported glob patterns.</li><li>You should also be aware that all the arguments in the i<wbr>mport.meta.glob must be passed as literals. You can NOT use variables or expressions in them.</li></ul><p>👆 <code>i<wbr>mport.meta.glob()</code> 是vite内置逻辑往 <code>i<wbr>mport.meta</code> 对象上挂载的自定义函数，不是JS官方API</p><p>Glob 模式会被当成导入标识符：必须是相对路径（以 ./ 开头）或绝对路径（以 / 开头，相对于项目根目录解析）或一个别名路径</p><p>🤔 什么叫当成导入标识符，所以要写路径</p><p>基于 <a href="https://github.com/mrmlnc/fast-glob" target="_blank" rel="noreferrer">fast-glob</a></p><p>如👆的code🌰中，glob方法发生在构建工具编译时，而不是运行时，因此不能写变量，感觉可以优化成支持常量的变量</p></blockquote><p>和 Webpack 中的 <code>modules.resolve</code> 类似，发生在编译时 TODO: 运行时存不存在这个 API？</p><h3 id="webassenbly" tabindex="-1">WebAssenbly <a class="header-anchor" href="#webassenbly" aria-label="Permalink to &quot;WebAssenbly&quot;">​</a></h3><p><a href="https://vitejs.dev/guide/features.html#webassembly" target="_blank" rel="noreferrer">vite官方文档-wasm</a></p><p>因为没有具体使用过，因此先略过</p><p>vite会提供初始化实例的代码包装成一个未执行的Promise函数 省去自己写初始化的重复代码</p><h3 id="web-workers" tabindex="-1">Web Workers <a class="header-anchor" href="#web-workers" aria-label="Permalink to &quot;Web Workers&quot;">​</a></h3><p>同 WebAssenbly</p><h3 id="build-optimizations" tabindex="-1">Build Optimizations <a class="header-anchor" href="#build-optimizations" aria-label="Permalink to &quot;Build Optimizations&quot;">​</a></h3><p>指 生产环境的打包优化，都基于rollup内置成默认配置了</p><h4 id="async-chunk-css-code-splitting" tabindex="-1">Async Chunk CSS Code Splitting <a class="header-anchor" href="#async-chunk-css-code-splitting" aria-label="Permalink to &quot;Async Chunk CSS Code Splitting&quot;">​</a></h4><p>默认把Async Chunk 中引入的CSS，也分割成单独的css文件，通过 JS用<code>&lt;link&gt;</code>插入html (如懒加载的路由)</p><p>非懒加载的css都打成1个css吧</p><h4 id="js-分割" tabindex="-1">js 分割 <a class="header-anchor" href="#js-分割" aria-label="Permalink to &quot;js 分割&quot;">​</a></h4><p>rollup对js重复逻辑提取到 <code>common.js</code> 中</p><p>这时候的请求顺序是 👇</p><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/20230103130912.png" alt=""></p><p>需要等异步chunk加载并解析完成，才开始请求 common.js</p><p>🤔 但是 common.js 一般会在入口js的时候就依赖到并加载了吧</p><p>Vite 通过一个预加载步骤自动重写代码，来分割动态导入调用，以实现当 A 被请求时，C 也将 同时 被请求</p><p>common.js 也可能有更深的导入，在未优化的场景中，这会导致更多的网络往返。Vite 的优化会跟踪所有的直接导入，无论导入的深度如何，都能够完全消除不必要的往返</p><p>🤔 TODO: 什么原理</p><h4 id="modulepreload" tabindex="-1">modulepreload <a class="header-anchor" href="#modulepreload" aria-label="Permalink to &quot;modulepreload&quot;">​</a></h4><p>Vite 会为入口 <code>chunk</code> 和它们在打包出的 <code>HTML</code> 中的直接引入自动生成 <code>&lt;link rel=&quot;modulepreload&quot;&gt;</code> 指令。</p><p>🤔 什么原理？处理的是什么场景</p><ul><li><a href="https://zhuanlan.zhihu.com/p/388537104" target="_blank" rel="noreferrer">翻译篇 - ES 模块预加载和完整性</a></li><li><a href="https://philipwalton.com/articles/using-native-javascript-modules-in-production-today/" target="_blank" rel="noreferrer">Using Native JavaScript Modules in Production Today</a></li><li><a href="https://mp.weixin.qq.com/s/uf88myQov-t7rDqbMkF5EQ" target="_blank" rel="noreferrer">JavaScript的未来是模块化？-中文</a></li></ul><p>通过打包工具生成入口文件的所有依赖文件清单，设置到 <code>modulepreload</code> 可以立即请求并在主线程外进行解析</p><p>但是兼容性不好，此时也可以考虑判断兼容性，让支持的浏览器用，不支持的则按照传统资源方式加载</p><h2 id="环境变量-env" tabindex="-1">环境变量 env <a class="header-anchor" href="#环境变量-env" aria-label="Permalink to &quot;环境变量 env&quot;">​</a></h2><p><a href="https://vitejs.dev/guide/env-and-mode.html" target="_blank" rel="noreferrer">vite官方文档-env and mode</a></p><p>全局变量挂载在 <code>i<wbr>mport.meta.env</code> 对象上 经过编译后，运行时访问对象上的属性，会被编译成常量而不是一个变量读取，因此不能写key不能写成变量<code>i<wbr>mport.meta.env[key]</code> 即，运行时不存在 <code>i<wbr>mport.meta.env</code> 对象</p><h3 id="build-in-内置环境变量" tabindex="-1">build-in 内置环境变量 <a class="header-anchor" href="#build-in-内置环境变量" aria-label="Permalink to &quot;build-in 内置环境变量&quot;">​</a></h3>`,135),c=e("ul",null,[e("li",{string:""},[e("code",null,[s("i"),e("wbr"),s("mport.meta.env.MODE")])]),e("li",{string:""},[e("code",null,[s("i"),e("wbr"),s("mport.meta.env.BASE_URL")])]),e("li",{boolean:""},[e("code",null,[s("i"),e("wbr"),s("mport.meta.env.PROD")])]),e("li",{boolean:""},[e("code",null,[s("i"),e("wbr"),s("mport.meta.env.DEV")])]),e("li",{boolean:""},[e("code",null,[s("i"),e("wbr"),s("mport.meta.env.SSR")])]),e("li",null,"👆 根据运行构建脚本时相关配置自动生成对应的值")],-1),r=o(`<h3 id="自定义环境变量" tabindex="-1">自定义环境变量 <a class="header-anchor" href="#自定义环境变量" aria-label="Permalink to &quot;自定义环境变量&quot;">​</a></h3><p>自动读取 <code>.env.[i<wbr>mport.meta.env.MODE]</code> 文件 - 🤔 这种方式很常见，大家是都用一个底层库来实现吗？</p><blockquote><p><a href="https://github.com/motdotla/dotenv" target="_blank" rel="noreferrer">dotenv - github</a> is a zero-dependency module that loads environment variables from a .env file into p<wbr>rocess.env. Storing configuration in the environment separate from code is based on The <a href="http://12factor.net/config" target="_blank" rel="noreferrer">Twelve-Factor App</a> methodology.</p></blockquote><p><code>.ignoregit</code>文件中配置了<code>*.local</code> 因此👇</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">.env</span><span style="color:#A6ACCD;">                </span><span style="color:#676E95;font-style:italic;"># loaded in all cases</span></span>
<span class="line"><span style="color:#FFCB6B;">.env.local</span><span style="color:#A6ACCD;">          </span><span style="color:#676E95;font-style:italic;"># loaded in all cases, ignored by git</span></span>
<span class="line"><span style="color:#FFCB6B;">.env.[mode]</span><span style="color:#A6ACCD;">         </span><span style="color:#676E95;font-style:italic;"># only loaded in specified mode</span></span>
<span class="line"><span style="color:#FFCB6B;">.env.[mode].local</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;"># only loaded in specified mode, ignored by git</span></span></code></pre></div><h3 id="环境变量支持ts" tabindex="-1">环境变量支持ts <a class="header-anchor" href="#环境变量支持ts" aria-label="Permalink to &quot;环境变量支持ts&quot;">​</a></h3><p>可以在 <code>env.d.ts</code> 里配置 <code>i<wbr>mport.meta.env</code> 的属性类型</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">/// </span><span style="color:#89DDFF;font-style:italic;">&lt;</span><span style="color:#F07178;font-style:italic;">reference</span><span style="color:#89DDFF;font-style:italic;"> </span><span style="color:#C792EA;font-style:italic;">types</span><span style="color:#89DDFF;font-style:italic;">=</span><span style="color:#89DDFF;font-style:italic;">&quot;</span><span style="color:#C3E88D;font-style:italic;">vite/client</span><span style="color:#89DDFF;font-style:italic;">&quot;</span><span style="color:#89DDFF;font-style:italic;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ImportMetaEnv</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">readonly</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">VITE_APP_TITLE</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// more env variables...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ImportMeta</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">readonly</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">env</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ImportMetaEnv</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="覆盖模式mode相关环境变量" tabindex="-1">覆盖模式mode相关环境变量 <a class="header-anchor" href="#覆盖模式mode相关环境变量" aria-label="Permalink to &quot;覆盖模式mode相关环境变量&quot;">​</a></h3><p>development/production 除了用于控制不同的环境变量，还用于控制不同的打包流程</p><ul><li>dev 对应环境变量 i<wbr>mport.meta.env.MODE = development</li><li>build 对应环境变量 i<wbr>mport.meta.env.MODE = production</li></ul><p>当build的时候希望打成其他的环境变量而不是production <code>vite build --mode xxx</code> 读取的是 <code>.env.xxx</code>文件</p><p>当希望多个测试环境用不同的变量但是用同一种打包模式</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># .env.testing</span></span>
<span class="line"><span style="color:#A6ACCD;">NODE_ENV</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">development</span></span></code></pre></div><p>👆 非 <code>development/production</code> 模式时都要手动指定一下 <code>NODE_ENV</code> 用于打包流程</p><p>这个定义的是 <code>VITE_USER_NODE_ENV</code> 变量 而不是 <code>NODE_ENV</code></p><hr><p>🤔 <code>NODE_ENV</code> 的值只能由构建指令： <code>vite</code>、<code>vite build</code> 决定？</p><p><code>NODE_ENV</code> 的值确实由 构建指令决定，但是对 <code>Vite</code> 来说env中自定义的 <code>VITE_USER_NODE_ENV</code> 优先级会更高</p><p>即: 当指令是 <code>build</code> 但是 <code>VITE_USER_NODE_ENV</code> 是 <code>development</code> 时 <code>Vite</code> 的构建逻辑将是 <code>dev</code> 而不是 <code>build</code> (可能只要有值且非 <code>production</code> 就会是 <code>dev</code>)</p><p>也就是自定义 <code>NODE_ENV=prod</code> 对于 Vite 来说就是提供 <code>development</code> 的构建方式</p><hr><p><code>NODE_ENV</code> 的作用？ <code>Vite</code> 内部逻辑才会使用到？并且内部先取了 <code>VITE_USER_NODE_ENV</code> 空时才取 <code>NODE_ENV</code> ？</p><p>👆 也就是，如果业务代码中希望使用到 <code>NODE_ENV</code> 也要有这段优先取 <code>VITE_USER_NODE_ENV</code> 的逻辑</p><p>环境变量有2种定义方式</p><ol><li>在 <code>vite.config.ts</code> 中的 <code>defind</code> 中配置</li><li>在 <code>env</code> 相关文件中配置</li></ol><p>读取方式也不同</p><ol><li><code>process_env</code></li><li><code>i<wbr>mport.meta.env</code></li></ol><p>注意：在 <code>CommonJS</code> 中无法使用 <code>i<wbr>mport.meta.env</code> 因为根本没有 <code>import</code> 这个全局变量</p><p>如果是在运行时经过 <code>ViteDevServer</code> 中的 <code>CJS</code> 会被转为 <code>ESM</code>，可能可以正常使用</p><p>但是当 <code>CJS</code> 时提供给其他库(如 <code>tailiwindCSS</code> 配置文件)使用的，而其他库不会转化成 <code>ESM</code>，更不会对生成 <code>import</code> 全局变量</p><h2 id="hmr-1" tabindex="-1">HMR <a class="header-anchor" href="#hmr-1" aria-label="Permalink to &quot;HMR&quot;">​</a></h2><p><code>Vite</code> 的 <code>HMR</code> 功能由具体语言的 <code>Vite</code> 插件 <code>plugin</code> 实现</p><p>如:</p><ul><li><code>.vue</code> 文件的 <code>HMR</code> 由 <code>@vitejs/plugin-vue</code> 实现</li><li><code>VueJsx</code> 语法的 <code>HMR</code> 由 <code>@vitejs/plugin-vue-jsx</code></li></ul><p>用 <code>Vite</code> 创建出原生js工程</p><p>修改js文件内容，会发现整个页面自动刷新了一次(<strong>并不是自动就是热更新，局部刷新才是</strong>)</p><p>自动刷新是因为 <code>viteDevServer</code> 内置了 <code>nodejs</code> 的文件监听功能，当发现文件修改了，并且没有相应的热更新逻辑，将会通知( <code>websocket</code> )浏览器自动刷新整个页面</p><p>👆 可以看出 <code>HMR</code> 功能并不会被 <code>Vite</code> 内置提供, 即使有能力检测出变化的文件( <code>Rollup</code> 也是同理 )</p><p>但是 <code>Vite</code> 提供了一套通用热更新的 API (挂载在<code>i<wbr>mport.meta.hot</code>对象中)</p><p>👇 把 <code>create-vite</code> 自动生成的示例代码，改造为调用函数的形式</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">render</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#app</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">innerHTML</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#C3E88D;">    &lt;h1&gt;Hello Vite&lt;/h1&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">  </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">render</span><span style="color:#A6ACCD;">()</span></span></code></pre></div><p>👇 当前文件中新增 HMR 逻辑</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// export 才能被 hot.accect 取到可用于调用的新代码</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">render</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#app</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">innerHTML</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#C3E88D;">    &lt;h1&gt;Hello Vite&lt;/h1&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">  </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">render</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">meta</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">hot) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 挂载在i<wbr>mport.meta上是因为可以方便的跟当前文件路径关联上</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 而不需要手动获取文件信息来关联</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">meta</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">hot</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">accect</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">newModule</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Vite watch this file change will callback hot.accect</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// and do not refresh all page in brower</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// newModule is this file ESM export</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// .Vue 就是 export 整个组件实例， 因此可以猜想 plugin-vue 实现HMR 就是调用整个组件实例的 refresh 逻辑,而并不是精确到 .vue 的html部分各个小DOM</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">newModule</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">render</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 👆 注意我们要取 newModule 中 export 的 render</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 虽然在一个作用域 理论上可以直接调用render，但是不行！</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 因为直接调用的 render 是旧的，并不是修改后的(因为当前模块是一个闭包的维度，触发回调时调用上下中的 render 是指向旧的作用域的 )</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>加判断逻辑是因为 <code>build</code> 阶段，Vite不会挂载<code>hot对象</code>到 <code>i<wbr>mport.meta</code> 中</p><p>即: 这段逻辑也会被打包到生产代码中</p><h2 id="ssr" tabindex="-1">SSR <a class="header-anchor" href="#ssr" aria-label="Permalink to &quot;SSR&quot;">​</a></h2><p>有些文章会说实现 <code>SSR应用</code>, 需要后端配合</p><p>但实际需要后端配合的 <code>SSR应用</code> 是前后端不分离</p><p>现代的 <code>SSR应用</code>, 一般由前端编写 <code>nodejs</code> 处理 <strong>SSR风格的前端打包产物</strong></p><h3 id="前后端不分离的ssr项目" tabindex="-1">前后端不分离的SSR项目 <a class="header-anchor" href="#前后端不分离的ssr项目" aria-label="Permalink to &quot;前后端不分离的SSR项目&quot;">​</a></h3><p>用户浏览器访问的 url 地址，对应的不是一个静态服务器的html, 而是一个后端服务的get请求</p><p>这个后端服务的get请求对应的html内容，由后端(模版引擎)编写</p><p>但是 js 资源还是由前端工程提供，现代 Web 应用都是通过一个主js逻辑处理页面渲染的，因此只要 js 资源提供所有如前端路由、动态渲染逻辑，这个后端服务就只需要处理 get请求到html的逻辑，其他不需要处理</p><p>👆 可以看出，这种不分离的场景，浏览器拿到的html内容依然是空的模板 HTML ,并不是实际意义上解决 SEO 问题的 SSR前端Web 方案</p><p>因此这里只提一下，相应的开发模式，不展开讲</p><ul><li>prod 环境下 <ul><li>前端按照原打包工具的打包产物，提供给后端，除了 HTMl 文件</li><li>并提供一份，模板 HTML 需要加载打包产物中的什么资源的清单，如入口js</li><li>剩下的由后端编写逻辑处理清单生产对应的html内容(其实就是前端打包产物中的HTML的内容)</li></ul></li><li>dev 环境下 <ul><li>前端按照原打包工具启动一个 devServer, 但是不直接访问这个 devServer</li><li>后端编写dev 环境下, 前端的模板HTML内容(打包前的模板HTMl) 并设置get请求, 浏览器访问这个 get 请求</li><li>后端编写的HTML内容，入口js等资源需要指向前端的 devServer</li><li>后端需要代理静态资源(相对路径访问的图片等)目录，到前端 devServer，</li></ul></li></ul><h3 id="nodejs" tabindex="-1">nodejs <a class="header-anchor" href="#nodejs" aria-label="Permalink to &quot;nodejs&quot;">​</a></h3><p>流程:</p><ul><li>nodejs SSR 实现的效果是, 浏览器访问 URL 时, 不再是访问静态服务器上的模板html</li><li>而是访问nodejs get请求, 这个get请求不仅仅是获取模板HTML返回,同时会拦截访问并对执行前端逻辑计算模板HTML的内容，再返回给浏览器, 浏览器拿到的将会是有内容的 HTML ,不再是模板 HTML</li></ul><p>👆 nodejs 来得到 HTML 的内容是难点, 因为框架默认提供的各种浏览器运行时逻辑，由 nodejs 来执行, 会出问题, 如前端路由功能、页面init时调用接口获取数据, nodejs需要按照 get请求的路径和前端路由逻辑找到需要对应执行的事情, 以得到正确 HTML 内容</p><p><a href="https://vitejs.dev/guide/ssr.html" target="_blank" rel="noreferrer">Vite官方文档-SSR</a></p><p>实现步骤：</p><p>除了编写一个 nodejs 服务处理 get请求</p><p>还需要修改入口 HTML, 和入口 JS 来配合 nodejs 执行正确的计算 HTML 内容的逻辑</p><p>入口 JS 需要引入nodejs环境的路由逻辑，而不是前端的原路由</p><p>使用 express 或是 koa 等 nodejs静态服务功能</p><p>也正是因为把浏览器的逻辑转移到nodejs中，需要处理的情况是很多的，因此SSR方案的实现一般都得再套一层框架(一般不影响业务代码,仅从打包通用入口等地方入手)，如 <code>Nuxtjs</code>、<code>Nextjs</code>等</p><p>👇 的SSR也是同理，如 <code>VitePress</code></p><h2 id="ssg" tabindex="-1">SSG <a class="header-anchor" href="#ssg" aria-label="Permalink to &quot;SSG&quot;">​</a></h2><p>同样使用👆 SSR 的 nodejs 计算 HTML 内容的逻辑</p><p>prerender</p><p>多入口(所有路由)计算 HTML 内容</p><p>得到类似多页面应用的多 HTML的打包产物, 放到静态资源服务器里直接访问(不是 get请求)</p>`,74),i=[p,c,r];function d(u,y,h,D,m,b){return l(),t("div",null,i)}const v=a(n,[["render",d]]);export{C as __pageData,v as default};
