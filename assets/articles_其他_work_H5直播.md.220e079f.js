import{_ as s,o as a,c as n,V as o}from"./chunks/framework.b450deef.js";const A=JSON.parse('{"title":"Web 直播","description":"","frontmatter":{},"headers":[],"relativePath":"articles/其他/work/H5直播.md","filePath":"articles/其他/work/H5直播.md"}'),l={name:"articles/其他/work/H5直播.md"},p=o(`<h1 id="web-直播" tabindex="-1">Web 直播 <a class="header-anchor" href="#web-直播" aria-label="Permalink to &quot;Web 直播&quot;">​</a></h1><p>直播有两个特点：</p><ol><li>获取的是流数据</li><li>要求实时性（决定了数据源不可能在服务器上，而是在某一个客户端）</li></ol><p>流数据。我们常接触的数据就是 <code>ajax</code> 从接口获取的 <code>json</code> 数据，特别一点的可能是文件上传。这些数据的特点是，它们都属于一次性就能拿到的数据。我们一个请求，一个响应，完整的数据就拿回来了。</p><p>但是流不一样，流数据获取是一帧一帧的，可以理解为是一小块一小块的。像直播流的数据，它并不是一个完整的视频片段，它就是很小的二进制数据，需要一点一点的拼接起来，才有可能输出一段视频。</p><h2 id="直播整体流程" tabindex="-1">直播整体流程 <a class="header-anchor" href="#直播整体流程" aria-label="Permalink to &quot;直播整体流程&quot;">​</a></h2><p>🤔 数据源在客户端，那么又是怎么到达其他客户端的呢？</p><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/202306272038805.png" alt=""></p><p>一个完整的 Web 媒体串流应当具备 3 种角色</p><ul><li>推流客户端（主播侧）</li><li>媒体服务器（MediaServer）</li><li>拉流客户端（观众侧）</li></ul><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/202306251434151.png" alt=""></p><h2 id="视频流" tabindex="-1">视频流 <a class="header-anchor" href="#视频流" aria-label="Permalink to &quot;视频流&quot;">​</a></h2><p>流媒体：客户端是需要源源不断接受来自外界传输的音视频，并且需要播放已经接受到的部分</p><p>区分于 光盘、下载的场景</p><p>所有在线观看的网站都是流媒体平台，这个名词常用于国外，国内叫视频平台（AppleTv Netflix HBO+ Disney+ 等更纯粹...）</p><h3 id="视频格式-后缀" tabindex="-1">视频格式/后缀 <a class="header-anchor" href="#视频格式-后缀" aria-label="Permalink to &quot;视频格式/后缀&quot;">​</a></h3><p>容器格式（理解为将比特流按照一定顺序放进特定的盒子里）</p><p>常见的容器格式有: MP4、rmvb、rm、flv、AVI、mov、WMV、mkv</p><p>🤔 那选用不同格式来装视频有什么问题吗？</p><p>没有任何问题，但是我们需要知道如何将该盒子解开，并且能够找到对应的解码器进行解码。只要我有这些对应的解码器以及播放器。</p><p>将视频比特流放进一个盒子里面，如果其中某一段出现问题，那么最终生成的文件实际上是不可用的，因为这个盒子本身就是有问题的。</p><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/202306272041960.png" alt=""></p><p>MP4，MKV 等等类似这种封装，必须拿到完整的音视频文件才能播放，因为里面的单个音视频数据块不带有时间戳信息，播放器不能将这些没有时间戳信息数据块连续起来，所以就不能实时的解码播放。</p><h3 id="flv" tabindex="-1">FLV <a class="header-anchor" href="#flv" aria-label="Permalink to &quot;FLV&quot;">​</a></h3><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/202306272041600.png" alt=""></p><p>FLV 格式的流中，每一个音视频数据都被封装成了包含时间戳信息头的数据包。在传输时，只需要当播放器拿到这些数据包解包的时候能够根据时间戳信息把这些音视频数据和之前到达的音视频数据连续起来播放。</p><h3 id="压缩技术-编码格式" tabindex="-1">压缩技术(编码格式) <a class="header-anchor" href="#压缩技术-编码格式" aria-label="Permalink to &quot;压缩技术(编码格式)&quot;">​</a></h3><p>同一种封装格式中可以放不同编码的视频，不过一种视频容器格式一般是只支持某几类编码格式的视频。</p><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/202306282300702.png" alt=""></p><p>国内常见的编码格式：</p><ul><li>AVC/H.264</li><li>HEVC/H.265</li><li>AV1</li></ul><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/202306282233759.png" alt=""></p><p><code>AVC/H.264</code> 比较早期成熟的压缩技术，兼容性最好，但是相对的体积大</p><p><code>HEVC/H.265</code>、<code>AV1</code> 更强大的压缩技术，但是对设备要求高，体积小</p><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/202307061554803.png" alt=""></p><p><a href="https://finance.sina.com.cn/jjxw/2022-04-08/doc-imcwipii3001152.shtml" target="_blank" rel="noreferrer">看个 B 站搞得电脑风扇狂转？ 网友们这次炸了</a></p><p>🤔 为什么反感用高压缩技术？</p><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/202306282246810.png" alt=""></p><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/202306282246116.png" alt=""></p><p><code>HEVC/h.265</code> 编码 <img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/202306282304733.png" alt=""></p><p><code>AV1</code> 编码 <img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/202306282306470.png" alt=""></p><ol><li>硬解：字面上理解就是用硬件来进行解码，是使用 GPU 的专门模块来解码。</li><li>软解：字面上理解就是用软件来进行解码，是使用 CPU 来运行视频编解码代码。</li></ol><p>软硬解各有优缺点：</p><ul><li>软解：在软解码过程中需要对大量的视频信息进行运算，所以对 CPU 性能的要求非常高，尤其是对高码率的视频来说巨大的运算量会造成转换效率低，发热量高等问题。不过软解码的过程中不需要复杂的硬件支持，兼容性高。即使是新出的视频编码格式，也可以为其编写新的解码程序；</li><li>硬解：硬解码调用 GPU 的专门模块来解码，拥有独特的计算方法，解码效率高。这样不但能够减轻 CPU 的负担，还有着低功耗，发热少等特点。但是由于硬解码起步相对晚，软件和驱动对他的支持度低，基本上硬解码内置什么样的模块就解码什么样的视频，面对各色各样的视频编码样式，兼容性没那么好。</li></ul><table><thead><tr><th>解码方式</th><th>效率</th><th>功耗</th><th>兼容性</th></tr></thead><tbody><tr><td>软解</td><td>低</td><td>高</td><td>高</td></tr><tr><td>硬解</td><td>高</td><td>低</td><td>低</td></tr></tbody></table><p>随着 Chrome 在 107 版本支持 H.265 的硬解，以及 Web 平台上 H.265 软解技术的成熟，在 Web 平台上规模化部署 H.265 视频的时机已经成熟。关于 H.265 编码格式以及它的好处，网上已经有非常多的介绍了。它最重要的好处是更低的部署成本，因此对于视频服务供应商来说，是尽量采用的</p><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/202307061704521.png" alt=""></p><p>查看浏览器的 gpu 支持</p><ol><li>chrome://gpu</li><li>chrome://media-internals</li><li>活动监听器 <code>VTDecoderXPCService</code></li></ol><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/202307061554128.png" alt=""></p><p>前端解码-WASM（软解，任何平台）: 基于 <code>WASM</code> + <code>FFMPEG</code> 编译实现，支持所有支持 <code>WASM</code> 的浏览器</p><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/202307061620945.png" alt=""></p><p>收费问题</p><p><a href="https://cloud.tencent.com/document/product/267/77789" target="_blank" rel="noreferrer">腾讯云AV1编码</a></p><h2 id="网络传输" tabindex="-1">网络传输 <a class="header-anchor" href="#网络传输" aria-label="Permalink to &quot;网络传输&quot;">​</a></h2><h3 id="rtmp-real-time-messaging-protocol-实时信息控制协议" tabindex="-1">RTMP(Real Time Messaging Protocol 实时信息控制协议) <a class="header-anchor" href="#rtmp-real-time-messaging-protocol-实时信息控制协议" aria-label="Permalink to &quot;RTMP(Real Time Messaging Protocol 实时信息控制协议)&quot;">​</a></h3><p>RTMP 是 Adobe Systems 公司为 Flash 播放器和服务器之间音频、视频和数据传输开发的开放协议， 该协议在国内直播平台中较为普及。</p><p>RTMP 是一种基于 TCP 进行实时流媒体通信的网络协议，主要用来在 Flash 平台和支持 RTMP 协议的流媒体服务器之间进行音视频和数据通信。RTMP 协议下可以用来拉流，也可以进行退流。在浏览器中并不支持 RTMP 协议，只能通过 Flash 插件进行处理。RTMP 传输是所支持的媒体格式为 FLV。</p><h3 id="http-flvs" tabindex="-1">HTTP-FLVs <a class="header-anchor" href="#http-flvs" aria-label="Permalink to &quot;HTTP-FLVs&quot;">​</a></h3><p>让原本只能在 RTMP 中进行传输的 FLV 音视频流也能够在 HTTP 下进行传输</p><p>由于 HTML 的 Video 不直接支持 Flv 格式的音视频，有 Flash 插件才能够播放</p><h3 id="hls-http-living-stream" tabindex="-1">HLS（HTTP Living Stream） <a class="header-anchor" href="#hls-http-living-stream" aria-label="Permalink to &quot;HLS（HTTP Living Stream）&quot;">​</a></h3><p>是一个由苹果公司提出的基于 <code>HTTP</code> 的流媒体网络传输协议。</p><p><code>HLS</code> 的工作原理：把整个流分成一个个小的基于 <code>HTTP</code> 的文件来下载，每次只下载一些。当媒体流正在播放时，客户端可以选择从许多不同的备用源中以不同的速率下载同样的资源，允许流媒体会话适应不同的数据速率。在开始一个流媒体会话时，客户端会下载一个包含元数据的 <code>extended M3U (m3u8) playlist</code> 文件，用于寻找可用的媒体流。</p><p>视频在 <code>server</code> 服务器上被转换成 <code>HLS</code> 格式的视频（既 <code>TS</code> 和 <code>m3u8</code> 文件）文件。客户端只需要访问一级 <code>m3u8</code> 文件的路径就会自动播放 <code>HLS</code> 视频流了</p><p>延迟问题：</p><p>由于 <code>HLS</code> 需要将采集到的音视频进行分片、客户端也需要对接受到的分片后的音视频进行合并处理，因此相对来时会存在比较大的延迟，大概会达到 10s 左右</p><p>兼容问题：</p><p><code>HLS</code> 在 <code>PC</code> 端仅支持 <code>safari</code> 浏览器，而其他大部分 <code>PC</code> 浏览器使用 <code>HTML5 video</code> 标签由于无法解析 <code>TS</code> 所以不能直接播放(需要通过 <code>hls.js</code>)</p><p>移动端不论是安卓还是 IOS 统统都原生支持 HLS</p><p>如果想要在 PC 非safari 浏览器上使用到 HLS，仍然需要使用其他技术手段才能实现</p><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/202306291748231.png" alt=""></p><h3 id="m3u8-ts-m4s" tabindex="-1">m3u8 + TS/m4s <a class="header-anchor" href="#m3u8-ts-m4s" aria-label="Permalink to &quot;m3u8 + TS/m4s&quot;">​</a></h3><p><code>m3u8</code> 的命名来源是 <code>m3u 文件 + utf-8</code> 编码而来</p><p><code>m3u</code> 实际上就是一个索引文件，其中可以记录 <code>TS</code> 文件地址，客户端会按照下载的顺序进行连续播放。</p><div class="language-txt"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">#EXTM3U // 声明文件为M3U，必须写在第一行</span></span>
<span class="line"><span style="color:#A6ACCD;">#EXT-X-PLAYLIST-TYPE:VOD // 当前播放类型为点播</span></span>
<span class="line"><span style="color:#A6ACCD;">#EXT-X-TARGETDURATION:10 //每个视频分段最大的时长（单位秒）</span></span>
<span class="line"><span style="color:#A6ACCD;">#EXTINF:10, //下面ts切片的播放时长</span></span>
<span class="line"><span style="color:#A6ACCD;">2000kbps-00001.ts //ts文件路径</span></span>
<span class="line"><span style="color:#A6ACCD;">#EXTINF:10,</span></span>
<span class="line"><span style="color:#A6ACCD;">2000kbps-00002.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">#ZEN-TOTAL-DURATION:20</span></span>
<span class="line"><span style="color:#A6ACCD;">#ZEN-AVERAGE-BANDWIDTH:2190954</span></span>
<span class="line"><span style="color:#A6ACCD;">#ZEN-MAXIMUM-BANDWIDTH:3536205</span></span>
<span class="line"><span style="color:#A6ACCD;">#EXT-X-ENDLIST // m3u结束指令</span></span></code></pre></div><p>当媒体流正在播放时，客户端可以选择从许多不同的备用源中以不同的速率下载同样的资源，允许流媒体会话适应不同的数据速率（通过切换m3u8的返回内容）</p><p><code>TS（Transport Stream）</code></p><p>视频流：国内大部分平台由于 <code>flv</code> 相对于 <code>hls</code> 延迟低很多，所以采用 <code>flv</code> 视频流来播放</p><h2 id="视频播放" tabindex="-1">视频播放 <a class="header-anchor" href="#视频播放" aria-label="Permalink to &quot;视频播放&quot;">​</a></h2><p><a href="https://live.douyin.com/" target="_blank" rel="noreferrer">抖音直播</a></p><p><a href="https://www.douyu.com/" target="_blank" rel="noreferrer">斗鱼直播</a></p><p><a href="https://www.huya.com/" target="_blank" rel="noreferrer">虎牙直播</a></p><p><a href="https://live.bilibili.com/" target="_blank" rel="noreferrer">b 站直播</a></p><h3 id="拉取" tabindex="-1">拉取 <a class="header-anchor" href="#拉取" aria-label="Permalink to &quot;拉取&quot;">​</a></h3><p>我们需要一种类似 <code>websocket</code> 的长连接来持续获取 <code>flv</code> 内容</p><p><code>fetch API</code> 就天然支持</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">fetch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./a.flv</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">res</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">reader</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getReader</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pump</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">async</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">reader</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">read</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// ✨ 长连接拉取</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">done</span><span style="color:#F07178;">) </span><span style="color:#82AAFF;">pump</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">pump</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Response/body" target="_blank" rel="noreferrer">res.body.getReader -mdn</a></p><p>可能大家还听过 <code>WS-FLV</code>，这是使用 <code>WebSocket</code> 去拉 <code>FLV</code> 流，相比 <code>HTTP-FLV</code> 没啥优势，所以开始尽可能使用 <code>HTTP-FLV</code></p><p>在我看来 <code>WS-FLV</code> 唯一的作用是兼容 <code>IE 11</code> 浏览器，因为 <code>IE 11</code> 是不支持 <code>fetch</code> 的，这时候只有用 WebSocket 去拉流</p><h3 id="video-标签" tabindex="-1">video 标签 <a class="header-anchor" href="#video-标签" aria-label="Permalink to &quot;video 标签&quot;">​</a></h3><blockquote><p>使用原生 <code>video</code> 标签播放视频文件</p></blockquote><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">video</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">controls</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">autoplay</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">source</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">your_video.mp4</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">video/mp4; codecs=hevc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">source</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">your_video.mp4</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">video/mp4; codecs=av1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">source</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">your_video.mp4</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">video/mp4; codecs=avc1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">video</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>经过上面我们已经了解到了视频播放的步骤，我们可以理解为 <code>video</code> 原生对视频格式做了 <code>解封转</code> 和 <code>解码</code></p><p>在以前浏览器端 <code>&lt;video /&gt;</code> 标签没有办法支持播放<code>H.265</code>视频，但是因为视频格式本身是连续图像画面的集合</p><p>最原始的支持，可以参考<code>chromium</code>的源码及<code>video标签</code>内部的实现原理，通过 <code>&lt;canvas /&gt;</code> + <code>Web Audio API</code> 的结合来模拟实现一个虚拟的<code>canvas版video标签</code>来实现播放器功能</p><p><a href="https://g.alicdn.com/videox/mp4-h265/1.0.2/index.html" target="_blank" rel="noreferrer">淘系 DEMO</a></p><h3 id="转格式-flv-fmp4" tabindex="-1">转格式 flv -&gt; FMP4 <a class="header-anchor" href="#转格式-flv-fmp4" aria-label="Permalink to &quot;转格式 flv -&gt; FMP4&quot;">​</a></h3><p>但是根据浏览器的不同，可能支持的视频格式也不同，但是 FMP4 格式所有的浏览器都支持</p><p>因此在 js 利用 MSE API 处理 flv</p><ul><li>对 flv 进行解析，这个操作一般称为解封装（demux）</li><li>解析出来音视频等信息数据后，再封装（remux）成 fmp4 视频格式</li><li>URL.createObjectURL 创建一个 <code>DOMString</code> 表示指定的 <code>File</code> 对象或 <code>Blob（二进制大对象）</code> 对象</li></ul><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/202306271932922.png" alt=""></p><h3 id="flv-js" tabindex="-1">flv.js <a class="header-anchor" href="#flv-js" aria-label="Permalink to &quot;flv.js&quot;">​</a></h3><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">flv.min.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">video</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">videoElement</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">video</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (flvjs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isSupported</span><span style="color:#A6ACCD;">()) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">videoElement</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">videoElement</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">flvPlayer</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">flvjs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createPlayer</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      type</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">flv</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      url</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://example.com/flv/video.flv</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">flvPlayer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">attachMediaElement</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">videoElement</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">flvPlayer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">load</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">flvPlayer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">play</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>bilibili 开源的 <code>flv.js</code> 只做了一件事，在获取到 <code>FLV</code> 格式的音视频数据后通过原生的 <code>JS</code> 去解码 <code>FLV</code> 数据，再通过 <code>Media Source Extensions</code> API 喂给原生 HTML5 Video 标签。(HTML5 原生仅支持播放 <code>fmp4/webm</code> 等格式，不支持 FLV)</p><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/202306290117428.png" alt=""></p><p>通过原生的 JS 去解码 FLV 数据, 二进制流的操作 <code>arraybuffer</code> 😱</p><p>由于 <code>flv.js</code> 是基于 <code>MSE</code> 制作的，所以一些低版本移动端流览器中是无法正常播放的，因此在考虑兼容性的情况下需要慎用。</p><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/202306290120893.png" alt=""></p><h2 id="mse-media-source-extensions" tabindex="-1">MSE(Media Source Extensions) <a class="header-anchor" href="#mse-media-source-extensions" aria-label="Permalink to &quot;MSE(Media Source Extensions)&quot;">​</a></h2><p>MDN 示例：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> video </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">video</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> assetURL </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">frag_bunny.mp4</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Need to be specific for Blink regarding codecs</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ./mp4info frag_bunny.mp4 | grep Codec</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> mimeCodec </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">video/mp4; codecs=&quot;avc1.42E01E, mp4a.40.2&quot;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">MediaSource</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> window </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> MediaSource</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isTypeSupported</span><span style="color:#A6ACCD;">(mimeCodec)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">mediaSource</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">MediaSource</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//console.log(mediaSource.readyState); // closed</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">video</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">src</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">URL</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createObjectURL</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">mediaSource</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">mediaSource</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">sourceopen</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sourceOpen</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">error</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Unsupported MIME type or codec: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">mimeCodec</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sourceOpen</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">_</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//console.log(this.readyState); // open</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">mediaSource</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">sourceBuffer</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">mediaSource</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addSourceBuffer</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">mimeCodec</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">fetchAB</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">assetURL</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">buf</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">sourceBuffer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">updateend</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">_</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">mediaSource</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">endOfStream</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">video</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">play</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">//console.log(mediaSource.readyState); // ended</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">sourceBuffer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">appendBuffer</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">buf</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fetchAB</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">url</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">cb</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">url</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">xhr</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">XMLHttpRequest</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">open</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">get</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">url</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">responseType</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">arraybuffer</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onload</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">cb</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">response</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="视频流存储" tabindex="-1">视频流存储 <a class="header-anchor" href="#视频流存储" aria-label="Permalink to &quot;视频流存储&quot;">​</a></h2><p>nginx、cdn</p><p><a href="https://cloud.tencent.com/document/product/267" target="_blank" rel="noreferrer">腾讯云直播</a></p><h2 id="视频采集" tabindex="-1">视频采集 <a class="header-anchor" href="#视频采集" aria-label="Permalink to &quot;视频采集&quot;">​</a></h2><ul><li>选择镜头/窗口（从前端采集设备中获取原始的音频和视频数据）</li><li>视频处理-抠图绿幕/美颜</li><li>视频推流(SDK)</li></ul><h3 id="obs-推流" tabindex="-1">OBS 推流 <a class="header-anchor" href="#obs-推流" aria-label="Permalink to &quot;OBS 推流&quot;">​</a></h3><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/202306291720890.png" alt=""></p><h3 id="视频处理" tabindex="-1">视频处理 <a class="header-anchor" href="#视频处理" aria-label="Permalink to &quot;视频处理&quot;">​</a></h3><p>🤔 <code>node</code> 服务端可以统一处理视频(转码、添加水印等)</p><p><code>FFmpeg</code>: 一款处理音视频非常有效的工具, 这款工具提供以命令行的方式去对视频进行转码、转封装格式、增加水印等等功能其中还包括了 <code>RTMP</code> 推流的功能。同时 <code>FFmpeg</code> 也为 <code>Node</code> 提供了一些控制的 <code>Bridge</code></p><ul><li>对音视频进行额外的处理，如音频的混音、降噪等处理；对视频进行水印、滤镜和时间戳等处理</li><li>按照相关规范要求对处理后的音视频数据进行转码多种格式</li></ul><p><a href="https://juejin.cn/post/7151932832041058340#heading-7" target="_blank" rel="noreferrer">实现视频的虚拟背景</a></p><h2 id="webrtc" tabindex="-1">WebRTC <a class="header-anchor" href="#webrtc" aria-label="Permalink to &quot;WebRTC&quot;">​</a></h2><p>WebRTC更适合用来做Web视频会议的原因就是它能够实现浏览器和浏览器之间进行音视频的传输</p><p>如果依靠流媒体服务器： <img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/202306291714819.png" alt=""></p><p>3位参会者，服务器就需要接受3条推流和6条拉流，显然这样对流媒体服务器的压力过于庞大，并且还有不可忽视的延时问题</p><blockquote><p>WebRTC （Web Real-Time Communications） 是一项由Google推行的实时通讯技术，它允许网络应用或者站点，在不借助中间媒介的情况下，建立浏览器之间点对点（Peer-to-Peer）的连接，实现视频流和（或）音频流或者其他任意数据的传输</p></blockquote><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>ios 手机端 H5 不支持延迟更低的 flv(不支持 MSE)，因此需要兼容成 hls</p><p>其他端(安卓、PC) H5 用延迟更低的 flv 即可</p><p>当然，如果依靠原生 APP 能力，则移动端、PC 端统一使用 flv 即可</p><p>可以看出音视频播放领域，更多的技术难点在：</p><p>软硬件条件具备的情况下，用更高效的编码格式且体验不降级；条件不具备的情况下，能降级到低效的编码格式</p><p>愉快的直播吧</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://juejin.cn/post/7114874359403151390#heading-1" target="_blank" rel="noreferrer">主要参考</a></li><li><a href="https://mp.weixin.qq.com/s/0-mE1BVq6znvjFbnf4hhJw" target="_blank" rel="noreferrer">在 Web 平台规模化部署高效编码格式的实践和思考-阿里</a></li><li><a href="https://fed.taobao.org/blog/taofed/do71ct/web-player-h265/" target="_blank" rel="noreferrer">Web端H.265播放器研发解密-阿里</a></li><li><a href="https://zhuanlan.zhihu.com/p/577394651" target="_blank" rel="noreferrer">Chrome HEVC 硬解背后的字节开源贡献者-字节</a></li><li><a href="https://zhuanlan.zhihu.com/p/541082191" target="_blank" rel="noreferrer">为 Chromium 实现 HEVC 硬解 - 原理/实测指南-字节</a></li><li><a href="https://github.com/oyuyue/blog/issues/16" target="_blank" rel="noreferrer">抖音直播原理</a></li><li><a href="https://juejin.cn/post/6844903576318246919" target="_blank" rel="noreferrer">H5 直播入门</a></li><li><a href="https://www.bilibili.com/video/BV1nW4y1V7kR" target="_blank" rel="noreferrer">视频画质全解析【柴知道】</a></li><li><a href="https://weibo.com/3138279871/Ln3DbyKQC?type=comment#_rnd1649239490342" target="_blank" rel="noreferrer">weibo</a></li><li><a href="https://juejin.cn/post/7168759481755992077" target="_blank" rel="noreferrer">Node服务端使用ffmpeg</a></li></ul>`,139),e=[p];function t(c,r,F,y,i,D){return a(),n("div",null,e)}const u=s(l,[["render",t]]);export{A as __pageData,u as default};
