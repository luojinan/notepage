import{_ as s,o as a,c as n,V as o}from"./chunks/framework.b450deef.js";const i=JSON.parse('{"title":"WebWorker","description":"","frontmatter":{},"headers":[],"relativePath":"articles/03-架构/performance/webworker.md","filePath":"articles/03-架构/performance/webworker.md"}'),l={name:"articles/03-架构/performance/webworker.md"},p=o(`<h1 id="webworker" tabindex="-1">WebWorker <a class="header-anchor" href="#webworker" aria-label="Permalink to &quot;WebWorker&quot;">​</a></h1><h2 id="基本使用" tabindex="-1">基本使用 <a class="header-anchor" href="#基本使用" aria-label="Permalink to &quot;基本使用&quot;">​</a></h2><p><code>Worker</code> (包括<code>ServerWorker</code>) 只能引用远程在线地址, 不能使用本地文件系统的地址, 因此需要启一个本地静态服务才能使用</p><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/20230210112015.png" alt=""></p><p>👇 主线程</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;!</span><span style="color:#F07178;">DOCTYPE</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;&lt;</span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">WebWorker</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">web worker</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> worker1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Worker</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./testWorker.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 调用 worker</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    worker1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">postMessage</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">worker1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">info</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">主线程设置的参数</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 主线程 -&gt; worker线程 发送信息</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 主线程 接收 worker线程信息</span></span>
<span class="line"><span style="color:#A6ACCD;">    worker1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onmessage</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">({</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">})</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">主线程输出</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>👇 <code>worker线程</code></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onmessage</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">({</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">})</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">worker线程输出</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">self</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">postMessage</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> name</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> info</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">Worker处理后的info: </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">info</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>👆 注意 <code>onmessage</code> 和 <code>postMessage</code> 不同, 不是函数 而是一个变量 用于赋值一个函数</p><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/20230210113247.png" alt=""></p><h2 id="实际案例" tabindex="-1">实际案例 <a class="header-anchor" href="#实际案例" aria-label="Permalink to &quot;实际案例&quot;">​</a></h2><p><a href="https://juejin.cn/post/7137728629986820126" target="_blank" rel="noreferrer">一文彻底了解Web Worker，十万条数据都是弟弟</a></p><p>TODO: 示例 <code>vue</code> 编写</p><p>使用 <code>performance api</code> 测试耗时, 想要看看线程通信耗时(不是逻辑执行耗时)</p><p>发现通信耗时不对劲, 原因是 <code>performance</code> 是 <code>window</code> 下的api, 不同线程的 <code>window</code> 不一样, <code>worker</code> 中执行的 <code>performance.now()</code> 和 主线程中的 <code>performance.now()</code> 基准不一样</p><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/20230210144421.png" alt=""> 👆 worker 线程 反而更耗时....</p><h2 id="动态创建-worker-并调用" tabindex="-1">动态创建 worker 并调用 <a class="header-anchor" href="#动态创建-worker-并调用" aria-label="Permalink to &quot;动态创建 worker 并调用&quot;">​</a></h2><p><code>Worker</code> 常规写法都是单独一个 <code>js静态文件</code>(在打包工具中体现为不打包或单独入口打包类似 <code>ServerWorker</code>)，在 <code>new Worker()</code> 中引用</p><p>但是和 <code>ServerWorker</code> 应用级别不同, <code>WebWorker</code> 更像业务开发中具体的模块级别, 因此手动创建很多的静态JS, 开发并不友好</p><p>所以更希望可以在业务代码中动态创建 <code>Worker</code> 而不需要关心构建过程</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> makeWorker </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">f</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pendingJobs</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// { jobid: resolve, ... } 存放各种 worker 的 promise 未执行 resolve 函数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 生成 未调用 worker</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">worker</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Worker</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">URL</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createObjectURL</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Blob</span><span style="color:#F07178;">([</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">self.onmessage = ({ data: { jobId, params } }) =&gt; {</span></span>
<span class="line"><span style="color:#C3E88D;">     const result = (</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">f</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">)(...params)</span></span>
<span class="line"><span style="color:#C3E88D;">     postMessage({ jobId, result })</span></span>
<span class="line"><span style="color:#C3E88D;">    }</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#F07178;">  ])))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 配置主线程方 接收通知通用处理(格式化等</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">worker</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onmessage</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">({</span><span style="color:#F07178;"> data</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">result</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">jobId</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">})</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">pendingJobs</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">jobId</span><span style="color:#F07178;">](</span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">delete</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">pendingJobs</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">jobId</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 包裹成 promise</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(...</span><span style="color:#A6ACCD;font-style:italic;">params</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;font-style:italic;">resolve</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 触发 worker</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">jobId</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">String</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">random</span><span style="color:#F07178;">()) </span><span style="color:#676E95;font-style:italic;">// 1. 创建worker线程name用于接收通知时区分</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">pendingJobs</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">jobId</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">resolve</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 2. 把resolve存起来由👆接收通知触发 </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">worker</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">postMessage</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">jobId</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">params</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 3. 调用 worker</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 只需要编写期望在 worker 中运行的逻辑 缺点是: 不能自定义 worker 内的其他功能逻辑</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 可以调整为 testFunction 编写完整的 worker 内容, 即👆的 self.onmessage 也自己写</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> testFunction </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">num</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> num </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> testWorker </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">makeWorker</span><span style="color:#A6ACCD;">(testFunction)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">testWorker</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">122</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(console</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">log)</span></span>
<span class="line"><span style="color:#82AAFF;">testWorker</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">233</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(console</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">log)</span></span></code></pre></div><p>👆 <code>worker</code> 和 <code>主js进程</code> 是运行在不同空间的</p><ol><li>变量不共享</li><li>能调用的浏览器API也是不同的</li></ol><p>所以把 <code>worker</code> 写在一个常规函数里反而容易引起误解, 容易误使用了读取不到的变量/浏览器API</p><p><code>ESLint</code> 之类的检查工具本可以检测出单独的 <code>worker</code> 文件内容有没有误使用变量, 但是写到常规函数里, 检查工具没办法识别这个函数是 <code>worker</code> 而检查出有没有误用</p><h2 id="vue-worker-源码分析" tabindex="-1">vue-worker 源码分析 <a class="header-anchor" href="#vue-worker-源码分析" aria-label="Permalink to &quot;vue-worker 源码分析&quot;">​</a></h2><p>TODO: 改造👆实际案例的 vue 示例</p><p><a href="https://github.com/israelss/simple-web-worker/blob/master/src/createDisposableWorker.js" target="_blank" rel="noreferrer">github</a></p><h2 id="vue-worker-ts及函数式改造" tabindex="-1">vue-worker ts及函数式改造 <a class="header-anchor" href="#vue-worker-ts及函数式改造" aria-label="Permalink to &quot;vue-worker ts及函数式改造&quot;">​</a></h2><p><a href="https://vueuse.org/core/useWebWorkerFn/" target="_blank" rel="noreferrer">vueuse-useWebWorkerFn</a></p>`,30),e=[p];function t(r,c,y,F,D,A){return a(),n("div",null,e)}const d=s(l,[["render",t]]);export{i as __pageData,d as default};
