import{_ as e,o as a,c as o,V as r}from"./chunks/framework.b450deef.js";const b=JSON.parse('{"title":"微前端","description":"","frontmatter":{},"headers":[],"relativePath":"articles/03-架构/microFrontend/微前端前世今生.md","filePath":"articles/03-架构/microFrontend/微前端前世今生.md"}'),t={name:"articles/03-架构/microFrontend/微前端前世今生.md"},i=r('<h1 id="微前端" tabindex="-1">微前端 <a class="header-anchor" href="#微前端" aria-label="Permalink to &quot;微前端&quot;">​</a></h1><p>微前端优点：</p><ul><li>不限技术栈：主框架不限制接入应用的技术栈，子应用可自主选择技术栈。</li><li>可独立开发部署：各个团队之间仓库独立，单独部署，互不依赖。</li><li>独立运行时：每个子应用之间状态隔离，运行时状态不共享。</li><li>增量升级：当一个应用庞大之后，技术升级或重构相当麻烦，而微应用具备渐进式升级的特性。</li></ul><p>iframe的问题：</p><ul><li>URL 不同步。浏览器刷新 <code>iframe url</code> 状态丢失、后退前进按钮无法使用。</li><li>UI 不同步，DOM 结构不共享。如无法显示整页弹窗。</li><li>全局上下文完全隔离，内存变量不共享。iframe 内外系统的通信、数据同步等需求，主应用的 cookie 要透传到根域名都不同的子应用中实现免登效果。</li><li>加载慢，每次子应用进入都是一次浏览器上下文重建、资源重新加载的过程。</li></ul><h2 id="实现方式-构建时组合" tabindex="-1">实现方式:构建时组合 <a class="header-anchor" href="#实现方式-构建时组合" aria-label="Permalink to &quot;实现方式:构建时组合&quot;">​</a></h2><p><a href="https://webpack.docschina.org/concepts/module-federation" target="_blank" rel="noreferrer">模块联邦</a> emp <img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/20230201105945.png" alt=""></p><p>虽然 EMP 较好的解决了子应用动态更新的问题，但从实际微前端使用场景来说还需要考虑子应用间的相互影响，需要处理 JS 沙箱、CSS 隔离等问题。EMP 的方案更适用于微组件而非微应用的场景。</p><h2 id="实现方式-运行时组合" tabindex="-1">实现方式:运行时组合 <a class="header-anchor" href="#实现方式-运行时组合" aria-label="Permalink to &quot;实现方式:运行时组合&quot;">​</a></h2><blockquote><p>独立构建的子应用, 由主应用在运行时加载</p></blockquote><h3 id="qiankun" tabindex="-1">qiankun <a class="header-anchor" href="#qiankun" aria-label="Permalink to &quot;qiankun&quot;">​</a></h3><p>基座 Entry 通过 JS 加载子应用是最灵活的方法，也是目前最常采用的方法。 每个子应用按约定暴露出相应的生命周期钩子，并且在加载后将其绑定到 window 对象下给主应用访问。 然后主应用程序确定渲染哪个子应用，调用相关渲染函数传入渲染节点。</p><p>基于 <code>single-spa</code> 实现路由与子应用的绑定关系根据路由加载相应应用。子应用将自己的信息注册到主应用中，包括入口文件地址、对应生效路由及命名空间等信息。同时子应用需暴露几个关键的生命周期钩子 <code>bootstrap、mount、unmount</code>，以供主应用在适当的时机调用。</p><p>提供两套 JS 沙箱方案：</p><ul><li>在不支持 proxy 的环境下用快照的方式在加载子应用前记录全局状态并在卸载时还原记录的状态。</li><li>在支持 proxy 时，劫持对 window 的操作并创建一个 fakeWindow 对象，赋值操作都发生在 fakeWindow 对象下，取值时按照 fakeWindow -&gt; window 的顺序依次查找。</li></ul><h3 id="无界" tabindex="-1">无界 <a class="header-anchor" href="#无界" aria-label="Permalink to &quot;无界&quot;">​</a></h3><p><a href="https://wujie-micro.github.io/doc/guide/" target="_blank" rel="noreferrer">wujie 文档</a></p><p>基于 <code>iframe</code> 实现 js 沙箱，通过 <code>WebComponent</code> 处理 css 隔离 大致实现方式为：运行时动态加载子应用资源（加载方式在下文技术细节中会详细说明），在主应用中创建一个 <code>shadowdom</code> 节点和一个 <code>iframe</code>。将 js 注入 <code>iframe</code> 内运行，将 dom、css 放到 <code>shadowdom</code> 节点下。同时劫持 js 中的 dom 操作并指向 <code>shadowdom</code>。</p><p>在路由状态方面 通过劫持<code>iframe</code>的history.pushState和history.replaceState将子应用的url同步到主应用的query参数上，当刷新浏览器初始化<code>iframe</code>时，读回子应用的url并使用<code>iframe</code>的history.replaceState进行同步</p><p>👆 无界 携程 怎么解决这些问题</p><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/20230201114802.png" alt=""></p><h3 id="micro-app" tabindex="-1">micro-app <a class="header-anchor" href="#micro-app" aria-label="Permalink to &quot;micro-app&quot;">​</a></h3><p><a href="https://zeroing.jd.com/docs.html#/" target="_blank" rel="noreferrer">micro-app 文档</a></p><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/20230201110324.png" alt=""></p><p>micro-app借鉴了 <code>WebComponent</code> 的思想，通过 CustomElement 结合自定义的 <code>ShadowDom</code>，将微前端封装成一个类 <code>WebComponent</code> 组件，从而实现微前端的组件化渲染。并且由于自定义 <code>ShadowDom</code> 的隔离特性，micro-app不需要像single-spa和qiankun一样要求子应用修改渲染逻辑并暴露出方法，也不需要修改 webpack 配置，接入成本较低。</p><p>EMP 依赖 webpack、乾坤也依赖 umd 的打包方式</p><h2 id="css-隔离" tabindex="-1">CSS 隔离 <a class="header-anchor" href="#css-隔离" aria-label="Permalink to &quot;CSS 隔离&quot;">​</a></h2><h3 id="dynamic-stylesheet" tabindex="-1">Dynamic Stylesheet <a class="header-anchor" href="#dynamic-stylesheet" aria-label="Permalink to &quot;Dynamic Stylesheet&quot;">​</a></h3><p>在应用切出/卸载后，同时卸载掉其样式表即可，原理是浏览器会对所有的样式表的插入、移除做整个 CSSOM 的重构，从而达到 插入、卸载 样式的目的</p><p>这样即能保证，单应用场景下在一个时间点里，只有一个应用的样式表是生效的</p><p>👆 也就是常见的前端应用生产环境打包 CSS 的方式, 分离出单独的 CSS 文件, 自然而然的实现了切换子应用 CSS 互不干扰</p><h3 id="编译改造" tabindex="-1">编译改造 <a class="header-anchor" href="#编译改造" aria-label="Permalink to &quot;编译改造&quot;">​</a></h3><p>提供一个 postcss 插件，在每个应用构建的时候给所有的样式都加上应用前缀包括应用公共库的 CSS。</p><h3 id="域隔离" tabindex="-1">域隔离 <a class="header-anchor" href="#域隔离" aria-label="Permalink to &quot;域隔离&quot;">​</a></h3><p>主应用为每个 <code>css</code> 规则添加特定的前缀来起到隔离的作用，例如微应用中的样式是 <code>p{color:#000}</code> ， 处理后为 <code>.app1 p {color:#000}</code></p><p>创建一个临时的 <code>style</code> 节点。 通过 <code>style</code> 的 <code>sheet</code> 属性来获取一条条规则。 然后调用 <code>ruleStyle</code> 进行转化，转化是通过正则进行匹配然后替换。 最后把转化后的内容替换到原有的 <code>style</code> 节点中。</p><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/20230201113159.png" alt=""></p><h2 id="js-沙箱" tabindex="-1">JS 沙箱 <a class="header-anchor" href="#js-沙箱" aria-label="Permalink to &quot;JS 沙箱&quot;">​</a></h2><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://zhuanlan.zhihu.com/p/580317970" target="_blank" rel="noreferrer">微前端的前世今生-字节前端</a></li><li><a href="https://juejin.cn/post/7004661323124441102" target="_blank" rel="noreferrer">从零到一实现企业级微前端框架，保姆级教学</a></li></ul>',40),c=[i];function l(n,d,s,p,h,m){return a(),o("div",null,c)}const f=e(t,[["render",l]]);export{b as __pageData,f as default};
