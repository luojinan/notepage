import{_ as e,o,c,V as d}from"./chunks/framework.b450deef.js";const b=JSON.parse('{"title":"TS 入门","description":"","frontmatter":{},"headers":[],"relativePath":"articles/01-深度学习/typescript/0-TS入门.md","filePath":"articles/01-深度学习/typescript/0-TS入门.md"}'),t={name:"articles/01-深度学习/typescript/0-TS入门.md"},l=d(`<h1 id="ts-入门" tabindex="-1">TS 入门 <a class="header-anchor" href="#ts-入门" aria-label="Permalink to &quot;TS 入门&quot;">​</a></h1><p><a href="https://jkchao.github.io/typescript-book-chinese/#why" target="_blank" rel="noreferrer">深入理解 TypeScript</a></p><p><a href="https://github.com/mqyqingfeng/learn-typescript" target="_blank" rel="noreferrer">冴羽-ts</a></p><p>ts 同时具有以下功能：</p><ul><li>静态类型检查(扫描)</li><li>语法降级</li><li>编译输出js</li></ul><p>👆 我们发现和现在一些工具功能重复如 <code>编译-webpack</code>、<code>降级-babel</code></p><p>一般的前端项目都只使用类型检查的功能(<code>tsc</code> 配置 <code>compilerOptions.noEmit = true</code> , <code>loader</code> 把 <code>ts</code> 语法移除转为 <code>js</code> )</p><p>而js库开发则可能会使用到 tsc 做转译打包功能(但是 <code>esbuild</code> 或其他构建工具 <code>tsup</code> 还是比 <code>tsc</code> 好用，除非特别简易的库打包可以用 <code>tsc</code>)</p><p>TS 项目开发中的 一些概念：</p><ul><li>抹除(<code>esbuild</code>、<code>webpack-loader</code>) - 无视 <code>tsconfig</code> 的编译配置，仅仅把 <code>TS</code> 转化为 <code>JS</code>，不做任何类型检查、语法降级、注释清除</li><li>类型检查(<code>tsc</code>、<code>IDE</code>) - 根据 <code>tsconfig</code> 对 <code>TS</code> 做静态语法扫描，不输出JS 文件(<code>noEmit</code>)</li><li>转译/编译(<code>tsc</code>) - 根据 <code>tsconfig</code> 把 <code>TS</code> 转化为 <code>JS，包括类型检查并中断报错</code></li></ul><blockquote><p>在开发阶段，我们推荐你靠 IDE 来获取即时的类型错误反馈 - <a href="https://cn.vuejs.org/guide/typescript/overview.html#overview" target="_blank" rel="noreferrer">vue3文档</a></p></blockquote><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/202306110002326.png" alt=""></p><p>👆 和所有涉及编译原理的技术原理相同，如<code>babel</code>、<code>eslint</code>、<code>vue-&gt;js</code></p><h2 id="学习路线" tabindex="-1">学习路线 <a class="header-anchor" href="#学习路线" aria-label="Permalink to &quot;学习路线&quot;">​</a></h2><p>官方文档比较重要的部分：</p><ul><li><a href="https://www.typescriptlang.org/docs/handbook/2/everyday-types.html" target="_blank" rel="noreferrer">Everyday Types</a> 是 TS 的基础知识，看完后可以再看看 <a href="https://www.typescriptlang.org/cheatsheets" target="_blank" rel="noreferrer">Cheat Sheets</a> 中的 Interfaces 和 Types 两张图回顾一下</li><li><a href="https://www.typescriptlang.org/docs/handbook/utility-types.html" target="_blank" rel="noreferrer">Utility Types</a> 是 TS 自带的一些工具类型</li><li>当你希望扩展第三方库的 TS 定义时，需要用到 <a href="https://www.typescriptlang.org/docs/handbook/declaration-merging.html" target="_blank" rel="noreferrer">Declaration Merging</a></li><li>如果你想写一些类型推导，那么 <a href="https://www.typescriptlang.org/docs/handbook/2/types-from-types.html" target="_blank" rel="noreferrer">Type Manipulation</a> 中的都要看看</li></ul><p>看文档，然后就做做 <a href="https://github.com/type-challenges/type-challenges" target="_blank" rel="noreferrer">type challenges</a> 的题</p><h2 id="ide和指令执行类型检查" tabindex="-1">IDE和指令执行类型检查 <a class="header-anchor" href="#ide和指令执行类型检查" aria-label="Permalink to &quot;IDE和指令执行类型检查&quot;">​</a></h2><ul><li>命令执行类型检查(不输出js <code>noEmit</code>)，结果输出在终端</li><li>IDE执行类型检查，结果输出在代码位置</li></ul><p><code>typescript</code> 和 <code>eslint</code> 很像，项目需要：</p><ol><li>安装依赖</li><li>配置文件</li><li><code>IDE</code> 安装 插件</li><li>可选 每次编译运行/代码提交前hook 进行静态扫描拦截</li></ol><p>有时候我们发现启动项目报错 <code>eslint/typescript</code>，那就是安装的依赖被运行扫描生效</p><p>假如此时编辑器在代码部分没有相关的提示，那就是 <code>IDE</code> 的插件没生效，可以检查是否安装或和依赖的版本是否对应</p><p>👆 可以看出 <code>IDE</code> 和 指令 虽然从作用上来说是一体互相协助的，但是运行却是相互独立的</p><p>理论上， <code>VSCode</code> 的代码类型检查是跟项目的 <code>typescript</code> 和 <code>tsconfig</code> 强相关的</p><p>现在遇到了这个问题：</p><blockquote><p><code>tsconfig.json</code> 配置了 <code>exclude</code> 目录，并且<code>exclude</code>目录没有被引用，为什么我的 <code>VSCode</code> 还是对 <code>exclude</code>目录下的ts文件进行了静态类型分析?</p><p>而配置 <code>compilerOptions</code> 编译选项的 <code>target</code> 时为 <code>ES5</code> 时，<code>VSCode</code> 可以正确根据 <code>tsconfig</code> 来提示无 <code>Promise</code> 语法</p><p>也就是 <code>VSCode</code> 会识别 <code>tsconfig</code> 的 <code>compilerOptions，但是不识别</code> <code>exclude</code> ？</p></blockquote><p><a href="https://jkchao.github.io/typescript-book-chinese/faqs/tsconfig-behavior.html#%E4%B8%BA%E4%BB%80%E4%B9%88%E6%8A%8A%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E6%94%BE%E5%85%A5%E3%80%8Cexclude%E3%80%8D%E9%80%89%E9%A1%B9%E4%B8%AD%EF%BC%8C%E5%AE%83%E4%BB%8D%E7%84%B6%E4%BC%9A%E8%A2%AB%E7%BC%96%E8%AF%91%E5%99%A8%E9%80%89%E4%B8%AD%EF%BC%9F" target="_blank" rel="noreferrer">tsconfig.json 的行为-深入理解 TypeScript</a> ：被 <code>import</code> 的文件，<code>exclude</code> 不会生效</p><p>👇 ChatGPT：</p><blockquote><p><code>VSCode</code> 编辑器会使用自己的静态类型检查器来提供编辑器级别的类型分析和自动完成功能</p><p>虽然 <code>tsc</code> 不会编译 <code>exclude</code> 目录下的文件，但是 <code>VSCode</code> 仍然会加载这些文件并对其进行静态类型分析，以提供更好的 <code>VSCode</code> 支持和代码提示。这意味着即使你在编译时排除了这些文件， <code>VSCode</code> 仍然会检查它们并提供相应的类型检查功能。</p></blockquote><blockquote><p>如果你希望 <code>VSCode</code> 完全忽略 <code>exclude</code> 目录下的文件，以减少 <code>VSCode</code> 的静态类型检查工作量，你可以尝试使用其他插件或配置来实现</p><p>例如，一些 <code>VSCode</code> 插件可以根据指定的文件规则或模式来排除特定的文件或目录，这样 <code>VSCode</code> 就不会对这些文件进行静态类型检查。你可以在 <code>VSCode</code> 的插件市场中搜索相关的插件，并按照插件的说明进行配置</p></blockquote><p>🤔️ 不太确定，也可能是我电脑 <code>IDE</code> 的问题，理论上 <code>VSCode</code> 会根据 <code>exclude</code> 配置忽略类型检查</p><h2 id="现代前端项目的选择" tabindex="-1">现代前端项目的选择 <a class="header-anchor" href="#现代前端项目的选择" aria-label="Permalink to &quot;现代前端项目的选择&quot;">​</a></h2><h3 id="vite" tabindex="-1">Vite <a class="header-anchor" href="#vite" aria-label="Permalink to &quot;Vite&quot;">​</a></h3><p>在基于 <code>Vite</code> 的配置中，<code>开发服务器devServer</code> 和 <code>打包器build</code> 将只会对 <code>TypeScript</code> 文件：</p><ul><li>执行 抹除 (<code>esbuild</code>)</li><li>而不会执行 类型检查</li></ul><p>这保证了 <code>Vite</code> 开发服务器在使用 <code>TypeScript</code> 时也能始终保持飞快的速度</p><p>Vite 之所以不把类型检查作为转换过程的一部分，是因为这两项工作在本质上是不同的。转译可以在每个文件的基础上进行，与 Vite 的按需编译模式完全吻合。相比之下，类型检查需要了解整个模块图。把类型检查塞进 Vite 的转换管道，将不可避免地损害 Vite 的速度优势。</p><p>如果需要类型检查来拦截代码提交，可以使用 <code>tsc</code> 命令执行类型检查(不输出js <code>noEmit</code>)</p><p>而 <code>Vue</code> 因为是 <code>.vue</code> 文件而不是 ts文件，因此提供一个 <code>vue-tsc</code> 命令工具</p><blockquote><p><code>vue-tsc</code> 是对 <code>TypeScript</code> 自身命令行界面 <code>tsc</code> 的一个封装。它的工作方式基本和 <code>tsc</code> 一致。即：执行 <code>TS</code> 编译(只做类型检查也要执行编译指令<code>tsc</code>？)</p></blockquote><blockquote><p>在仅执行 <code>TS</code> 抹除的项目中，假如额外开启类型检查：</p><p>开启 <code>Vite</code> 开发服务器的同时以侦听模式运行 <code>vue-tsc</code></p><p>或是使用 <code>vite-plugin-checker</code> 这样在另一个 <code>worker</code> 线程里做静态检查的插件</p></blockquote><h2 id="d-ts" tabindex="-1">d.ts <a class="header-anchor" href="#d-ts" aria-label="Permalink to &quot;d.ts&quot;">​</a></h2><blockquote><p><code>d.ts</code> - <code>declaration files</code> 声明文件，本质上还是ts文件，这更像是一种约定</p><p>一般指：库文件，用于声明第三方库，或自己定义的库目录</p></blockquote><ul><li>内置的<code>d.ts</code>: <code>lib.dom.d.ts</code></li><li>安装第三方库的<code>d.ts</code>: @types/jquery/index.d.ts</li><li>安装第三方库的<code>node/globals.d.ts</code> 会无视 <code>tsconfig</code> 的 <code>lib</code>，如: <code>@types/node</code></li><li>业务代码创建的 <code>d.ts</code></li></ul><p>第三方库:👇</p><p>如 <code>jquery</code> 需要手安装 <code>@types/jquery</code> 则会安装到 当前项目的 <code>node_modules/@types/</code> 下</p><p>内置库文件:👇</p><p>我们点进 <code>console</code> 的类型声明 会跳到 <code>VSCode(插件)</code> 提供的 <code>lib.dom.d.ts</code> 而不是 ts的</p><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/202306031741730.png" alt=""></p><p>业务代码 <code>d.ts</code>: 👇</p><p>可以创建在项目任何目录，并且任意命名，若分模块创建多个会被ts合并成一个来识别(会自动去重)</p><p>我们常把自定义<code>d.ts</code> 写在项目根目录，或 <code>typing/</code> 目录下</p><p>一方面是为了方便管理，另一方面是为了避免同名错误如：👇</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">├── src/utils/</span></span>
<span class="line"><span style="color:#A6ACCD;">│   ├── index.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">│   └── index.d.ts</span></span>
<span class="line"><span style="color:#A6ACCD;">└── tsconfig.json</span></span></code></pre></div><p>👆 我们把类型写在同级的 <code>d.ts</code> 下作为全局类型，不使用 <code>import</code> 而是直接使用类型</p><p>此时 ts 会帮我们寻找类型，理论上，<code>d.ts</code> 定义的是全局的类型，可以直接使用，但是发现不生效：</p><ol><li><code>index.ts</code> 会从自身寻找类型定义</li><li>往同级目录 <code>d.ts</code> 寻找，但是忽略同名 <code>index.d.ts</code></li><li>往上级目录寻找 <code>d.ts</code></li></ol><h2 id="类型空间和变量空间" tabindex="-1">类型空间和变量空间 <a class="header-anchor" href="#类型空间和变量空间" aria-label="Permalink to &quot;类型空间和变量空间&quot;">​</a></h2><p><a href="./TS模块化.html#纯类型内容时的TS模块化">TS模块化</a></p>`,60),s=[l];function p(a,i,r,n,h,u){return o(),c("div",null,s)}const y=e(t,[["render",p]]);export{b as __pageData,y as default};
