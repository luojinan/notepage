import{_ as s,o as a,c as n,V as e}from"./chunks/framework.b450deef.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"articles/03-架构/webpack/重学webpack-04plugin.md","filePath":"articles/03-架构/webpack/重学webpack-04plugin.md"}'),l={name:"articles/03-架构/webpack/重学webpack-04plugin.md"},p=e(`<blockquote><p>webpack的plugin机制是钩子，实现钩子🪝的方式，最容易想到的就是<code>发布订阅</code>了 埋下标识，再特定时机触发</p></blockquote><p>但是webpack的🪝机制基于 <a href="https://github.com/webpack/tapable" target="_blank" rel="noreferrer">Tapable</a> 实现，有人说是</p><blockquote><p>网上不少资料将 webpack 的插件架构归类为“<strong>事件/订阅</strong>”模式，我认为这种归纳有失偏颇。订阅模式是一种<strong>松耦合架构</strong>，发布器只是在特定时机发布事件消息，订阅者并不或者很少与事件直接发生交互，举例来说，我们平常在使用 HTML 事件的时候很多时候只是在这个时机触发业务逻辑，很少调用上下文操作。</p><p>而 webpack 的插件体系是一种基于 <code>Tapable</code> 实现的<strong>强耦合架构</strong>，它在特定时机触发钩子时会附带上足够的上下文信息，插件定义的钩子回调中，能也只能与这些上下文背后的数据结构、接口交互产生 <code>side effect</code>，进而影响到编译状态和后续流程。 <a href="https://zhuanlan.zhihu.com/p/367931462" target="_blank" rel="noreferrer">源码解读-Webpack 插件架构深度讲解</a></p></blockquote><p>插件就是一个带有 <code>apply</code> 函数的类 👇</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SomePlugin</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">apply</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">compiler</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="tapable" tabindex="-1">Tapable <a class="header-anchor" href="#tapable" aria-label="Permalink to &quot;Tapable&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  SyncHook</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  SyncBailHook</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  SyncWaterfallHook</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  SyncLoopHook</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  AsyncParallelHook</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  AsyncParallelBailHook</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  AsyncSeriesHook</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  AsyncSeriesBailHook</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  AsyncSeriesWaterfallHook</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">tapable</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p><img src="https://kingan-md-img.oss-cn-guangzhou.aliyuncs.com/blog/20221214170130.png" alt=""></p><p><a href="https://juejin.cn/post/7167581508952129573" target="_blank" rel="noreferrer">前端插件化方案研究[1]——webpack 插件机制</a></p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/372381276" target="_blank" rel="noreferrer">插件式可扩展架构设计心得</a></p></blockquote><blockquote><p><a href="https://zhuanlan.zhihu.com/p/439960042" target="_blank" rel="noreferrer">webpack loader 与plugin 开发实战 —— 点击 vue 页面元素跳转到对应的 vscode 代码</a></p></blockquote>`,11),o=[p];function t(c,r,i,y,D,A){return a(),n("div",null,o)}const k=s(l,[["render",t]]);export{b as __pageData,k as default};
